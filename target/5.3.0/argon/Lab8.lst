
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Lab8/target/5.3.0/argon/Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000054ec  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9508  000b9508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003e570  000b952c  0000e570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000210  2003e5e0  2003e5e0  0001e5e0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b959c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b95a0  000b95a0  000195a0  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b95a6  000b95a6  000195a6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b95ca  000b95ca  000195ca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016ffb9  00000000  00000000  000195ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000196b0  00000000  00000000  00189587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00048a81  00000000  00000000  001a2c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000034e8  00000000  00000000  001eb6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bdd0  00000000  00000000  001eeba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000479ed  00000000  00000000  001fa970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005a240  00000000  00000000  0024235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00145bc8  00000000  00000000  0029c59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009b4c  00000000  00000000  003e2168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fea3 	bl	b7d9c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 feab 	bl	b7db8 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e570 	.word	0x2003e570
   b406c:	000b952c 	.word	0x000b952c
   b4070:	2003e5e0 	.word	0x2003e5e0
   b4074:	2003e5e0 	.word	0x2003e5e0
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 fe51 	bl	b6d28 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b94e4 	.word	0x000b94e4
   b40a0:	000b9508 	.word	0x000b9508

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 bd5a 	b.w	b4b5c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 fcdf 	bl	b4a6c <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 bdf1 	b.w	b6c98 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f002 bb91 	b.w	b67dc <malloc>

000b40ba <_Znaj>:
   b40ba:	f002 bb8f 	b.w	b67dc <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f002 bb95 	b.w	b67ec <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f002 fada 	bl	b6684 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b6365 	.word	0x000b6365
   b40d8:	000b8044 	.word	0x000b8044

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b40ec:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b40ee:	f002 f941 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b40f2:	4b03      	ldr	r3, [pc, #12]	; (b4100 <_ZN10CloudClass7processEv.isra.0+0x14>)
   b40f4:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b40f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b40fa:	f002 bb5f 	b.w	b67bc <spark_process>
   b40fe:	bf00      	nop
   b4100:	2003e740 	.word	0x2003e740

000b4104 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4104:	6803      	ldr	r3, [r0, #0]
   b4106:	b12b      	cbz	r3, b4114 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4108:	6842      	ldr	r2, [r0, #4]
   b410a:	4293      	cmp	r3, r2
   b410c:	d202      	bcs.n	b4114 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b410e:	4618      	mov	r0, r3
   b4110:	f003 be3c 	b.w	b7d8c <atoi>
   b4114:	2000      	movs	r0, #0
   b4116:	4770      	bx	lr

000b4118 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4118:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b411a:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b411c:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b411e:	b145      	cbz	r5, b4132 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4120:	6843      	ldr	r3, [r0, #4]
   b4122:	429d      	cmp	r5, r3
   b4124:	d205      	bcs.n	b4132 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4126:	4628      	mov	r0, r5
   b4128:	f7ff ff82 	bl	b4030 <strlen>
   b412c:	3001      	adds	r0, #1
   b412e:	4405      	add	r5, r0
   b4130:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4132:	4620      	mov	r0, r4
   b4134:	bd38      	pop	{r3, r4, r5, pc}

000b4136 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4138:	4604      	mov	r4, r0
   b413a:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b413c:	460d      	mov	r5, r1
   b413e:	b921      	cbnz	r1, b414a <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4140:	6803      	ldr	r3, [r0, #0]
   b4142:	1c7a      	adds	r2, r7, #1
   b4144:	6042      	str	r2, [r0, #4]
   b4146:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b414a:	4608      	mov	r0, r1
   b414c:	f7ff ff70 	bl	b4030 <strlen>
    if (len + l > buff_size)
   b4150:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4152:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4154:	19f2      	adds	r2, r6, r7
   b4156:	429a      	cmp	r2, r3
   b4158:	d8f6      	bhi.n	b4148 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b415a:	6820      	ldr	r0, [r4, #0]
   b415c:	4632      	mov	r2, r6
   b415e:	4629      	mov	r1, r5
   b4160:	4438      	add	r0, r7
   b4162:	f003 fe1b 	bl	b7d9c <memcpy>
    len += l;
   b4166:	6860      	ldr	r0, [r4, #4]
   b4168:	4430      	add	r0, r6
   b416a:	6060      	str	r0, [r4, #4]
   b416c:	e7ec      	b.n	b4148 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4170 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4170:	b538      	push	{r3, r4, r5, lr}
   b4172:	4604      	mov	r4, r0
   b4174:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4176:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b417a:	6825      	ldr	r5, [r4, #0]
   b417c:	4a04      	ldr	r2, [pc, #16]	; (b4190 <_ZN10BlynkParam3addEi+0x20>)
   b417e:	1a09      	subs	r1, r1, r0
   b4180:	4428      	add	r0, r5
   b4182:	f002 fb3b 	bl	b67fc <snprintf>
   b4186:	6863      	ldr	r3, [r4, #4]
   b4188:	3001      	adds	r0, #1
   b418a:	4403      	add	r3, r0
   b418c:	6063      	str	r3, [r4, #4]
    }
   b418e:	bd38      	pop	{r3, r4, r5, pc}
   b4190:	000b8059 	.word	0x000b8059

000b4194 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4194:	b538      	push	{r3, r4, r5, lr}
   b4196:	4604      	mov	r4, r0
   b4198:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b419a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b419e:	6825      	ldr	r5, [r4, #0]
   b41a0:	4a04      	ldr	r2, [pc, #16]	; (b41b4 <_ZN10BlynkParam3addEl+0x20>)
   b41a2:	1a09      	subs	r1, r1, r0
   b41a4:	4428      	add	r0, r5
   b41a6:	f002 fb29 	bl	b67fc <snprintf>
   b41aa:	6863      	ldr	r3, [r4, #4]
   b41ac:	3001      	adds	r0, #1
   b41ae:	4403      	add	r3, r0
   b41b0:	6063      	str	r3, [r4, #4]
    }
   b41b2:	bd38      	pop	{r3, r4, r5, pc}
   b41b4:	000b805c 	.word	0x000b805c

000b41b8 <_Z14format_displayv>:

  }

}

void format_display () {
   b41b8:	b510      	push	{r4, lr}
  //sets up basic formatting for when using the display
  display.clearDisplay();
   b41ba:	4c07      	ldr	r4, [pc, #28]	; (b41d8 <_Z14format_displayv+0x20>)
   b41bc:	4620      	mov	r0, r4
   b41be:	f001 fd4d 	bl	b5c5c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b41c2:	2101      	movs	r1, #1
   b41c4:	4620      	mov	r0, r4
   b41c6:	f001 f972 	bl	b54ae <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b41ca:	2200      	movs	r2, #0
   b41cc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b41d0:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE); 
  display.setCursor(0,0);
   b41d4:	bd10      	pop	{r4, pc}
   b41d6:	bf00      	nop
   b41d8:	2003e640 	.word	0x2003e640

000b41dc <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b41dc:	b508      	push	{r3, lr}
        state = CONNECTING;
   b41de:	2300      	movs	r3, #0
   b41e0:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b41e2:	6800      	ldr	r0, [r0, #0]
   b41e4:	f003 fa32 	bl	b764c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b41e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b41ec:	f002 b844 	b.w	b6278 <BlynkNoOpCbk>

000b41f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b41f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b41f4:	188f      	adds	r7, r1, r2
   b41f6:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b41f8:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b41fa:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b41fe:	4606      	mov	r6, r0
   b4200:	4689      	mov	r9, r1
   b4202:	4690      	mov	r8, r2
    if (it >= param.end())
   b4204:	f080 80c2 	bcs.w	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4208:	a805      	add	r0, sp, #20
   b420a:	880d      	ldrh	r5, [r1, #0]
   b420c:	f7ff ff84 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
   b4210:	6803      	ldr	r3, [r0, #0]
   b4212:	42bb      	cmp	r3, r7
   b4214:	f080 80ba 	bcs.w	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b4218:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b421a:	7803      	ldrb	r3, [r0, #0]
   b421c:	2b41      	cmp	r3, #65	; 0x41
   b421e:	d149      	bne.n	b42b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b4220:	3001      	adds	r0, #1
   b4222:	f003 fdb3 	bl	b7d8c <atoi>
   b4226:	2805      	cmp	r0, #5
   b4228:	dd37      	ble.n	b429a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b422a:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b422c:	f247 2376 	movw	r3, #29302	; 0x7276
   b4230:	429d      	cmp	r5, r3
   b4232:	f000 80d3 	beq.w	b43dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b4236:	d841      	bhi.n	b42bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b4238:	f247 2361 	movw	r3, #29281	; 0x7261
   b423c:	429d      	cmp	r5, r3
   b423e:	f000 80a8 	beq.w	b4392 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b4242:	f247 2364 	movw	r3, #29284	; 0x7264
   b4246:	429d      	cmp	r5, r3
   b4248:	d06b      	beq.n	b4322 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b424a:	f646 5370 	movw	r3, #28016	; 0x6d70
   b424e:	429d      	cmp	r5, r3
   b4250:	d141      	bne.n	b42d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4252:	4d78      	ldr	r5, [pc, #480]	; (b4434 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4254:	4e78      	ldr	r6, [pc, #480]	; (b4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4256:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b444c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b425a:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b425c:	42b8      	cmp	r0, r7
   b425e:	f080 8095 	bcs.w	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4262:	7803      	ldrb	r3, [r0, #0]
   b4264:	2b41      	cmp	r3, #65	; 0x41
   b4266:	d14b      	bne.n	b4300 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4268:	3001      	adds	r0, #1
   b426a:	f003 fd8f 	bl	b7d8c <atoi>
   b426e:	2805      	cmp	r0, #5
   b4270:	dd39      	ble.n	b42e6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4272:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4274:	a805      	add	r0, sp, #20
   b4276:	f7ff ff4f 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b427a:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b427e:	4629      	mov	r1, r5
   b4280:	4648      	mov	r0, r9
   b4282:	f7ff fecb 	bl	b401c <strcmp>
   b4286:	4601      	mov	r1, r0
   b4288:	2800      	cmp	r0, #0
   b428a:	d13d      	bne.n	b4308 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b428c:	4620      	mov	r0, r4
   b428e:	f003 fb69 	bl	b7964 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4292:	a805      	add	r0, sp, #20
   b4294:	f7ff ff40 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4298:	e7df      	b.n	b425a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b429a:	9805      	ldr	r0, [sp, #20]
   b429c:	3001      	adds	r0, #1
   b429e:	f003 fd75 	bl	b7d8c <atoi>
   b42a2:	2800      	cmp	r0, #0
   b42a4:	dbc1      	blt.n	b422a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b42a6:	9805      	ldr	r0, [sp, #20]
   b42a8:	3001      	adds	r0, #1
   b42aa:	f003 fd6f 	bl	b7d8c <atoi>
   b42ae:	300e      	adds	r0, #14
   b42b0:	b2c4      	uxtb	r4, r0
   b42b2:	e7bb      	b.n	b422c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b42b4:	a805      	add	r0, sp, #20
   b42b6:	f7ff ff25 	bl	b4104 <_ZNK10BlynkParam8iterator5asIntEv>
   b42ba:	e7f9      	b.n	b42b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b42bc:	f247 7364 	movw	r3, #30564	; 0x7764
   b42c0:	429d      	cmp	r5, r3
   b42c2:	d04f      	beq.n	b4364 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b42c4:	f247 7376 	movw	r3, #30582	; 0x7776
   b42c8:	429d      	cmp	r5, r3
   b42ca:	f000 8097 	beq.w	b43fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b42ce:	f247 7361 	movw	r3, #30561	; 0x7761
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d06f      	beq.n	b43b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b42d6:	2300      	movs	r3, #0
   b42d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b42dc:	2202      	movs	r2, #2
   b42de:	9200      	str	r2, [sp, #0]
   b42e0:	8b72      	ldrh	r2, [r6, #26]
   b42e2:	4619      	mov	r1, r3
   b42e4:	e03a      	b.n	b435c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b42e6:	9805      	ldr	r0, [sp, #20]
   b42e8:	3001      	adds	r0, #1
   b42ea:	f003 fd4f 	bl	b7d8c <atoi>
   b42ee:	2800      	cmp	r0, #0
   b42f0:	dbbf      	blt.n	b4272 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b42f2:	9805      	ldr	r0, [sp, #20]
   b42f4:	3001      	adds	r0, #1
   b42f6:	f003 fd49 	bl	b7d8c <atoi>
   b42fa:	300e      	adds	r0, #14
   b42fc:	b2c4      	uxtb	r4, r0
   b42fe:	e7b9      	b.n	b4274 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4300:	a805      	add	r0, sp, #20
   b4302:	f7ff feff 	bl	b4104 <_ZNK10BlynkParam8iterator5asIntEv>
   b4306:	e7f9      	b.n	b42fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4308:	4631      	mov	r1, r6
   b430a:	4648      	mov	r0, r9
   b430c:	f7ff fe86 	bl	b401c <strcmp>
   b4310:	b128      	cbz	r0, b431e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b4312:	4641      	mov	r1, r8
   b4314:	4648      	mov	r0, r9
   b4316:	f7ff fe81 	bl	b401c <strcmp>
   b431a:	2800      	cmp	r0, #0
   b431c:	d1b9      	bne.n	b4292 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b431e:	2101      	movs	r1, #1
   b4320:	e7b4      	b.n	b428c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4322:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4324:	4945      	ldr	r1, [pc, #276]	; (b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b4326:	9307      	str	r3, [sp, #28]
   b4328:	a807      	add	r0, sp, #28
   b432a:	2310      	movs	r3, #16
   b432c:	2500      	movs	r5, #0
   b432e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4332:	f7ff ff00 	bl	b4136 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4336:	a807      	add	r0, sp, #28
   b4338:	4621      	mov	r1, r4
   b433a:	f7ff ff19 	bl	b4170 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b433e:	4620      	mov	r0, r4
   b4340:	f003 fb3a 	bl	b79b8 <digitalRead>
        rsp.add(analogRead(pin));
   b4344:	4601      	mov	r1, r0
   b4346:	a807      	add	r0, sp, #28
   b4348:	f7ff ff24 	bl	b4194 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b434c:	9b08      	ldr	r3, [sp, #32]
   b434e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4352:	3b01      	subs	r3, #1
   b4354:	9300      	str	r3, [sp, #0]
   b4356:	9b07      	ldr	r3, [sp, #28]
   b4358:	462a      	mov	r2, r5
   b435a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b435c:	4630      	mov	r0, r6
   b435e:	f000 fa85 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4362:	e013      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4364:	a805      	add	r0, sp, #20
   b4366:	f7ff fed7 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
   b436a:	6803      	ldr	r3, [r0, #0]
   b436c:	429f      	cmp	r7, r3
   b436e:	d90d      	bls.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4370:	b2a4      	uxth	r4, r4
   b4372:	2101      	movs	r1, #1
   b4374:	4620      	mov	r0, r4
   b4376:	f003 faf5 	bl	b7964 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b437a:	a805      	add	r0, sp, #20
   b437c:	f7ff fec2 	bl	b4104 <_ZNK10BlynkParam8iterator5asIntEv>
   b4380:	1e01      	subs	r1, r0, #0
   b4382:	bf18      	it	ne
   b4384:	2101      	movne	r1, #1
   b4386:	4620      	mov	r0, r4
   b4388:	f003 fafd 	bl	b7986 <digitalWrite>
    }
}
   b438c:	b00f      	add	sp, #60	; 0x3c
   b438e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4392:	ab0a      	add	r3, sp, #40	; 0x28
   b4394:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4396:	a807      	add	r0, sp, #28
   b4398:	2310      	movs	r3, #16
   b439a:	4929      	ldr	r1, [pc, #164]	; (b4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b439c:	2500      	movs	r5, #0
   b439e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b43a2:	f7ff fec8 	bl	b4136 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b43a6:	a807      	add	r0, sp, #28
   b43a8:	4621      	mov	r1, r4
   b43aa:	f7ff fee1 	bl	b4170 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b43ae:	4620      	mov	r0, r4
   b43b0:	f003 fb15 	bl	b79de <analogRead>
   b43b4:	e7c6      	b.n	b4344 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b43b6:	a805      	add	r0, sp, #20
   b43b8:	f7ff feae 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
   b43bc:	6803      	ldr	r3, [r0, #0]
   b43be:	429f      	cmp	r7, r3
   b43c0:	d9e4      	bls.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b43c2:	b2a4      	uxth	r4, r4
   b43c4:	2101      	movs	r1, #1
   b43c6:	4620      	mov	r0, r4
   b43c8:	f003 facc 	bl	b7964 <pinMode>
        analogWrite(pin, it.asInt());
   b43cc:	a805      	add	r0, sp, #20
   b43ce:	f7ff fe99 	bl	b4104 <_ZNK10BlynkParam8iterator5asIntEv>
   b43d2:	4601      	mov	r1, r0
   b43d4:	4620      	mov	r0, r4
   b43d6:	f003 fb19 	bl	b7a0c <_Z11analogWritetm>
    } break;
   b43da:	e7d7      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b43dc:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b43de:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b43e2:	f001 ff4b 	bl	b627c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b43e6:	4603      	mov	r3, r0
            handler(req);
   b43e8:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b43ea:	b123      	cbz	r3, b43f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b43ec:	4a15      	ldr	r2, [pc, #84]	; (b4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b43ee:	4293      	cmp	r3, r2
   b43f0:	d001      	beq.n	b43f6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b43f2:	4798      	blx	r3
   b43f4:	e7ca      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b43f6:	f001 ff3d 	bl	b6274 <BlynkWidgetRead>
        }
    }
   b43fa:	e7c7      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b43fc:	a805      	add	r0, sp, #20
   b43fe:	f7ff fe8b 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4402:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4404:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4408:	eba3 0109 	sub.w	r1, r3, r9
   b440c:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b4410:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4412:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b4416:	910c      	str	r1, [sp, #48]	; 0x30
   b4418:	f001 ff3a 	bl	b6290 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b441c:	4603      	mov	r3, r0
            handler(req, param);
   b441e:	a90a      	add	r1, sp, #40	; 0x28
   b4420:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4422:	b123      	cbz	r3, b442e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b4424:	4a08      	ldr	r2, [pc, #32]	; (b4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b4426:	4293      	cmp	r3, r2
   b4428:	d001      	beq.n	b442e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b442a:	4798      	blx	r3
   b442c:	e7ae      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b442e:	f001 ff22 	bl	b6276 <BlynkWidgetWrite>
    } break;
   b4432:	e7ab      	b.n	b438c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b4434:	000b8060 	.word	0x000b8060
   b4438:	000b8063 	.word	0x000b8063
   b443c:	000b806b 	.word	0x000b806b
   b4440:	000b806e 	.word	0x000b806e
   b4444:	000b6275 	.word	0x000b6275
   b4448:	000b6277 	.word	0x000b6277
   b444c:	000b8067 	.word	0x000b8067

000b4450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4454:	b08c      	sub	sp, #48	; 0x30
   b4456:	af04      	add	r7, sp, #16
   b4458:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b445a:	2205      	movs	r2, #5
   b445c:	6800      	ldr	r0, [r0, #0]
   b445e:	1d39      	adds	r1, r7, #4
   b4460:	f002 fbb1 	bl	b6bc6 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4464:	b3a8      	cbz	r0, b44d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4466:	2805      	cmp	r0, #5
   b4468:	d004      	beq.n	b4474 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b446a:	2000      	movs	r0, #0
}
   b446c:	3720      	adds	r7, #32
   b446e:	46bd      	mov	sp, r7
   b4470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4474:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b4478:	f001 ffac 	bl	b63d4 <inet_ntohs>
   b447c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b4480:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b4484:	f001 ffa6 	bl	b63d4 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b4488:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b448c:	f8a7 0007 	strh.w	r0, [r7, #7]
   b4490:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b4492:	2b00      	cmp	r3, #0
   b4494:	d0e9      	beq.n	b446a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4496:	793b      	ldrb	r3, [r7, #4]
   b4498:	bb23      	cbnz	r3, b44e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b449a:	f001 fee9 	bl	b6270 <_Z11BlynkMillisv>
   b449e:	4602      	mov	r2, r0
   b44a0:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b44a2:	7f60      	ldrb	r0, [r4, #29]
   b44a4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b44a8:	b9c0      	cbnz	r0, b44dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b44aa:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b44ae:	2901      	cmp	r1, #1
   b44b0:	d114      	bne.n	b44dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b44b2:	2b09      	cmp	r3, #9
   b44b4:	d00f      	beq.n	b44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b44b6:	2bc8      	cmp	r3, #200	; 0xc8
   b44b8:	d001      	beq.n	b44be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b44ba:	2b04      	cmp	r3, #4
   b44bc:	d1d6      	bne.n	b446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b44be:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b44c0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b44c2:	4620      	mov	r0, r4
                state = CONNECTED;
   b44c4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b44c6:	f000 fa81 	bl	b49cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b44ca:	f7ff fe0f 	bl	b40ec <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b44ce:	f001 fed3 	bl	b6278 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b44d2:	2001      	movs	r0, #1
   b44d4:	e7ca      	b.n	b446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b44d6:	2303      	movs	r3, #3
   b44d8:	7763      	strb	r3, [r4, #29]
                break;
   b44da:	e7c7      	b.n	b446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b44dc:	1f58      	subs	r0, r3, #5
   b44de:	bf18      	it	ne
   b44e0:	2001      	movne	r0, #1
   b44e2:	e7c3      	b.n	b446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b44e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b44e8:	d903      	bls.n	b44f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b44ea:	4620      	mov	r0, r4
   b44ec:	f7ff fe76 	bl	b41dc <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b44f0:	e7ef      	b.n	b44d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b44f2:	f100 0308 	add.w	r3, r0, #8
   b44f6:	f023 0307 	bic.w	r3, r3, #7
   b44fa:	466e      	mov	r6, sp
   b44fc:	ebad 0d03 	sub.w	sp, sp, r3
   b4500:	ad04      	add	r5, sp, #16
   b4502:	4602      	mov	r2, r0
   b4504:	4629      	mov	r1, r5
   b4506:	6820      	ldr	r0, [r4, #0]
   b4508:	f002 fb5d 	bl	b6bc6 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b450c:	4580      	cmp	r8, r0
   b450e:	f04f 0000 	mov.w	r0, #0
   b4512:	d17f      	bne.n	b4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b4514:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4518:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b451a:	f001 fea9 	bl	b6270 <_Z11BlynkMillisv>
    switch (hdr.type)
   b451e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b4520:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b4522:	2b14      	cmp	r3, #20
   b4524:	f000 80a6 	beq.w	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b4528:	d848      	bhi.n	b45bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b452a:	2b0f      	cmp	r3, #15
   b452c:	f000 80a2 	beq.w	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b4530:	d807      	bhi.n	b4542 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b4532:	2b02      	cmp	r3, #2
   b4534:	d048      	beq.n	b45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b4536:	2b06      	cmp	r3, #6
   b4538:	d051      	beq.n	b45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b453a:	4620      	mov	r0, r4
   b453c:	f7ff fe4e 	bl	b41dc <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4540:	e058      	b.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b4542:	2b11      	cmp	r3, #17
   b4544:	d1f9      	bne.n	b453a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b4546:	2300      	movs	r3, #0
   b4548:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b454a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b454e:	442b      	add	r3, r5
        if (it >= param.end())
   b4550:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4552:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4556:	d24d      	bcs.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b4558:	f107 000c 	add.w	r0, r7, #12
   b455c:	f8d5 8000 	ldr.w	r8, [r5]
   b4560:	f7ff fdda 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4564:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4566:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b456a:	1b5d      	subs	r5, r3, r5
   b456c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b456e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4572:	687b      	ldr	r3, [r7, #4]
   b4574:	61fd      	str	r5, [r7, #28]
   b4576:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b457a:	8363      	strh	r3, [r4, #26]
   b457c:	4b64      	ldr	r3, [pc, #400]	; (b4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b457e:	4598      	cmp	r8, r3
   b4580:	f000 80bf 	beq.w	b4702 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b4584:	f200 808c 	bhi.w	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b4588:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b458c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4590:	4413      	add	r3, r2
   b4592:	4598      	cmp	r8, r3
   b4594:	f000 809d 	beq.w	b46d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b4598:	d879      	bhi.n	b468e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b459a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b459e:	3b06      	subs	r3, #6
   b45a0:	4598      	cmp	r8, r3
   b45a2:	f000 809c 	beq.w	b46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b45a6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b45aa:	3303      	adds	r3, #3
   b45ac:	4598      	cmp	r8, r3
   b45ae:	d16b      	bne.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b45b0:	f107 0114 	add.w	r1, r7, #20
   b45b4:	4638      	mov	r0, r7
   b45b6:	f001 fe5e 	bl	b6276 <BlynkWidgetWrite>
   b45ba:	e065      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b45bc:	2b29      	cmp	r3, #41	; 0x29
   b45be:	d01b      	beq.n	b45f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b45c0:	2b37      	cmp	r3, #55	; 0x37
   b45c2:	d017      	beq.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b45c4:	2b1d      	cmp	r3, #29
   b45c6:	d1b8      	bne.n	b453a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b45c8:	7f63      	ldrb	r3, [r4, #29]
   b45ca:	b943      	cbnz	r3, b45de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b45cc:	2301      	movs	r3, #1
   b45ce:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b45d0:	4620      	mov	r0, r4
   b45d2:	f000 f9fb 	bl	b49cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b45d6:	f7ff fd89 	bl	b40ec <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b45da:	f001 fe4d 	bl	b6278 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b45de:	2300      	movs	r3, #0
   b45e0:	21c8      	movs	r1, #200	; 0xc8
   b45e2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b45e6:	9100      	str	r1, [sp, #0]
   b45e8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b45ec:	4619      	mov	r1, r3
   b45ee:	4620      	mov	r0, r4
   b45f0:	f000 f93c 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b45f4:	2001      	movs	r0, #1
   b45f6:	e00d      	b.n	b4614 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b45f8:	68a3      	ldr	r3, [r4, #8]
   b45fa:	b91b      	cbnz	r3, b4604 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b45fc:	2040      	movs	r0, #64	; 0x40
   b45fe:	f002 f8ed 	bl	b67dc <malloc>
   b4602:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b4604:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4608:	44a8      	add	r8, r5
        if (it >= param.end())
   b460a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b460c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b4610:	d302      	bcc.n	b4618 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b4612:	2000      	movs	r0, #0
   b4614:	46b5      	mov	sp, r6
   b4616:	e729      	b.n	b446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b4618:	4629      	mov	r1, r5
   b461a:	2240      	movs	r2, #64	; 0x40
   b461c:	68a0      	ldr	r0, [r4, #8]
   b461e:	f003 fc01 	bl	b7e24 <strncpy>
        redir_serv[63] = '\0';
   b4622:	68a3      	ldr	r3, [r4, #8]
   b4624:	2500      	movs	r5, #0
   b4626:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b462a:	f107 0014 	add.w	r0, r7, #20
   b462e:	f7ff fd73 	bl	b4118 <_ZN10BlynkParam8iteratorppEv>
   b4632:	6803      	ldr	r3, [r0, #0]
   b4634:	4598      	cmp	r8, r3
   b4636:	d91b      	bls.n	b4670 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4638:	6978      	ldr	r0, [r7, #20]
   b463a:	b120      	cbz	r0, b4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b463c:	69bb      	ldr	r3, [r7, #24]
   b463e:	4298      	cmp	r0, r3
   b4640:	d214      	bcs.n	b466c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b4642:	f003 fba7 	bl	b7d94 <atol>
            redir_port = it.asLong();
   b4646:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b4648:	6820      	ldr	r0, [r4, #0]
   b464a:	f002 ffff 	bl	b764c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b464e:	6823      	ldr	r3, [r4, #0]
   b4650:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b4652:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4654:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4656:	2300      	movs	r3, #0
   b4658:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b465a:	f001 fe09 	bl	b6270 <_Z11BlynkMillisv>
   b465e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4662:	3808      	subs	r0, #8
   b4664:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4668:	6160      	str	r0, [r4, #20]
   b466a:	e7c3      	b.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b466c:	4628      	mov	r0, r5
   b466e:	e7ea      	b.n	b4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4670:	2550      	movs	r5, #80	; 0x50
   b4672:	e7e9      	b.n	b4648 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b4674:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4676:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b467a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b467e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4680:	4629      	mov	r1, r5
   b4682:	4620      	mov	r0, r4
   b4684:	f7ff fdb4 	bl	b41f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4688:	2300      	movs	r3, #0
   b468a:	8363      	strh	r3, [r4, #26]
   b468c:	e7b2      	b.n	b45f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b468e:	4b21      	ldr	r3, [pc, #132]	; (b4714 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b4690:	4598      	cmp	r8, r3
   b4692:	d1f9      	bne.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4694:	f107 0114 	add.w	r1, r7, #20
   b4698:	4638      	mov	r0, r7
   b469a:	f001 fdec 	bl	b6276 <BlynkWidgetWrite>
   b469e:	e7f3      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b46a0:	4b1d      	ldr	r3, [pc, #116]	; (b4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b46a2:	4598      	cmp	r8, r3
   b46a4:	d021      	beq.n	b46ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b46a6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b46aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b46ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b46b2:	4598      	cmp	r8, r3
   b46b4:	d01f      	beq.n	b46f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b46b6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b46ba:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b46be:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b46c2:	4598      	cmp	r8, r3
   b46c4:	d1e0      	bne.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b46c6:	f107 0114 	add.w	r1, r7, #20
   b46ca:	4638      	mov	r0, r7
   b46cc:	f001 fdd3 	bl	b6276 <BlynkWidgetWrite>
   b46d0:	e7da      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b46d2:	f107 0114 	add.w	r1, r7, #20
   b46d6:	4638      	mov	r0, r7
   b46d8:	f001 fdcd 	bl	b6276 <BlynkWidgetWrite>
   b46dc:	e7d4      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b46de:	f107 0114 	add.w	r1, r7, #20
   b46e2:	4638      	mov	r0, r7
   b46e4:	f001 fdc7 	bl	b6276 <BlynkWidgetWrite>
   b46e8:	e7ce      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b46ea:	f107 0114 	add.w	r1, r7, #20
   b46ee:	4638      	mov	r0, r7
   b46f0:	f001 fdc1 	bl	b6276 <BlynkWidgetWrite>
   b46f4:	e7c8      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b46f6:	f107 0114 	add.w	r1, r7, #20
   b46fa:	4638      	mov	r0, r7
   b46fc:	f001 fdbb 	bl	b6276 <BlynkWidgetWrite>
   b4700:	e7c2      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4702:	f107 0114 	add.w	r1, r7, #20
   b4706:	4638      	mov	r0, r7
   b4708:	f001 fdb5 	bl	b6276 <BlynkWidgetWrite>
   b470c:	e7bc      	b.n	b4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b470e:	bf00      	nop
   b4710:	00736676 	.word	0x00736676
   b4714:	00676264 	.word	0x00676264
   b4718:	6e6f6361 	.word	0x6e6f6361

000b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4720:	4604      	mov	r4, r0
   b4722:	b08c      	sub	sp, #48	; 0x30
   b4724:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b4726:	f7ff fce1 	bl	b40ec <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b472a:	7f63      	ldrb	r3, [r4, #29]
   b472c:	2b02      	cmp	r3, #2
   b472e:	d01e      	beq.n	b476e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b4730:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b4732:	8b62      	ldrh	r2, [r4, #26]
   b4734:	3301      	adds	r3, #1
   b4736:	b2db      	uxtb	r3, r3
   b4738:	7723      	strb	r3, [r4, #28]
   b473a:	b9aa      	cbnz	r2, b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b473c:	2b02      	cmp	r3, #2
   b473e:	d813      	bhi.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b4740:	6820      	ldr	r0, [r4, #0]
   b4742:	f002 fe4b 	bl	b73dc <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b4746:	b1a8      	cbz	r0, b4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b4748:	b925      	cbnz	r5, b4754 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b474a:	6820      	ldr	r0, [r4, #0]
   b474c:	f002 ff24 	bl	b7598 <_ZN9TCPClient9availableEv>
   b4750:	2800      	cmp	r0, #0
   b4752:	dd0f      	ble.n	b4774 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4754:	4620      	mov	r0, r4
   b4756:	f7ff fe7b 	bl	b4450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b475a:	2800      	cmp	r0, #0
   b475c:	d1f5      	bne.n	b474a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b475e:	6820      	ldr	r0, [r4, #0]
   b4760:	f002 ff74 	bl	b764c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4764:	f001 fd88 	bl	b6278 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4768:	7f23      	ldrb	r3, [r4, #28]
   b476a:	3b01      	subs	r3, #1
   b476c:	7723      	strb	r3, [r4, #28]
}
   b476e:	b00c      	add	sp, #48	; 0x30
   b4770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4774:	f001 fd7c 	bl	b6270 <_Z11BlynkMillisv>
   b4778:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b477a:	6820      	ldr	r0, [r4, #0]
   b477c:	f002 fe2e 	bl	b73dc <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4780:	7f67      	ldrb	r7, [r4, #29]
   b4782:	2f01      	cmp	r7, #1
   b4784:	4606      	mov	r6, r0
   b4786:	d124      	bne.n	b47d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4788:	b920      	cbnz	r0, b4794 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b478a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b478c:	4620      	mov	r0, r4
   b478e:	f7ff fd25 	bl	b41dc <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4792:	e7e9      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4794:	68e3      	ldr	r3, [r4, #12]
   b4796:	f24f 6218 	movw	r2, #63000	; 0xf618
   b479a:	1aeb      	subs	r3, r5, r3
   b479c:	4293      	cmp	r3, r2
   b479e:	d8f5      	bhi.n	b478c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b47a0:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b47a4:	4293      	cmp	r3, r2
   b47a6:	d803      	bhi.n	b47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b47a8:	6923      	ldr	r3, [r4, #16]
   b47aa:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b47ac:	4293      	cmp	r3, r2
   b47ae:	d9db      	bls.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b47b0:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b47b2:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b47b6:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b47b8:	4293      	cmp	r3, r2
   b47ba:	d9d5      	bls.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b47bc:	2300      	movs	r3, #0
   b47be:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b47c2:	9300      	str	r3, [sp, #0]
   b47c4:	461a      	mov	r2, r3
   b47c6:	2106      	movs	r1, #6
   b47c8:	4620      	mov	r0, r4
   b47ca:	f000 f84f 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b47ce:	6165      	str	r5, [r4, #20]
                return false;
   b47d0:	e7ca      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b47d2:	2f00      	cmp	r7, #0
   b47d4:	d1c8      	bne.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b47d6:	6963      	ldr	r3, [r4, #20]
   b47d8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b47da:	b140      	cbz	r0, b47ee <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b47dc:	f241 7270 	movw	r2, #6000	; 0x1770
   b47e0:	4293      	cmp	r3, r2
   b47e2:	d9c1      	bls.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b47e4:	6820      	ldr	r0, [r4, #0]
   b47e6:	f002 ff31 	bl	b764c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b47ea:	7767      	strb	r7, [r4, #29]
            return false;
   b47ec:	e7bc      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b47ee:	f241 3288 	movw	r2, #5000	; 0x1388
   b47f2:	4293      	cmp	r3, r2
   b47f4:	d9b8      	bls.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b47f6:	6820      	ldr	r0, [r4, #0]
   b47f8:	f002 ff28 	bl	b764c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b47fc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4800:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4804:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4808:	f1be 0f00 	cmp.w	lr, #0
   b480c:	d01b      	beq.n	b4846 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b480e:	4633      	mov	r3, r6
   b4810:	4642      	mov	r2, r8
   b4812:	4671      	mov	r1, lr
   b4814:	4660      	mov	r0, ip
   b4816:	f002 fd63 	bl	b72e0 <_ZN9TCPClient7connectEPKctm>
   b481a:	2801      	cmp	r0, #1
   b481c:	d1d7      	bne.n	b47ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b481e:	6863      	ldr	r3, [r4, #4]
   b4820:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b4822:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4824:	4618      	mov	r0, r3
            msgIdOut = 1;
   b4826:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b4828:	f7ff fc02 	bl	b4030 <strlen>
   b482c:	2200      	movs	r2, #0
   b482e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4832:	9b05      	ldr	r3, [sp, #20]
   b4834:	9000      	str	r0, [sp, #0]
   b4836:	462a      	mov	r2, r5
   b4838:	211d      	movs	r1, #29
   b483a:	4620      	mov	r0, r4
   b483c:	f000 f816 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b4840:	6923      	ldr	r3, [r4, #16]
   b4842:	6163      	str	r3, [r4, #20]
            return true;
   b4844:	e790      	b.n	b4768 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4846:	4b08      	ldr	r3, [pc, #32]	; (b4868 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b4848:	9306      	str	r3, [sp, #24]
   b484a:	f10c 0720 	add.w	r7, ip, #32
   b484e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4850:	ae07      	add	r6, sp, #28
   b4852:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4854:	683b      	ldr	r3, [r7, #0]
   b4856:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4858:	4642      	mov	r2, r8
   b485a:	4673      	mov	r3, lr
   b485c:	a906      	add	r1, sp, #24
   b485e:	4660      	mov	r0, ip
   b4860:	f002 fe1e 	bl	b74a0 <_ZN9TCPClient7connectE9IPAddresstm>
   b4864:	e7d9      	b.n	b481a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4866:	bf00      	nop
   b4868:	000b90cc 	.word	0x000b90cc

000b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4870:	b083      	sub	sp, #12
   b4872:	af00      	add	r7, sp, #0
   b4874:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4876:	6800      	ldr	r0, [r0, #0]
   b4878:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b487a:	4688      	mov	r8, r1
   b487c:	4616      	mov	r6, r2
   b487e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4880:	46eb      	mov	fp, sp
   b4882:	f002 fdab 	bl	b73dc <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4886:	2800      	cmp	r0, #0
   b4888:	f000 8081 	beq.w	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b488c:	f1b8 0f1d 	cmp.w	r8, #29
   b4890:	d804      	bhi.n	b489c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b4892:	4b4d      	ldr	r3, [pc, #308]	; (b49c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b4894:	fa23 f308 	lsr.w	r3, r3, r8
   b4898:	07db      	lsls	r3, r3, #31
   b489a:	d402      	bmi.n	b48a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b489c:	7f63      	ldrb	r3, [r4, #29]
   b489e:	2b01      	cmp	r3, #1
   b48a0:	d175      	bne.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b48a2:	b946      	cbnz	r6, b48b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b48a4:	8b66      	ldrh	r6, [r4, #26]
   b48a6:	b936      	cbnz	r6, b48b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b48a8:	8b23      	ldrh	r3, [r4, #24]
   b48aa:	3301      	adds	r3, #1
   b48ac:	b29b      	uxth	r3, r3
   b48ae:	2b00      	cmp	r3, #0
   b48b0:	d072      	beq.n	b4998 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b48b2:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b48b4:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b48b6:	f1a8 030c 	sub.w	r3, r8, #12
   b48ba:	2b08      	cmp	r3, #8
   b48bc:	d816      	bhi.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b48be:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b48c2:	4293      	cmp	r3, r2
   b48c4:	bf38      	it	cc
   b48c6:	4613      	movcc	r3, r2
   b48c8:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b48cc:	f001 fcd0 	bl	b6270 <_Z11BlynkMillisv>
   b48d0:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b48d4:	2800      	cmp	r0, #0
   b48d6:	db61      	blt.n	b499c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b48d8:	2100      	movs	r1, #0
   b48da:	4620      	mov	r0, r4
   b48dc:	f7ff ff1e 	bl	b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b48e0:	f001 fcc6 	bl	b6270 <_Z11BlynkMillisv>
   b48e4:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b48e8:	2800      	cmp	r0, #0
   b48ea:	daf5      	bge.n	b48d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b48ec:	f1b9 0f00 	cmp.w	r9, #0
   b48f0:	d05b      	beq.n	b49aa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b48f2:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b48f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b48f6:	2a00      	cmp	r2, #0
   b48f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b48fa:	bf08      	it	eq
   b48fc:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b48fe:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4902:	f10a 0307 	add.w	r3, sl, #7
   b4906:	f023 0307 	bic.w	r3, r3, #7
   b490a:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b490e:	4630      	mov	r0, r6
    hdr->type = cmd;
   b4910:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b4914:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b4918:	f001 fd64 	bl	b63e4 <inet_htons>
    hdr->length = htons(length+length2);
   b491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b491e:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b4922:	18e8      	adds	r0, r5, r3
   b4924:	b280      	uxth	r0, r0
   b4926:	f001 fd5d 	bl	b63e4 <inet_htons>
   b492a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b492e:	f1b9 0f00 	cmp.w	r9, #0
   b4932:	d03c      	beq.n	b49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b4934:	2d00      	cmp	r5, #0
   b4936:	d03a      	beq.n	b49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b4938:	462a      	mov	r2, r5
   b493a:	4649      	mov	r1, r9
   b493c:	f10d 0005 	add.w	r0, sp, #5
   b4940:	f003 fa2c 	bl	b7d9c <memcpy>
        pos += length;
   b4944:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4948:	b13b      	cbz	r3, b495a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b494c:	b12b      	cbz	r3, b495a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b494e:	461a      	mov	r2, r3
   b4950:	687b      	ldr	r3, [r7, #4]
   b4952:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4954:	4418      	add	r0, r3
   b4956:	f003 fa21 	bl	b7d9c <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b495a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b495c:	4555      	cmp	r5, sl
   b495e:	d22a      	bcs.n	b49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4960:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4964:	687b      	ldr	r3, [r7, #4]
   b4966:	6820      	ldr	r0, [r4, #0]
   b4968:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b496c:	bf28      	it	cs
   b496e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4972:	1959      	adds	r1, r3, r5
   b4974:	f002 fc09 	bl	b718a <_ZN9TCPClient5writeEPKhj>
   b4978:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b497a:	2000      	movs	r0, #0
   b497c:	f001 fc76 	bl	b626c <_Z10BlynkDelaym>
        if (w == 0) {
   b4980:	b9be      	cbnz	r6, b49b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b4982:	6820      	ldr	r0, [r4, #0]
   b4984:	f002 fe62 	bl	b764c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4988:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b498a:	f001 fc75 	bl	b6278 <BlynkNoOpCbk>
}
   b498e:	370c      	adds	r7, #12
   b4990:	46dd      	mov	sp, fp
   b4992:	46bd      	mov	sp, r7
   b4994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4998:	2301      	movs	r3, #1
   b499a:	e78a      	b.n	b48b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b499c:	7f21      	ldrb	r1, [r4, #28]
   b499e:	2900      	cmp	r1, #0
   b49a0:	d1a4      	bne.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b49a2:	4620      	mov	r0, r4
   b49a4:	f7ff feba 	bl	b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b49a8:	e7a0      	b.n	b48ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b49aa:	2305      	movs	r3, #5
   b49ac:	e7a2      	b.n	b48f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b49ae:	2005      	movs	r0, #5
   b49b0:	e7c9      	b.n	b4946 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b49b2:	4435      	add	r5, r6
    while (wlen < full_length) {
   b49b4:	e7d2      	b.n	b495c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b49b6:	d003      	beq.n	b49c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b49b8:	4620      	mov	r0, r4
   b49ba:	f7ff fc0f 	bl	b41dc <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b49be:	e7e6      	b.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b49c0:	f001 fc56 	bl	b6270 <_Z11BlynkMillisv>
   b49c4:	6120      	str	r0, [r4, #16]
   b49c6:	e7e2      	b.n	b498e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b49c8:	20000045 	.word	0x20000045

000b49cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b49cc:	b530      	push	{r4, r5, lr}
   b49ce:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b49d0:	ab08      	add	r3, sp, #32
   b49d2:	4604      	mov	r4, r0
   b49d4:	9305      	str	r3, [sp, #20]
   b49d6:	2500      	movs	r5, #0
   b49d8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b49da:	a805      	add	r0, sp, #20
   b49dc:	490b      	ldr	r1, [pc, #44]	; (b4a0c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b49de:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b49e2:	f7ff fba8 	bl	b4136 <_ZN10BlynkParam3addEPKc>
        add(val);
   b49e6:	a805      	add	r0, sp, #20
   b49e8:	4909      	ldr	r1, [pc, #36]	; (b4a10 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b49ea:	f7ff fba4 	bl	b4136 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b49ee:	9b06      	ldr	r3, [sp, #24]
   b49f0:	9302      	str	r3, [sp, #8]
   b49f2:	9b05      	ldr	r3, [sp, #20]
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	2365      	movs	r3, #101	; 0x65
   b49f8:	9300      	str	r3, [sp, #0]
   b49fa:	462a      	mov	r2, r5
   b49fc:	4b05      	ldr	r3, [pc, #20]	; (b4a14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b49fe:	2111      	movs	r1, #17
   b4a00:	4620      	mov	r0, r4
   b4a02:	f7ff ff33 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4a06:	b019      	add	sp, #100	; 0x64
   b4a08:	bd30      	pop	{r4, r5, pc}
   b4a0a:	bf00      	nop
   b4a0c:	000b8071 	.word	0x000b8071
   b4a10:	000b8076 	.word	0x000b8076
   b4a14:	000b80bc 	.word	0x000b80bc

000b4a18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b4a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a1a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4a1e:	ab08      	add	r3, sp, #32
   b4a20:	2400      	movs	r4, #0
   b4a22:	4605      	mov	r5, r0
   b4a24:	460f      	mov	r7, r1
   b4a26:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b4a28:	a805      	add	r0, sp, #20
   b4a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4a2e:	490e      	ldr	r1, [pc, #56]	; (b4a68 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_+0x50>)
    void virtualWrite(int pin, Args... values) {
   b4a30:	4616      	mov	r6, r2
   b4a32:	e9cd 4306 	strd	r4, r3, [sp, #24]
        cmd.add("vw");
   b4a36:	f7ff fb7e 	bl	b4136 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b4a3a:	4639      	mov	r1, r7
   b4a3c:	a805      	add	r0, sp, #20
   b4a3e:	f7ff fb97 	bl	b4170 <_ZN10BlynkParam3addEi>
        add(last);
   b4a42:	4631      	mov	r1, r6
   b4a44:	a805      	add	r0, sp, #20
   b4a46:	f7ff fb93 	bl	b4170 <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4a4a:	9b06      	ldr	r3, [sp, #24]
   b4a4c:	3b01      	subs	r3, #1
   b4a4e:	9300      	str	r3, [sp, #0]
   b4a50:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4a54:	9b05      	ldr	r3, [sp, #20]
   b4a56:	4622      	mov	r2, r4
   b4a58:	2114      	movs	r1, #20
   b4a5a:	4628      	mov	r0, r5
   b4a5c:	f7ff ff06 	bl	b486c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b4a60:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4a66:	bf00      	nop
   b4a68:	000b8084 	.word	0x000b8084

000b4a6c <loop>:
void loop() {
   b4a6c:	b570      	push	{r4, r5, r6, lr}
  display.loop();
   b4a6e:	4834      	ldr	r0, [pc, #208]	; (b4b40 <loop+0xd4>)
   b4a70:	4d34      	ldr	r5, [pc, #208]	; (b4b44 <loop+0xd8>)
   b4a72:	f000 fd94 	bl	b559e <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b4a76:	4834      	ldr	r0, [pc, #208]	; (b4b48 <loop+0xdc>)
   b4a78:	2100      	movs	r1, #0
   b4a7a:	f7ff fe4f 	bl	b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (display.pressedA()) {
   b4a7e:	4830      	ldr	r0, [pc, #192]	; (b4b40 <loop+0xd4>)
   b4a80:	f000 fda6 	bl	b55d0 <_ZN16OledWingAdafruit8pressedAEv>
   b4a84:	b108      	cbz	r0, b4a8a <loop+0x1e>
    data_displayed_toggle = true;
   b4a86:	2301      	movs	r3, #1
   b4a88:	702b      	strb	r3, [r5, #0]
  if (display.pressedB()) {
   b4a8a:	482d      	ldr	r0, [pc, #180]	; (b4b40 <loop+0xd4>)
   b4a8c:	f000 fdaa 	bl	b55e4 <_ZN16OledWingAdafruit8pressedBEv>
   b4a90:	b108      	cbz	r0, b4a96 <loop+0x2a>
    data_displayed_toggle = false;
   b4a92:	2300      	movs	r3, #0
   b4a94:	702b      	strb	r3, [r5, #0]
  if (display.pressedC()) {
   b4a96:	482a      	ldr	r0, [pc, #168]	; (b4b40 <loop+0xd4>)
   b4a98:	4e2c      	ldr	r6, [pc, #176]	; (b4b4c <loop+0xe0>)
   b4a9a:	f000 fdad 	bl	b55f8 <_ZN16OledWingAdafruit8pressedCEv>
   b4a9e:	b118      	cbz	r0, b4aa8 <loop+0x3c>
    button_C_toggle = !button_C_toggle;
   b4aa0:	7833      	ldrb	r3, [r6, #0]
   b4aa2:	f083 0301 	eor.w	r3, r3, #1
   b4aa6:	7033      	strb	r3, [r6, #0]
  prox_value = proximitySensor.getProximity();
   b4aa8:	4829      	ldr	r0, [pc, #164]	; (b4b50 <loop+0xe4>)
   b4aaa:	4c2a      	ldr	r4, [pc, #168]	; (b4b54 <loop+0xe8>)
   b4aac:	f000 fe41 	bl	b5732 <_ZN8VCNL404012getProximityEv>
  digitalWrite(LED1, LOW);
   b4ab0:	2100      	movs	r1, #0
  prox_value = proximitySensor.getProximity();
   b4ab2:	6020      	str	r0, [r4, #0]
  digitalWrite(LED1, LOW);
   b4ab4:	2005      	movs	r0, #5
   b4ab6:	f002 ff66 	bl	b7986 <digitalWrite>
  digitalWrite(LED2, LOW);
   b4aba:	2100      	movs	r1, #0
   b4abc:	2006      	movs	r0, #6
   b4abe:	f002 ff62 	bl	b7986 <digitalWrite>
  digitalWrite(LED3, LOW);
   b4ac2:	2100      	movs	r1, #0
   b4ac4:	2007      	movs	r0, #7
   b4ac6:	f002 ff5e 	bl	b7986 <digitalWrite>
  if  (prox_value < 50) {
   b4aca:	6823      	ldr	r3, [r4, #0]
   b4acc:	2b31      	cmp	r3, #49	; 0x31
    digitalWrite(LED1, HIGH);
   b4ace:	f04f 0101 	mov.w	r1, #1
  if  (prox_value < 50) {
   b4ad2:	dc19      	bgt.n	b4b08 <loop+0x9c>
    digitalWrite(LED1, HIGH);
   b4ad4:	2005      	movs	r0, #5
    digitalWrite(LED3, HIGH);
   b4ad6:	f002 ff56 	bl	b7986 <digitalWrite>
  if (button_C_toggle) {
   b4ada:	7831      	ldrb	r1, [r6, #0]
   b4adc:	b319      	cbz	r1, b4b26 <loop+0xba>
     format_display();
   b4ade:	f7ff fb6b 	bl	b41b8 <_Z14format_displayv>
    if (data_displayed_toggle) {
   b4ae2:	782b      	ldrb	r3, [r5, #0]
   b4ae4:	b1c3      	cbz	r3, b4b18 <loop+0xac>
      display.print(prox_value);
   b4ae6:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4ae8:	2c00      	cmp	r4, #0
   b4aea:	da13      	bge.n	b4b14 <loop+0xa8>
            t = print('-');
   b4aec:	212d      	movs	r1, #45	; 0x2d
   b4aee:	4814      	ldr	r0, [pc, #80]	; (b4b40 <loop+0xd4>)
   b4af0:	f001 fff6 	bl	b6ae0 <_ZN5Print5printEc>
            val = -n;
   b4af4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4af6:	4812      	ldr	r0, [pc, #72]	; (b4b40 <loop+0xd4>)
   b4af8:	220a      	movs	r2, #10
   b4afa:	f002 f800 	bl	b6afe <_ZN5Print11printNumberEmh>
}
   b4afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    display.display();
   b4b02:	480f      	ldr	r0, [pc, #60]	; (b4b40 <loop+0xd4>)
   b4b04:	f001 bb18 	b.w	b6138 <_ZN16Adafruit_SSD13067displayEv>
  } else if (prox_value < 400) {
   b4b08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    digitalWrite(LED2, HIGH);
   b4b0c:	bfb4      	ite	lt
   b4b0e:	2006      	movlt	r0, #6
    digitalWrite(LED3, HIGH);
   b4b10:	2007      	movge	r0, #7
   b4b12:	e7e0      	b.n	b4ad6 <loop+0x6a>
            val = n;
   b4b14:	4621      	mov	r1, r4
   b4b16:	e7ee      	b.n	b4af6 <loop+0x8a>
      ambient_value = proximitySensor.getAmbient();
   b4b18:	480d      	ldr	r0, [pc, #52]	; (b4b50 <loop+0xe4>)
   b4b1a:	f000 fe0d 	bl	b5738 <_ZN8VCNL404010getAmbientEv>
   b4b1e:	4b0e      	ldr	r3, [pc, #56]	; (b4b58 <loop+0xec>)
   b4b20:	4601      	mov	r1, r0
   b4b22:	6018      	str	r0, [r3, #0]
   b4b24:	e7e7      	b.n	b4af6 <loop+0x8a>
    if (data_displayed_toggle) {
   b4b26:	782b      	ldrb	r3, [r5, #0]
   b4b28:	b123      	cbz	r3, b4b34 <loop+0xc8>
      Blynk.virtualWrite(V0, prox_value);
   b4b2a:	6822      	ldr	r2, [r4, #0]
      Blynk.virtualWrite(V1, ambient_value);
   b4b2c:	4806      	ldr	r0, [pc, #24]	; (b4b48 <loop+0xdc>)
   b4b2e:	f7ff ff73 	bl	b4a18 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJiEEEviDpT_>
}
   b4b32:	bd70      	pop	{r4, r5, r6, pc}
      int ambient_value = proximitySensor.getAmbient();
   b4b34:	4806      	ldr	r0, [pc, #24]	; (b4b50 <loop+0xe4>)
   b4b36:	f000 fdff 	bl	b5738 <_ZN8VCNL404010getAmbientEv>
      Blynk.virtualWrite(V1, ambient_value);
   b4b3a:	2101      	movs	r1, #1
      int ambient_value = proximitySensor.getAmbient();
   b4b3c:	4602      	mov	r2, r0
      Blynk.virtualWrite(V1, ambient_value);
   b4b3e:	e7f5      	b.n	b4b2c <loop+0xc0>
   b4b40:	2003e640 	.word	0x2003e640
   b4b44:	2003e571 	.word	0x2003e571
   b4b48:	2003e5e0 	.word	0x2003e5e0
   b4b4c:	2003e570 	.word	0x2003e570
   b4b50:	2003e6b4 	.word	0x2003e6b4
   b4b54:	2003e6b0 	.word	0x2003e6b0
   b4b58:	2003e63c 	.word	0x2003e63c

000b4b5c <setup>:
void setup() {
   b4b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
   b4b5e:	f002 fa01 	bl	b6f64 <_Z16_fetch_usbserialv>
   b4b62:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4b66:	f002 f9f1 	bl	b6f4c <_ZN9USBSerial5beginEl>
  Wire.begin();
   b4b6a:	f002 ffd1 	bl	b7b10 <_Z19__fetch_global_Wirev>
   b4b6e:	f002 fabf 	bl	b70f0 <_ZN7TwoWire5beginEv>
  proximitySensor.begin(); 
   b4b72:	f002 ffcd 	bl	b7b10 <_Z19__fetch_global_Wirev>
   b4b76:	4601      	mov	r1, r0
   b4b78:	4824      	ldr	r0, [pc, #144]	; (b4c0c <setup+0xb0>)
        this->authkey = auth;
   b4b7a:	4c25      	ldr	r4, [pc, #148]	; (b4c10 <setup+0xb4>)
   b4b7c:	f000 fed1 	bl	b5922 <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnProximity();
   b4b80:	4822      	ldr	r0, [pc, #136]	; (b4c0c <setup+0xb0>)
   b4b82:	f000 fe7a 	bl	b587a <_ZN8VCNL404016powerOnProximityEv>
  proximitySensor.powerOnAmbient();
   b4b86:	4821      	ldr	r0, [pc, #132]	; (b4c0c <setup+0xb0>)
   b4b88:	f000 fe54 	bl	b5834 <_ZN8VCNL404014powerOnAmbientEv>
  proximitySensor.enableWhiteChannel();
   b4b8c:	481f      	ldr	r0, [pc, #124]	; (b4c0c <setup+0xb0>)
   b4b8e:	f000 fe98 	bl	b58c2 <_ZN8VCNL404018enableWhiteChannelEv>
  pinMode(LED1, OUTPUT);
   b4b92:	2101      	movs	r1, #1
   b4b94:	2005      	movs	r0, #5
   b4b96:	f002 fee5 	bl	b7964 <pinMode>
  pinMode(LED2, OUTPUT);
   b4b9a:	2101      	movs	r1, #1
   b4b9c:	2006      	movs	r0, #6
   b4b9e:	f002 fee1 	bl	b7964 <pinMode>
  pinMode(LED3, OUTPUT);
   b4ba2:	2101      	movs	r1, #1
   b4ba4:	2007      	movs	r0, #7
   b4ba6:	f002 fedd 	bl	b7964 <pinMode>
  display.setup();
   b4baa:	481a      	ldr	r0, [pc, #104]	; (b4c14 <setup+0xb8>)
   b4bac:	f000 fcce 	bl	b554c <_ZN16OledWingAdafruit5setupEv>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4bb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4bb4:	f001 fb5a 	bl	b626c <_Z10BlynkDelaym>
   b4bb8:	4b17      	ldr	r3, [pc, #92]	; (b4c18 <setup+0xbc>)
   b4bba:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4bbc:	f001 fb58 	bl	b6270 <_Z11BlynkMillisv>
   b4bc0:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b4bc4:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b4bc6:	4a15      	ldr	r2, [pc, #84]	; (b4c1c <setup+0xc0>)
   b4bc8:	635a      	str	r2, [r3, #52]	; 0x34
   b4bca:	3808      	subs	r0, #8
   b4bcc:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b4bd0:	2250      	movs	r2, #80	; 0x50
   b4bd2:	6160      	str	r0, [r4, #20]
   b4bd4:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b4bd6:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b4bd8:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4bdc:	6820      	ldr	r0, [r4, #0]
   b4bde:	f002 fd35 	bl	b764c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4be2:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b4be4:	f001 fb44 	bl	b6270 <_Z11BlynkMillisv>
   b4be8:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b4bea:	7f63      	ldrb	r3, [r4, #29]
   b4bec:	2b01      	cmp	r3, #1
   b4bee:	d00c      	beq.n	b4c0a <setup+0xae>
               (BlynkMillis() - started < timeout))
   b4bf0:	f001 fb3e 	bl	b6270 <_Z11BlynkMillisv>
   b4bf4:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b4bf6:	42b8      	cmp	r0, r7
   b4bf8:	d804      	bhi.n	b4c04 <setup+0xa8>
            run();
   b4bfa:	2100      	movs	r1, #0
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f7ff fd8d 	bl	b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4c02:	e7f2      	b.n	b4bea <setup+0x8e>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b4c04:	7f63      	ldrb	r3, [r4, #29]
   b4c06:	2b01      	cmp	r3, #1
   b4c08:	d1e8      	bne.n	b4bdc <setup+0x80>
}
   b4c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4c0c:	2003e6b4 	.word	0x2003e6b4
   b4c10:	2003e5e0 	.word	0x2003e5e0
   b4c14:	2003e640 	.word	0x2003e640
   b4c18:	000b8087 	.word	0x000b8087
   b4c1c:	000b80a8 	.word	0x000b80a8

000b4c20 <_GLOBAL__sub_I_Blynk>:
   b4c20:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b4c22:	4c10      	ldr	r4, [pc, #64]	; (b4c64 <_GLOBAL__sub_I_Blynk+0x44>)
   b4c24:	4620      	mov	r0, r4
   b4c26:	f002 fd5b 	bl	b76e0 <_ZN9TCPClientC1Ev>
   b4c2a:	f104 001c 	add.w	r0, r4, #28
   b4c2e:	f002 f8e7 	bl	b6e00 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4c32:	4b0d      	ldr	r3, [pc, #52]	; (b4c68 <_GLOBAL__sub_I_Blynk+0x48>)
   b4c34:	2100      	movs	r1, #0
   b4c36:	e9c3 4100 	strd	r4, r1, [r3]
   b4c3a:	e9c3 1102 	strd	r1, r1, [r3, #8]
   b4c3e:	e9c3 1104 	strd	r1, r1, [r3, #16]
   b4c42:	6199      	str	r1, [r3, #24]
   b4c44:	8399      	strh	r1, [r3, #28]
SYSTEM_THREAD(ENABLED);
   b4c46:	2001      	movs	r0, #1
   b4c48:	6361      	str	r1, [r4, #52]	; 0x34
   b4c4a:	8721      	strh	r1, [r4, #56]	; 0x38
   b4c4c:	f001 fd3a 	bl	b66c4 <system_thread_set_state>
VCNL4040 proximitySensor;
   b4c50:	4806      	ldr	r0, [pc, #24]	; (b4c6c <_GLOBAL__sub_I_Blynk+0x4c>)
   b4c52:	f000 fd34 	bl	b56be <_ZN8VCNL4040C1Ev>
   b4c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b4c5a:	4805      	ldr	r0, [pc, #20]	; (b4c70 <_GLOBAL__sub_I_Blynk+0x50>)
   b4c5c:	2107      	movs	r1, #7
   b4c5e:	f000 bc47 	b.w	b54f0 <_ZN16OledWingAdafruitC1Ei>
   b4c62:	bf00      	nop
   b4c64:	2003e600 	.word	0x2003e600
   b4c68:	2003e5e0 	.word	0x2003e5e0
   b4c6c:	2003e6b4 	.word	0x2003e6b4
   b4c70:	2003e640 	.word	0x2003e640

000b4c74 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4c74:	4770      	bx	lr

000b4c76 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4c76:	b510      	push	{r4, lr}
  }
   b4c78:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4c7a:	4604      	mov	r4, r0
  }
   b4c7c:	f7ff fa1f 	bl	b40be <_ZdlPvj>
   b4c80:	4620      	mov	r0, r4
   b4c82:	bd10      	pop	{r4, pc}

000b4c84 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c84:	b40e      	push	{r1, r2, r3}
   b4c86:	b503      	push	{r0, r1, lr}
   b4c88:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4c8a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4c8c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4c90:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4c92:	f001 ff52 	bl	b6b3a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4c96:	b002      	add	sp, #8
   b4c98:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c9c:	b003      	add	sp, #12
   b4c9e:	4770      	bx	lr

000b4ca0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4ca2:	4604      	mov	r4, r0
   b4ca4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4ca6:	7922      	ldrb	r2, [r4, #4]
   b4ca8:	68a3      	ldr	r3, [r4, #8]
   b4caa:	b132      	cbz	r2, b4cba <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4cac:	b9a3      	cbnz	r3, b4cd8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4cae:	490b      	ldr	r1, [pc, #44]	; (b4cdc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4cb0:	b002      	add	sp, #8
   b4cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4cb6:	f001 bf0f 	b.w	b6ad8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4cba:	4a09      	ldr	r2, [pc, #36]	; (b4ce0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4cbc:	7b26      	ldrb	r6, [r4, #12]
   b4cbe:	4d09      	ldr	r5, [pc, #36]	; (b4ce4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4cc0:	4909      	ldr	r1, [pc, #36]	; (b4ce8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4cc2:	7b64      	ldrb	r4, [r4, #13]
   b4cc4:	2e01      	cmp	r6, #1
   b4cc6:	bf18      	it	ne
   b4cc8:	4629      	movne	r1, r5
   b4cca:	e9cd 1400 	strd	r1, r4, [sp]
   b4cce:	4907      	ldr	r1, [pc, #28]	; (b4cec <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4cd0:	f7ff ffd8 	bl	b4c84 <_ZN5Print6printfEPKcz>
  }
   b4cd4:	b002      	add	sp, #8
   b4cd6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4cd8:	4a05      	ldr	r2, [pc, #20]	; (b4cf0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4cda:	e7ef      	b.n	b4cbc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4cdc:	000b8134 	.word	0x000b8134
   b4ce0:	000b812b 	.word	0x000b812b
   b4ce4:	000b8130 	.word	0x000b8130
   b4ce8:	000b812c 	.word	0x000b812c
   b4cec:	000b814a 	.word	0x000b814a
   b4cf0:	000b8123 	.word	0x000b8123

000b4cf4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cf8:	b085      	sub	sp, #20
   b4cfa:	461f      	mov	r7, r3
   b4cfc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4d00:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4d04:	eba8 0902 	sub.w	r9, r8, r2
   b4d08:	eba7 0a01 	sub.w	sl, r7, r1
   b4d0c:	f1b9 0f00 	cmp.w	r9, #0
   b4d10:	bfb8      	it	lt
   b4d12:	f1c9 0900 	rsblt	r9, r9, #0
   b4d16:	f1ba 0f00 	cmp.w	sl, #0
   b4d1a:	bfb8      	it	lt
   b4d1c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4d20:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4d22:	4683      	mov	fp, r0
   b4d24:	460c      	mov	r4, r1
   b4d26:	4615      	mov	r5, r2
    if (steep) {
   b4d28:	dd04      	ble.n	b4d34 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4d2a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4d2c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4d2e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4d30:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4d32:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4d34:	42bc      	cmp	r4, r7
   b4d36:	dd05      	ble.n	b4d44 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4d38:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4d3a:	4645      	mov	r5, r8
   b4d3c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4d3e:	4622      	mov	r2, r4
   b4d40:	463c      	mov	r4, r7
   b4d42:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4d44:	1b3e      	subs	r6, r7, r4
   b4d46:	b2b2      	uxth	r2, r6
   b4d48:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4d4a:	eba8 0205 	sub.w	r2, r8, r5
   b4d4e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4d52:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4d56:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4d5a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4d5e:	4545      	cmp	r5, r8
   b4d60:	bfb4      	ite	lt
   b4d62:	2201      	movlt	r2, #1
   b4d64:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b4d68:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4d6a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4d6c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4d6e:	42bc      	cmp	r4, r7
   b4d70:	dc1c      	bgt.n	b4dac <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4d72:	f8db 2000 	ldr.w	r2, [fp]
   b4d76:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4d78:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4d7a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4d7e:	bfc7      	ittee	gt
   b4d80:	4629      	movgt	r1, r5
   b4d82:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4d84:	462a      	movle	r2, r5
   b4d86:	4621      	movle	r1, r4
   b4d88:	4658      	mov	r0, fp
   b4d8a:	47c0      	blx	r8
        }
        err -= dy;
   b4d8c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4d8e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4d90:	1ab6      	subs	r6, r6, r2
   b4d92:	b2b1      	uxth	r1, r6
   b4d94:	b236      	sxth	r6, r6
        if (err < 0) {
   b4d96:	2e00      	cmp	r6, #0
   b4d98:	da05      	bge.n	b4da6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4d9a:	9a02      	ldr	r2, [sp, #8]
   b4d9c:	4415      	add	r5, r2
            err += dx;
   b4d9e:	9a00      	ldr	r2, [sp, #0]
   b4da0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4da2:	b22d      	sxth	r5, r5
            err += dx;
   b4da4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4da6:	3401      	adds	r4, #1
   b4da8:	b224      	sxth	r4, r4
   b4daa:	e7e0      	b.n	b4d6e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4dac:	b005      	add	sp, #20
   b4dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4db2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4db2:	4770      	bx	lr

000b4db4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4db4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4db6:	6804      	ldr	r4, [r0, #0]
   b4db8:	6924      	ldr	r4, [r4, #16]
   b4dba:	46a4      	mov	ip, r4
}
   b4dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4dc0:	4760      	bx	ip

000b4dc2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4dc2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4dc4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4dc6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4dca:	9502      	str	r5, [sp, #8]
   b4dcc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4dce:	46a4      	mov	ip, r4
}
   b4dd0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4dd2:	4760      	bx	ip

000b4dd4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4dd4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4dd6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4dd8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4ddc:	9502      	str	r5, [sp, #8]
   b4dde:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4de0:	46a4      	mov	ip, r4
}
   b4de2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4de4:	4760      	bx	ip

000b4de6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4de6:	b470      	push	{r4, r5, r6}
   b4de8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4dec:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4df0:	6804      	ldr	r4, [r0, #0]
   b4df2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4df6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4df8:	46a4      	mov	ip, r4
}
   b4dfa:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4dfc:	4760      	bx	ip

000b4dfe <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4dfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e02:	461c      	mov	r4, r3
    startWrite();
   b4e04:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4e06:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4e0a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4e0c:	4605      	mov	r5, r0
   b4e0e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4e10:	3c01      	subs	r4, #1
   b4e12:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4e14:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4e16:	b224      	sxth	r4, r4
    startWrite();
   b4e18:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4e1a:	682b      	ldr	r3, [r5, #0]
   b4e1c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4e20:	9400      	str	r4, [sp, #0]
   b4e22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4e24:	4628      	mov	r0, r5
   b4e26:	463b      	mov	r3, r7
   b4e28:	4632      	mov	r2, r6
   b4e2a:	4639      	mov	r1, r7
   b4e2c:	47a0      	blx	r4
    endWrite();
   b4e2e:	682b      	ldr	r3, [r5, #0]
   b4e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e32:	4628      	mov	r0, r5
}
   b4e34:	b002      	add	sp, #8
   b4e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4e3a:	4718      	bx	r3

000b4e3c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e40:	461d      	mov	r5, r3
    startWrite();
   b4e42:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4e44:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4e48:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4e4a:	4604      	mov	r4, r0
   b4e4c:	4617      	mov	r7, r2
   b4e4e:	460e      	mov	r6, r1
    startWrite();
   b4e50:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4e52:	e9cd 7800 	strd	r7, r8, [sp]
   b4e56:	6822      	ldr	r2, [r4, #0]
   b4e58:	1e6b      	subs	r3, r5, #1
   b4e5a:	4433      	add	r3, r6
   b4e5c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4e5e:	4620      	mov	r0, r4
   b4e60:	b21b      	sxth	r3, r3
   b4e62:	463a      	mov	r2, r7
   b4e64:	4631      	mov	r1, r6
   b4e66:	47a8      	blx	r5
    endWrite();
   b4e68:	6823      	ldr	r3, [r4, #0]
   b4e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e6c:	4620      	mov	r0, r4
}
   b4e6e:	b002      	add	sp, #8
   b4e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4e74:	4718      	bx	r3

000b4e76 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4e76:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e7a:	461e      	mov	r6, r3
    startWrite();
   b4e7c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4e7e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4e82:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4e84:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4e88:	460c      	mov	r4, r1
   b4e8a:	4605      	mov	r5, r0
   b4e8c:	4617      	mov	r7, r2
    startWrite();
   b4e8e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4e90:	4426      	add	r6, r4
   b4e92:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4e94:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4e96:	da0b      	bge.n	b4eb0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4e98:	f8cd 8000 	str.w	r8, [sp]
   b4e9c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4ea0:	4621      	mov	r1, r4
   b4ea2:	464b      	mov	r3, r9
   b4ea4:	463a      	mov	r2, r7
   b4ea6:	4628      	mov	r0, r5
   b4ea8:	3401      	adds	r4, #1
   b4eaa:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4eac:	b224      	sxth	r4, r4
   b4eae:	e7f0      	b.n	b4e92 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4eb2:	4628      	mov	r0, r5
}
   b4eb4:	b002      	add	sp, #8
   b4eb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4eba:	4718      	bx	r3

000b4ebc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4ebc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4ebe:	6802      	ldr	r2, [r0, #0]
   b4ec0:	9101      	str	r1, [sp, #4]
   b4ec2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4ec6:	9100      	str	r1, [sp, #0]
   b4ec8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4eca:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4ece:	2200      	movs	r2, #0
   b4ed0:	4611      	mov	r1, r2
   b4ed2:	47a0      	blx	r4
}
   b4ed4:	b002      	add	sp, #8
   b4ed6:	bd10      	pop	{r4, pc}

000b4ed8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4edc:	4299      	cmp	r1, r3
        uint16_t color) {
   b4ede:	4616      	mov	r6, r2
   b4ee0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4ee4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4ee8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4eea:	4680      	mov	r8, r0
   b4eec:	460d      	mov	r5, r1
   b4eee:	461c      	mov	r4, r3
    if(x0 == x1){
   b4ef0:	d113      	bne.n	b4f1a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4ef2:	42be      	cmp	r6, r7
   b4ef4:	bfc8      	it	gt
   b4ef6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4ef8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4efc:	bfc4      	itt	gt
   b4efe:	463e      	movgt	r6, r7
   b4f00:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4f02:	1c7b      	adds	r3, r7, #1
   b4f04:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4f06:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4f08:	b21b      	sxth	r3, r3
   b4f0a:	4632      	mov	r2, r6
   b4f0c:	4629      	mov	r1, r5
   b4f0e:	4640      	mov	r0, r8
   b4f10:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4f12:	b003      	add	sp, #12
   b4f14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4f18:	4760      	bx	ip
    } else if(y0 == y1){
   b4f1a:	42be      	cmp	r6, r7
   b4f1c:	d10a      	bne.n	b4f34 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4f1e:	4299      	cmp	r1, r3
   b4f20:	bfc2      	ittt	gt
   b4f22:	460b      	movgt	r3, r1
   b4f24:	4625      	movgt	r5, r4
   b4f26:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4f28:	1c63      	adds	r3, r4, #1
   b4f2a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4f2e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4f30:	1b5b      	subs	r3, r3, r5
   b4f32:	e7e9      	b.n	b4f08 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4f34:	6953      	ldr	r3, [r2, #20]
   b4f36:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4f38:	e9cd 7900 	strd	r7, r9, [sp]
   b4f3c:	f8d8 3000 	ldr.w	r3, [r8]
   b4f40:	4640      	mov	r0, r8
   b4f42:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4f44:	4632      	mov	r2, r6
   b4f46:	4623      	mov	r3, r4
   b4f48:	4629      	mov	r1, r5
   b4f4a:	47b8      	blx	r7
        endWrite();
   b4f4c:	f8d8 3000 	ldr.w	r3, [r8]
   b4f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f52:	4640      	mov	r0, r8
}
   b4f54:	b003      	add	sp, #12
   b4f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4f5a:	4718      	bx	r3

000b4f5c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f60:	461d      	mov	r5, r3
    startWrite();
   b4f62:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4f64:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4f68:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f6a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4f6e:	4604      	mov	r4, r0
   b4f70:	460f      	mov	r7, r1
   b4f72:	4616      	mov	r6, r2
    startWrite();
   b4f74:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4f76:	6823      	ldr	r3, [r4, #0]
   b4f78:	f8cd 8000 	str.w	r8, [sp]
   b4f7c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f80:	4632      	mov	r2, r6
   b4f82:	462b      	mov	r3, r5
   b4f84:	4639      	mov	r1, r7
   b4f86:	4620      	mov	r0, r4
   b4f88:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4f8a:	6823      	ldr	r3, [r4, #0]
   b4f8c:	f8cd 8000 	str.w	r8, [sp]
   b4f90:	f109 32ff 	add.w	r2, r9, #4294967295
   b4f94:	4432      	add	r2, r6
   b4f96:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f9a:	4639      	mov	r1, r7
   b4f9c:	462b      	mov	r3, r5
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	b212      	sxth	r2, r2
   b4fa2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4fa4:	6823      	ldr	r3, [r4, #0]
   b4fa6:	f8cd 8000 	str.w	r8, [sp]
   b4faa:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4fae:	4632      	mov	r2, r6
   b4fb0:	464b      	mov	r3, r9
   b4fb2:	4639      	mov	r1, r7
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4fb8:	1e6b      	subs	r3, r5, #1
   b4fba:	19d9      	adds	r1, r3, r7
   b4fbc:	6823      	ldr	r3, [r4, #0]
   b4fbe:	f8cd 8000 	str.w	r8, [sp]
   b4fc2:	6a1d      	ldr	r5, [r3, #32]
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	464b      	mov	r3, r9
   b4fc8:	4632      	mov	r2, r6
   b4fca:	b209      	sxth	r1, r1
   b4fcc:	47a8      	blx	r5
    endWrite();
   b4fce:	6823      	ldr	r3, [r4, #0]
   b4fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fd2:	4620      	mov	r0, r4
}
   b4fd4:	b002      	add	sp, #8
   b4fd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4fda:	4718      	bx	r3

000b4fdc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4fdc:	4770      	bx	lr

000b4fde <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4fde:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4fe2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4fe6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4fe8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4fea:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4fee:	bf59      	ittee	pl
   b4ff0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4ff2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4ff4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4ff6:	81c3      	strhmi	r3, [r0, #14]
}
   b4ff8:	4770      	bx	lr
	...

000b4ffc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4ffc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4ffe:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5000:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5002:	4a07      	ldr	r2, [pc, #28]	; (b5020 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5004:	4d07      	ldr	r5, [pc, #28]	; (b5024 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5006:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5008:	2400      	movs	r4, #0
    _width    = WIDTH;
   b500a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b500c:	f04f 31ff 	mov.w	r1, #4294967295
   b5010:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5014:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5016:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5018:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b501a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b501c:	6204      	str	r4, [r0, #32]
}
   b501e:	bd30      	pop	{r4, r5, pc}
   b5020:	01000101 	.word	0x01000101
   b5024:	000b8670 	.word	0x000b8670

000b5028 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b502c:	b089      	sub	sp, #36	; 0x24
   b502e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5032:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5034:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5038:	9304      	str	r3, [sp, #16]
   b503a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b503e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5040:	9305      	str	r3, [sp, #20]
   b5042:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5046:	4604      	mov	r4, r0
    startWrite();
   b5048:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b504a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b504e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5052:	bf48      	it	mi
   b5054:	f108 020e 	addmi.w	r2, r8, #14
   b5058:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b505c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b505e:	4635      	mov	r5, r6
   b5060:	9b03      	ldr	r3, [sp, #12]
   b5062:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5064:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5068:	189a      	adds	r2, r3, r2
   b506a:	9b05      	ldr	r3, [sp, #20]
   b506c:	428b      	cmp	r3, r1
   b506e:	b212      	sxth	r2, r2
   b5070:	dd27      	ble.n	b50c2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5072:	9b04      	ldr	r3, [sp, #16]
   b5074:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5076:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b507a:	9306      	str	r3, [sp, #24]
   b507c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5080:	4580      	cmp	r8, r0
   b5082:	fa1f f189 	uxth.w	r1, r9
   b5086:	dd17      	ble.n	b50b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5088:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b508a:	bf05      	ittet	eq
   b508c:	9b06      	ldreq	r3, [sp, #24]
   b508e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5090:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5092:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5094:	bf18      	it	ne
   b5096:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5098:	062b      	lsls	r3, r5, #24
   b509a:	d50a      	bpl.n	b50b2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b509c:	9b02      	ldr	r3, [sp, #8]
   b509e:	6820      	ldr	r0, [r4, #0]
   b50a0:	9207      	str	r2, [sp, #28]
   b50a2:	4419      	add	r1, r3
   b50a4:	6983      	ldr	r3, [r0, #24]
   b50a6:	b209      	sxth	r1, r1
   b50a8:	461f      	mov	r7, r3
   b50aa:	4620      	mov	r0, r4
   b50ac:	4653      	mov	r3, sl
   b50ae:	47b8      	blx	r7
   b50b0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b50b2:	f109 0901 	add.w	r9, r9, #1
   b50b6:	e7e1      	b.n	b507c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b50b8:	9b01      	ldr	r3, [sp, #4]
   b50ba:	3301      	adds	r3, #1
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	445e      	add	r6, fp
   b50c0:	e7ce      	b.n	b5060 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b50c2:	6823      	ldr	r3, [r4, #0]
   b50c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50c6:	4620      	mov	r0, r4
}
   b50c8:	b009      	add	sp, #36	; 0x24
   b50ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b50ce:	4718      	bx	r3

000b50d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b50d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50d4:	ed2d 8b02 	vpush	{d8}
   b50d8:	b091      	sub	sp, #68	; 0x44
   b50da:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b50dc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b50de:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b50e2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b50e6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b50ea:	9103      	str	r1, [sp, #12]
   b50ec:	461f      	mov	r7, r3
   b50ee:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b50f2:	9304      	str	r3, [sp, #16]
   b50f4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b50f6:	2a00      	cmp	r2, #0
   b50f8:	f040 80c5 	bne.w	b5286 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b50fc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5100:	428b      	cmp	r3, r1
   b5102:	f340 814c 	ble.w	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5106:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b510a:	42b3      	cmp	r3, r6
   b510c:	f340 8147 	ble.w	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5110:	2306      	movs	r3, #6
   b5112:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5116:	2b00      	cmp	r3, #0
   b5118:	f340 8141 	ble.w	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b511c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5120:	2b00      	cmp	r3, #0
   b5122:	f340 813c 	ble.w	b539e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5126:	7f03      	ldrb	r3, [r0, #28]
   b5128:	b91b      	cbnz	r3, b5132 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b512a:	2faf      	cmp	r7, #175	; 0xaf
   b512c:	bf84      	itt	hi
   b512e:	3701      	addhi	r7, #1
   b5130:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5132:	f8db 3000 	ldr.w	r3, [fp]
   b5136:	4658      	mov	r0, fp
   b5138:	695b      	ldr	r3, [r3, #20]
   b513a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b513c:	2205      	movs	r2, #5
   b513e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5140:	2200      	movs	r2, #0
   b5142:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5144:	4a98      	ldr	r2, [pc, #608]	; (b53a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5146:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b514a:	18d3      	adds	r3, r2, r3
   b514c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b514e:	b2b3      	uxth	r3, r6
   b5150:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5152:	9a05      	ldr	r2, [sp, #20]
   b5154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5156:	5c9b      	ldrb	r3, [r3, r2]
   b5158:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b515a:	b2ab      	uxth	r3, r5
   b515c:	930b      	str	r3, [sp, #44]	; 0x2c
   b515e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5162:	9308      	str	r3, [sp, #32]
   b5164:	9b03      	ldr	r3, [sp, #12]
   b5166:	fb02 f905 	mul.w	r9, r2, r5
   b516a:	fa19 f983 	uxtah	r9, r9, r3
   b516e:	fa0f f389 	sxth.w	r3, r9
   b5172:	ee08 3a10 	vmov	s16, r3
   b5176:	2308      	movs	r3, #8
   b5178:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b517a:	9b03      	ldr	r3, [sp, #12]
   b517c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5180:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5184:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5188:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b518a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b518e:	07d2      	lsls	r2, r2, #31
   b5190:	d552      	bpl.n	b5238 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5192:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5194:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5198:	d13e      	bne.n	b5218 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b519a:	2c01      	cmp	r4, #1
   b519c:	d13c      	bne.n	b5218 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b519e:	699b      	ldr	r3, [r3, #24]
   b51a0:	9906      	ldr	r1, [sp, #24]
   b51a2:	461f      	mov	r7, r3
   b51a4:	9b04      	ldr	r3, [sp, #16]
   b51a6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b51a8:	b212      	sxth	r2, r2
   b51aa:	4651      	mov	r1, sl
   b51ac:	4658      	mov	r0, fp
   b51ae:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b51b0:	f109 0301 	add.w	r3, r9, #1
   b51b4:	fa4f f983 	sxtb.w	r9, r3
   b51b8:	9b07      	ldr	r3, [sp, #28]
   b51ba:	085b      	lsrs	r3, r3, #1
   b51bc:	9307      	str	r3, [sp, #28]
   b51be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b51c0:	3b01      	subs	r3, #1
   b51c2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b51c6:	930a      	str	r3, [sp, #40]	; 0x28
   b51c8:	d1de      	bne.n	b5188 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b51ca:	9f05      	ldr	r7, [sp, #20]
   b51cc:	3701      	adds	r7, #1
   b51ce:	b27b      	sxtb	r3, r7
   b51d0:	9305      	str	r3, [sp, #20]
   b51d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b51d4:	3b01      	subs	r3, #1
   b51d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b51da:	9309      	str	r3, [sp, #36]	; 0x24
   b51dc:	d1b9      	bne.n	b5152 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b51de:	9b04      	ldr	r3, [sp, #16]
   b51e0:	4543      	cmp	r3, r8
   b51e2:	d00f      	beq.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b51e4:	2d01      	cmp	r5, #1
   b51e6:	f8db 3000 	ldr.w	r3, [fp]
   b51ea:	d13b      	bne.n	b5264 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b51ec:	2c01      	cmp	r4, #1
   b51ee:	d139      	bne.n	b5264 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b51f0:	9908      	ldr	r1, [sp, #32]
   b51f2:	f8cd 8000 	str.w	r8, [sp]
   b51f6:	3105      	adds	r1, #5
   b51f8:	6a1c      	ldr	r4, [r3, #32]
   b51fa:	4632      	mov	r2, r6
   b51fc:	2308      	movs	r3, #8
   b51fe:	b209      	sxth	r1, r1
   b5200:	4658      	mov	r0, fp
   b5202:	47a0      	blx	r4
        endWrite();
   b5204:	f8db 3000 	ldr.w	r3, [fp]
   b5208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b520a:	4658      	mov	r0, fp
}
   b520c:	b011      	add	sp, #68	; 0x44
   b520e:	ecbd 8b02 	vpop	{d8}
   b5212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5216:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5218:	9906      	ldr	r1, [sp, #24]
   b521a:	fb14 f202 	smulbb	r2, r4, r2
   b521e:	440a      	add	r2, r1
   b5220:	9904      	ldr	r1, [sp, #16]
   b5222:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5224:	9400      	str	r4, [sp, #0]
   b5226:	69db      	ldr	r3, [r3, #28]
   b5228:	ee18 1a10 	vmov	r1, s16
   b522c:	461f      	mov	r7, r3
   b522e:	b212      	sxth	r2, r2
   b5230:	462b      	mov	r3, r5
   b5232:	4658      	mov	r0, fp
   b5234:	47b8      	blx	r7
   b5236:	e7bb      	b.n	b51b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5238:	9a04      	ldr	r2, [sp, #16]
   b523a:	4542      	cmp	r2, r8
   b523c:	d0b8      	beq.n	b51b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b523e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5240:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5244:	d107      	bne.n	b5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5246:	2c01      	cmp	r4, #1
   b5248:	d105      	bne.n	b5256 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b524a:	699b      	ldr	r3, [r3, #24]
   b524c:	9906      	ldr	r1, [sp, #24]
   b524e:	461f      	mov	r7, r3
   b5250:	440a      	add	r2, r1
   b5252:	4643      	mov	r3, r8
   b5254:	e7a8      	b.n	b51a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5256:	9906      	ldr	r1, [sp, #24]
   b5258:	f8cd 8004 	str.w	r8, [sp, #4]
   b525c:	fb14 f202 	smulbb	r2, r4, r2
   b5260:	440a      	add	r2, r1
   b5262:	e7df      	b.n	b5224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5266:	f8cd 8004 	str.w	r8, [sp, #4]
   b526a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b526e:	9a08      	ldr	r2, [sp, #32]
   b5270:	00e4      	lsls	r4, r4, #3
   b5272:	440a      	add	r2, r1
   b5274:	4611      	mov	r1, r2
   b5276:	9400      	str	r4, [sp, #0]
   b5278:	69dc      	ldr	r4, [r3, #28]
   b527a:	4632      	mov	r2, r6
   b527c:	462b      	mov	r3, r5
   b527e:	b209      	sxth	r1, r1
   b5280:	4658      	mov	r0, fp
   b5282:	47a0      	blx	r4
        endWrite();
   b5284:	e7be      	b.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5286:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5288:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b528a:	6812      	ldr	r2, [r2, #0]
   b528c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b528e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5290:	b2ff      	uxtb	r7, r7
   b5292:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5296:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b529a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b529c:	789a      	ldrb	r2, [r3, #2]
   b529e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b52a0:	78da      	ldrb	r2, [r3, #3]
   b52a2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b52a4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b52a6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b52aa:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b52ae:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b52b0:	d801      	bhi.n	b52b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b52b2:	2c01      	cmp	r4, #1
   b52b4:	d957      	bls.n	b5366 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b52b6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b52ba:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b52bc:	fa0f f38a 	sxth.w	r3, sl
   b52c0:	9307      	str	r3, [sp, #28]
        startWrite();
   b52c2:	f8db 3000 	ldr.w	r3, [fp]
   b52c6:	4658      	mov	r0, fp
   b52c8:	695b      	ldr	r3, [r3, #20]
   b52ca:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52cc:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b52ce:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52d2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52d4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b52d8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b52da:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52dc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b52de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b52e0:	429f      	cmp	r7, r3
   b52e2:	d28f      	bcs.n	b5204 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52e4:	9b07      	ldr	r3, [sp, #28]
   b52e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b52e8:	443b      	add	r3, r7
   b52ea:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b52ee:	2200      	movs	r2, #0
   b52f0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52f4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52f6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52fa:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52fe:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5302:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5304:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5306:	9905      	ldr	r1, [sp, #20]
   b5308:	4291      	cmp	r1, r2
   b530a:	d241      	bcs.n	b5390 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b530c:	1c5a      	adds	r2, r3, #1
   b530e:	b2d2      	uxtb	r2, r2
   b5310:	075b      	lsls	r3, r3, #29
   b5312:	920d      	str	r2, [sp, #52]	; 0x34
   b5314:	d107      	bne.n	b5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5316:	9b06      	ldr	r3, [sp, #24]
   b5318:	9906      	ldr	r1, [sp, #24]
   b531a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b531c:	3301      	adds	r3, #1
   b531e:	b29b      	uxth	r3, r3
   b5320:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5324:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5326:	f019 0f80 	tst.w	r9, #128	; 0x80
   b532a:	d012      	beq.n	b5352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b532c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b532e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5332:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b5336:	d11a      	bne.n	b536e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b5338:	2c01      	cmp	r4, #1
   b533a:	d118      	bne.n	b536e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b533c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b533e:	699b      	ldr	r3, [r3, #24]
   b5340:	4411      	add	r1, r2
   b5342:	9a05      	ldr	r2, [sp, #20]
   b5344:	4411      	add	r1, r2
   b5346:	461e      	mov	r6, r3
   b5348:	4652      	mov	r2, sl
   b534a:	9b04      	ldr	r3, [sp, #16]
   b534c:	b209      	sxth	r1, r1
   b534e:	4658      	mov	r0, fp
   b5350:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5352:	9e05      	ldr	r6, [sp, #20]
   b5354:	3601      	adds	r6, #1
   b5356:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5358:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b535c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b535e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5364:	e7ce      	b.n	b5304 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5366:	2300      	movs	r3, #0
   b5368:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b536c:	e7a9      	b.n	b52c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b536e:	9805      	ldr	r0, [sp, #20]
   b5370:	9a08      	ldr	r2, [sp, #32]
   b5372:	4402      	add	r2, r0
   b5374:	fb02 1105 	mla	r1, r2, r5, r1
   b5378:	9a04      	ldr	r2, [sp, #16]
   b537a:	e9cd 4200 	strd	r4, r2, [sp]
   b537e:	69db      	ldr	r3, [r3, #28]
   b5380:	ee18 2a10 	vmov	r2, s16
   b5384:	461e      	mov	r6, r3
   b5386:	b209      	sxth	r1, r1
   b5388:	462b      	mov	r3, r5
   b538a:	4658      	mov	r0, fp
   b538c:	47b0      	blx	r6
   b538e:	e7e0      	b.n	b5352 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5390:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5392:	3701      	adds	r7, #1
   b5394:	4498      	add	r8, r3
   b5396:	fa5f f888 	uxtb.w	r8, r8
   b539a:	b2ff      	uxtb	r7, r7
   b539c:	e79f      	b.n	b52de <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b539e:	b011      	add	sp, #68	; 0x44
   b53a0:	ecbd 8b02 	vpop	{d8}
   b53a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b53a8:	000b8167 	.word	0x000b8167

000b53ac <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b53ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b53ae:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b53b0:	b085      	sub	sp, #20
   b53b2:	4604      	mov	r4, r0
   b53b4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b53b6:	2a00      	cmp	r2, #0
   b53b8:	d134      	bne.n	b5424 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b53ba:	290a      	cmp	r1, #10
   b53bc:	d108      	bne.n	b53d0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b53be:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b53c0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b53c2:	7e42      	ldrb	r2, [r0, #25]
   b53c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b53c8:	8263      	strh	r3, [r4, #18]
}
   b53ca:	2001      	movs	r0, #1
   b53cc:	b005      	add	sp, #20
   b53ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b53d0:	290d      	cmp	r1, #13
   b53d2:	d0fa      	beq.n	b53ca <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b53d4:	7ee1      	ldrb	r1, [r4, #27]
   b53d6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b53d8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b53da:	b171      	cbz	r1, b53fa <_ZN12Adafruit_GFX5writeEh+0x4e>
   b53dc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b53e0:	2106      	movs	r1, #6
   b53e2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b53e6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b53ea:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b53ec:	bfc1      	itttt	gt
   b53ee:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b53f2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b53f4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b53f8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b53fa:	8ae2      	ldrh	r2, [r4, #22]
   b53fc:	9201      	str	r2, [sp, #4]
   b53fe:	8aa2      	ldrh	r2, [r4, #20]
   b5400:	9200      	str	r2, [sp, #0]
   b5402:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5406:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b540a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b540e:	4620      	mov	r0, r4
   b5410:	f7ff fe5e 	bl	b50d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5414:	7e23      	ldrb	r3, [r4, #24]
   b5416:	8a22      	ldrh	r2, [r4, #16]
   b5418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b541c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5420:	8223      	strh	r3, [r4, #16]
   b5422:	e7d2      	b.n	b53ca <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5424:	290a      	cmp	r1, #10
   b5426:	d107      	bne.n	b5438 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5428:	2300      	movs	r3, #0
   b542a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b542c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b542e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b5430:	8a43      	ldrh	r3, [r0, #18]
   b5432:	fb01 3302 	mla	r3, r1, r2, r3
   b5436:	e7c7      	b.n	b53c8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b5438:	290d      	cmp	r1, #13
   b543a:	d0c6      	beq.n	b53ca <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b543c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b543e:	42a9      	cmp	r1, r5
   b5440:	d3c3      	bcc.n	b53ca <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5442:	7a51      	ldrb	r1, [r2, #9]
   b5444:	4299      	cmp	r1, r3
   b5446:	d3c0      	bcc.n	b53ca <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5448:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b544a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b544c:	b2ed      	uxtb	r5, r5
   b544e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5452:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5454:	b328      	cbz	r0, b54a2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5456:	78e9      	ldrb	r1, [r5, #3]
   b5458:	b319      	cbz	r1, b54a2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b545a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b545c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b545e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5460:	b191      	cbz	r1, b5488 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5462:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5466:	4408      	add	r0, r1
   b5468:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b546c:	fb06 1100 	mla	r1, r6, r0, r1
   b5470:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5474:	4281      	cmp	r1, r0
   b5476:	dd07      	ble.n	b5488 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5478:	2000      	movs	r0, #0
   b547a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b547c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5480:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5482:	fb02 1207 	mla	r2, r2, r7, r1
   b5486:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5488:	8ae2      	ldrh	r2, [r4, #22]
   b548a:	9201      	str	r2, [sp, #4]
   b548c:	8aa2      	ldrh	r2, [r4, #20]
   b548e:	9200      	str	r2, [sp, #0]
   b5490:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5494:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5498:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b549c:	4620      	mov	r0, r4
   b549e:	f7ff fe17 	bl	b50d0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b54a2:	7929      	ldrb	r1, [r5, #4]
   b54a4:	7e22      	ldrb	r2, [r4, #24]
   b54a6:	8a23      	ldrh	r3, [r4, #16]
   b54a8:	fb01 3302 	mla	r3, r1, r2, r3
   b54ac:	e7b8      	b.n	b5420 <_ZN12Adafruit_GFX5writeEh+0x74>

000b54ae <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b54ae:	2901      	cmp	r1, #1
   b54b0:	bf38      	it	cc
   b54b2:	2101      	movcc	r1, #1
   b54b4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b54b6:	7641      	strb	r1, [r0, #25]
}
   b54b8:	4770      	bx	lr
	...

000b54bc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b54bc:	b510      	push	{r4, lr}
   b54be:	4b06      	ldr	r3, [pc, #24]	; (b54d8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b54c0:	6003      	str	r3, [r0, #0]
   b54c2:	4604      	mov	r4, r0
	if (mutex) {
   b54c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b54c6:	b108      	cbz	r0, b54cc <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b54c8:	f000 ff64 	bl	b6394 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b54cc:	4620      	mov	r0, r4
   b54ce:	f000 fa53 	bl	b5978 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b54d2:	4620      	mov	r0, r4
   b54d4:	bd10      	pop	{r4, pc}
   b54d6:	bf00      	nop
   b54d8:	000b86c8 	.word	0x000b86c8

000b54dc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b54dc:	b510      	push	{r4, lr}
   b54de:	4604      	mov	r4, r0
}
   b54e0:	f7ff ffec 	bl	b54bc <_ZN16OledWingAdafruitD1Ev>
   b54e4:	4620      	mov	r0, r4
   b54e6:	2170      	movs	r1, #112	; 0x70
   b54e8:	f7fe fde9 	bl	b40be <_ZdlPvj>
   b54ec:	4620      	mov	r0, r4
   b54ee:	bd10      	pop	{r4, pc}

000b54f0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b54f0:	b530      	push	{r4, r5, lr}
   b54f2:	b085      	sub	sp, #20
   b54f4:	4604      	mov	r4, r0
   b54f6:	460d      	mov	r5, r1
   b54f8:	f002 fb0a 	bl	b7b10 <_Z19__fetch_global_Wirev>
   b54fc:	4a10      	ldr	r2, [pc, #64]	; (b5540 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b54fe:	4911      	ldr	r1, [pc, #68]	; (b5544 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b5500:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b5504:	f04f 32ff 	mov.w	r2, #4294967295
   b5508:	2180      	movs	r1, #128	; 0x80
   b550a:	4603      	mov	r3, r0
   b550c:	9200      	str	r2, [sp, #0]
   b550e:	4620      	mov	r0, r4
   b5510:	2220      	movs	r2, #32
   b5512:	f000 faa9 	bl	b5a68 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b5516:	4b0c      	ldr	r3, [pc, #48]	; (b5548 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b5518:	6023      	str	r3, [r4, #0]
   b551a:	2300      	movs	r3, #0
   b551c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b5520:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5524:	f000 f872 	bl	b560c <_ZN8DebounceC1Ev>
   b5528:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b552c:	f000 f86e 	bl	b560c <_ZN8DebounceC1Ev>
   b5530:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5534:	f000 f86a 	bl	b560c <_ZN8DebounceC1Ev>
}
   b5538:	4620      	mov	r0, r4
   b553a:	b005      	add	sp, #20
   b553c:	bd30      	pop	{r4, r5, pc}
   b553e:	bf00      	nop
   b5540:	00061a80 	.word	0x00061a80
   b5544:	000186a0 	.word	0x000186a0
   b5548:	000b86c8 	.word	0x000b86c8

000b554c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b554c:	b513      	push	{r0, r1, r4, lr}
   b554e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b5550:	3050      	adds	r0, #80	; 0x50
   b5552:	f000 ff17 	bl	b6384 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b5556:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b5558:	07d9      	lsls	r1, r3, #31
   b555a:	d505      	bpl.n	b5568 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b555c:	2202      	movs	r2, #2
   b555e:	2104      	movs	r1, #4
   b5560:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b5564:	f000 f866 	bl	b5634 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b5568:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b556a:	079a      	lsls	r2, r3, #30
   b556c:	d505      	bpl.n	b557a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b556e:	2200      	movs	r2, #0
   b5570:	2103      	movs	r1, #3
   b5572:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5576:	f000 f85d 	bl	b5634 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b557a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b557c:	075b      	lsls	r3, r3, #29
   b557e:	d505      	bpl.n	b558c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b5580:	2202      	movs	r2, #2
   b5582:	4611      	mov	r1, r2
   b5584:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b5588:	f000 f854 	bl	b5634 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b558c:	2301      	movs	r3, #1
   b558e:	9300      	str	r3, [sp, #0]
   b5590:	223c      	movs	r2, #60	; 0x3c
   b5592:	2102      	movs	r1, #2
   b5594:	4620      	mov	r0, r4
   b5596:	f000 fb6f 	bl	b5c78 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b559a:	b002      	add	sp, #8
   b559c:	bd10      	pop	{r4, pc}

000b559e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b559e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b55a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b55a2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b55a4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b55a6:	d502      	bpl.n	b55ae <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b55a8:	3058      	adds	r0, #88	; 0x58
   b55aa:	f000 f850 	bl	b564e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b55ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b55b0:	079a      	lsls	r2, r3, #30
   b55b2:	d503      	bpl.n	b55bc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b55b4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b55b8:	f000 f849 	bl	b564e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b55bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b55be:	075b      	lsls	r3, r3, #29
   b55c0:	d505      	bpl.n	b55ce <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b55c2:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b55c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b55ca:	f000 b840 	b.w	b564e <_ZN8Debounce6updateEv>
}
   b55ce:	bd10      	pop	{r4, pc}

000b55d0 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b55d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b55d2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b55d4:	f013 0001 	ands.w	r0, r3, #1
   b55d8:	d003      	beq.n	b55e2 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b55da:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b55de:	f000 b866 	b.w	b56ae <_ZN8Debounce4fellEv>
}
   b55e2:	4770      	bx	lr

000b55e4 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b55e4:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b55e6:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b55e8:	f013 0002 	ands.w	r0, r3, #2
   b55ec:	d003      	beq.n	b55f6 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b55ee:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b55f2:	f000 b85c 	b.w	b56ae <_ZN8Debounce4fellEv>
}
   b55f6:	4770      	bx	lr

000b55f8 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b55f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b55fa:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b55fc:	f013 0004 	ands.w	r0, r3, #4
   b5600:	d003      	beq.n	b560a <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b5602:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b5606:	f000 b852 	b.w	b56ae <_ZN8Debounce4fellEv>
}
   b560a:	4770      	bx	lr

000b560c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b560c:	2100      	movs	r1, #0
   b560e:	220a      	movs	r2, #10
   b5610:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5614:	4770      	bx	lr

000b5616 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5616:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5618:	b510      	push	{r4, lr}
   b561a:	4604      	mov	r4, r0
    this->pin = pin;
   b561c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b561e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5620:	b288      	uxth	r0, r1
   b5622:	f002 f9c9 	bl	b79b8 <digitalRead>
   b5626:	b108      	cbz	r0, b562c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5628:	2303      	movs	r3, #3
   b562a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b562c:	f000 fea2 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5630:	6020      	str	r0, [r4, #0]
#endif
}
   b5632:	bd10      	pop	{r4, pc}

000b5634 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5634:	b538      	push	{r3, r4, r5, lr}
   b5636:	460c      	mov	r4, r1
   b5638:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b563a:	4611      	mov	r1, r2
   b563c:	b2a0      	uxth	r0, r4
   b563e:	f002 f991 	bl	b7964 <pinMode>
  
  this->attach(pin);
   b5642:	4621      	mov	r1, r4
   b5644:	4628      	mov	r0, r5
}
   b5646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b564a:	f7ff bfe4 	b.w	b5616 <_ZN8Debounce6attachEi>

000b564e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b564e:	b538      	push	{r3, r4, r5, lr}
   b5650:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5652:	79c0      	ldrb	r0, [r0, #7]
   b5654:	f002 f9b0 	bl	b79b8 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5658:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b565a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b565c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5660:	bf18      	it	ne
   b5662:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5664:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5668:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b566a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b566c:	d00a      	beq.n	b5684 <_ZN8Debounce6updateEv+0x36>
   b566e:	f000 fe81 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5672:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5674:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5676:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b567a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b567c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b567e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5682:	bd38      	pop	{r3, r4, r5, pc}
   b5684:	f000 fe76 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5688:	6823      	ldr	r3, [r4, #0]
   b568a:	1ac0      	subs	r0, r0, r3
   b568c:	88a3      	ldrh	r3, [r4, #4]
   b568e:	4298      	cmp	r0, r3
   b5690:	d3f4      	bcc.n	b567c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5692:	79a3      	ldrb	r3, [r4, #6]
   b5694:	f003 0301 	and.w	r3, r3, #1
   b5698:	42ab      	cmp	r3, r5
   b569a:	d0ef      	beq.n	b567c <_ZN8Debounce6updateEv+0x2e>
   b569c:	f000 fe6a 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b56a0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b56a2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b56a4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b56a8:	f043 0308 	orr.w	r3, r3, #8
   b56ac:	e7e5      	b.n	b567a <_ZN8Debounce6updateEv+0x2c>

000b56ae <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b56ae:	7980      	ldrb	r0, [r0, #6]
   b56b0:	f000 0009 	and.w	r0, r0, #9
   b56b4:	f1a0 0308 	sub.w	r3, r0, #8
   b56b8:	4258      	negs	r0, r3
   b56ba:	4158      	adcs	r0, r3
   b56bc:	4770      	bx	lr

000b56be <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b56be:	4770      	bx	lr

000b56c0 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b56c0:	b510      	push	{r4, lr}
   b56c2:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b56c4:	2160      	movs	r1, #96	; 0x60
   b56c6:	6800      	ldr	r0, [r0, #0]
   b56c8:	f001 fd44 	bl	b7154 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b56cc:	6820      	ldr	r0, [r4, #0]
   b56ce:	f001 fd4c 	bl	b716a <_ZN7TwoWire15endTransmissionEv>
}
   b56d2:	fab0 f080 	clz	r0, r0
   b56d6:	0940      	lsrs	r0, r0, #5
   b56d8:	bd10      	pop	{r4, pc}

000b56da <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b56da:	b538      	push	{r3, r4, r5, lr}
   b56dc:	4605      	mov	r5, r0
   b56de:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b56e0:	6800      	ldr	r0, [r0, #0]
   b56e2:	2160      	movs	r1, #96	; 0x60
   b56e4:	f001 fd36 	bl	b7154 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b56e8:	6828      	ldr	r0, [r5, #0]
   b56ea:	6803      	ldr	r3, [r0, #0]
   b56ec:	4621      	mov	r1, r4
   b56ee:	689b      	ldr	r3, [r3, #8]
   b56f0:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b56f2:	6828      	ldr	r0, [r5, #0]
   b56f4:	2100      	movs	r1, #0
   b56f6:	f001 fd34 	bl	b7162 <_ZN7TwoWire15endTransmissionEh>
   b56fa:	b108      	cbz	r0, b5700 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b56fc:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b56fe:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b5700:	6828      	ldr	r0, [r5, #0]
   b5702:	2202      	movs	r2, #2
   b5704:	2160      	movs	r1, #96	; 0x60
   b5706:	f001 fd22 	bl	b714e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b570a:	6828      	ldr	r0, [r5, #0]
   b570c:	6803      	ldr	r3, [r0, #0]
   b570e:	691b      	ldr	r3, [r3, #16]
   b5710:	4798      	blx	r3
   b5712:	2800      	cmp	r0, #0
   b5714:	d0f2      	beq.n	b56fc <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b5716:	6828      	ldr	r0, [r5, #0]
   b5718:	6803      	ldr	r3, [r0, #0]
   b571a:	695b      	ldr	r3, [r3, #20]
   b571c:	4798      	blx	r3
   b571e:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b5720:	6828      	ldr	r0, [r5, #0]
   b5722:	6803      	ldr	r3, [r0, #0]
   b5724:	695b      	ldr	r3, [r3, #20]
   b5726:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b5728:	b2e4      	uxtb	r4, r4
   b572a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b572e:	b280      	uxth	r0, r0
   b5730:	e7e5      	b.n	b56fe <_ZN8VCNL404011readCommandEh+0x24>

000b5732 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   b5732:	2108      	movs	r1, #8
   b5734:	f7ff bfd1 	b.w	b56da <_ZN8VCNL404011readCommandEh>

000b5738 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   b5738:	2109      	movs	r1, #9
   b573a:	f7ff bfce 	b.w	b56da <_ZN8VCNL404011readCommandEh>

000b573e <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b573e:	210c      	movs	r1, #12
   b5740:	f7ff bfcb 	b.w	b56da <_ZN8VCNL404011readCommandEh>

000b5744 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b5744:	b570      	push	{r4, r5, r6, lr}
   b5746:	4604      	mov	r4, r0
   b5748:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b574a:	6800      	ldr	r0, [r0, #0]
   b574c:	2160      	movs	r1, #96	; 0x60
{
   b574e:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5750:	f001 fd00 	bl	b7154 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b5754:	6820      	ldr	r0, [r4, #0]
   b5756:	6803      	ldr	r3, [r0, #0]
   b5758:	4631      	mov	r1, r6
   b575a:	689b      	ldr	r3, [r3, #8]
   b575c:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b575e:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5760:	6803      	ldr	r3, [r0, #0]
   b5762:	b2e9      	uxtb	r1, r5
   b5764:	689b      	ldr	r3, [r3, #8]
   b5766:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b5768:	6820      	ldr	r0, [r4, #0]
   b576a:	6803      	ldr	r3, [r0, #0]
   b576c:	0a29      	lsrs	r1, r5, #8
   b576e:	689b      	ldr	r3, [r3, #8]
   b5770:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b5772:	6820      	ldr	r0, [r4, #0]
   b5774:	f001 fcf9 	bl	b716a <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b5778:	fab0 f080 	clz	r0, r0
   b577c:	0940      	lsrs	r0, r0, #5
   b577e:	bd70      	pop	{r4, r5, r6, pc}

000b5780 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b5780:	b570      	push	{r4, r5, r6, lr}
   b5782:	4604      	mov	r4, r0
   b5784:	460d      	mov	r5, r1
   b5786:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b5788:	f7ff ffa7 	bl	b56da <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b578c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b5790:	ea40 0206 	orr.w	r2, r0, r6
   b5794:	4629      	mov	r1, r5
   b5796:	4620      	mov	r0, r4
}
   b5798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b579c:	f7ff bfd2 	b.w	b5744 <_ZN8VCNL404012writeCommandEht>

000b57a0 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b57a0:	b570      	push	{r4, r5, r6, lr}
   b57a2:	4604      	mov	r4, r0
   b57a4:	460d      	mov	r5, r1
   b57a6:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b57a8:	f7ff ff97 	bl	b56da <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b57ac:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b57ae:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b57b2:	4629      	mov	r1, r5
   b57b4:	4620      	mov	r0, r4
}
   b57b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b57ba:	f7ff bfc3 	b.w	b5744 <_ZN8VCNL404012writeCommandEht>

000b57be <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b57be:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b57c0:	f7ff ff8b 	bl	b56da <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b57c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b57c8:	bd08      	pop	{r3, pc}

000b57ca <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b57ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b57ce:	4604      	mov	r4, r0
   b57d0:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b57d4:	460d      	mov	r5, r1
   b57d6:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b57d8:	4616      	mov	r6, r2
   b57da:	b16a      	cbz	r2, b57f8 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b57dc:	f7ff ff7d 	bl	b56da <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b57e0:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b57e2:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b57e6:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b57ea:	4629      	mov	r1, r5
   b57ec:	4620      	mov	r0, r4
   b57ee:	b136      	cbz	r6, b57fe <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b57f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b57f4:	f7ff bfc4 	b.w	b5780 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b57f8:	f7ff ffe1 	bl	b57be <_ZN8VCNL404016readCommandUpperEh>
   b57fc:	e7f1      	b.n	b57e2 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b57fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b5802:	f7ff bfcd 	b.w	b57a0 <_ZN8VCNL404017writeCommandUpperEhh>

000b5806 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5806:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b580a:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b580c:	d20e      	bcs.n	b582c <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b580e:	299f      	cmp	r1, #159	; 0x9f
   b5810:	d80e      	bhi.n	b5830 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b5812:	294f      	cmp	r1, #79	; 0x4f
   b5814:	bf8c      	ite	hi
   b5816:	2340      	movhi	r3, #64	; 0x40
   b5818:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b581a:	9300      	str	r3, [sp, #0]
   b581c:	2201      	movs	r2, #1
   b581e:	233f      	movs	r3, #63	; 0x3f
   b5820:	2103      	movs	r1, #3
   b5822:	f7ff ffd2 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b5826:	b003      	add	sp, #12
   b5828:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b582c:	23c0      	movs	r3, #192	; 0xc0
   b582e:	e7f4      	b.n	b581a <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5830:	2380      	movs	r3, #128	; 0x80
   b5832:	e7f2      	b.n	b581a <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b5834 <_ZN8VCNL404014powerOnAmbientEv>:
{
   b5834:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   b5836:	2100      	movs	r1, #0
   b5838:	9100      	str	r1, [sp, #0]
   b583a:	23fe      	movs	r3, #254	; 0xfe
   b583c:	2201      	movs	r2, #1
   b583e:	f7ff ffc4 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b5842:	b003      	add	sp, #12
   b5844:	f85d fb04 	ldr.w	pc, [sp], #4

000b5848 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5848:	2907      	cmp	r1, #7
{
   b584a:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b584c:	d80f      	bhi.n	b586e <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b584e:	2903      	cmp	r1, #3
   b5850:	d80f      	bhi.n	b5872 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5852:	d010      	beq.n	b5876 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b5854:	2902      	cmp	r1, #2
   b5856:	bf0c      	ite	eq
   b5858:	2304      	moveq	r3, #4
   b585a:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b585c:	9300      	str	r3, [sp, #0]
   b585e:	2201      	movs	r2, #1
   b5860:	23f1      	movs	r3, #241	; 0xf1
   b5862:	2103      	movs	r1, #3
   b5864:	f7ff ffb1 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b5868:	b003      	add	sp, #12
   b586a:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b586e:	230e      	movs	r3, #14
   b5870:	e7f4      	b.n	b585c <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b5872:	230c      	movs	r3, #12
   b5874:	e7f2      	b.n	b585c <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5876:	2308      	movs	r3, #8
   b5878:	e7f0      	b.n	b585c <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b587a <_ZN8VCNL404016powerOnProximityEv>:
{
   b587a:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b587c:	2300      	movs	r3, #0
   b587e:	9300      	str	r3, [sp, #0]
   b5880:	2201      	movs	r2, #1
   b5882:	23fe      	movs	r3, #254	; 0xfe
   b5884:	2103      	movs	r1, #3
   b5886:	f7ff ffa0 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b588a:	b003      	add	sp, #12
   b588c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5890 <_ZN8VCNL404017setProxResolutionEh>:
{
   b5890:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b5892:	290f      	cmp	r1, #15
   b5894:	bf8c      	ite	hi
   b5896:	2308      	movhi	r3, #8
   b5898:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b589a:	9300      	str	r3, [sp, #0]
   b589c:	2200      	movs	r2, #0
   b589e:	23f7      	movs	r3, #247	; 0xf7
   b58a0:	2103      	movs	r1, #3
   b58a2:	f7ff ff92 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b58a6:	b003      	add	sp, #12
   b58a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b58ac <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b58ac:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b58ae:	2302      	movs	r3, #2
   b58b0:	9300      	str	r3, [sp, #0]
   b58b2:	2201      	movs	r2, #1
   b58b4:	23ef      	movs	r3, #239	; 0xef
   b58b6:	2104      	movs	r1, #4
   b58b8:	f7ff ff87 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b58bc:	b003      	add	sp, #12
   b58be:	f85d fb04 	ldr.w	pc, [sp], #4

000b58c2 <_ZN8VCNL404018enableWhiteChannelEv>:
{
   b58c2:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_WHITE_EN_MASK, VCNL4040_WHITE_ENABLE);
   b58c4:	2200      	movs	r2, #0
   b58c6:	9200      	str	r2, [sp, #0]
   b58c8:	237f      	movs	r3, #127	; 0x7f
   b58ca:	2104      	movs	r1, #4
   b58cc:	f7ff ff7d 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b58d0:	b003      	add	sp, #12
   b58d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b58d6 <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b58d6:	29c7      	cmp	r1, #199	; 0xc7
{
   b58d8:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b58da:	d816      	bhi.n	b590a <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b58dc:	29b3      	cmp	r1, #179	; 0xb3
   b58de:	d816      	bhi.n	b590e <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b58e0:	299f      	cmp	r1, #159	; 0x9f
   b58e2:	d816      	bhi.n	b5912 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b58e4:	298b      	cmp	r1, #139	; 0x8b
   b58e6:	d816      	bhi.n	b5916 <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b58e8:	2977      	cmp	r1, #119	; 0x77
   b58ea:	d816      	bhi.n	b591a <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b58ec:	2963      	cmp	r1, #99	; 0x63
   b58ee:	d816      	bhi.n	b591e <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b58f0:	294a      	cmp	r1, #74	; 0x4a
   b58f2:	bf94      	ite	ls
   b58f4:	2100      	movls	r1, #0
   b58f6:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b58f8:	9100      	str	r1, [sp, #0]
   b58fa:	23f8      	movs	r3, #248	; 0xf8
   b58fc:	2200      	movs	r2, #0
   b58fe:	2104      	movs	r1, #4
   b5900:	f7ff ff63 	bl	b57ca <_ZN8VCNL40407bitMaskEhbhh>
}
   b5904:	b003      	add	sp, #12
   b5906:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b590a:	2107      	movs	r1, #7
   b590c:	e7f4      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b590e:	2106      	movs	r1, #6
   b5910:	e7f2      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b5912:	2105      	movs	r1, #5
   b5914:	e7f0      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b5916:	2104      	movs	r1, #4
   b5918:	e7ee      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b591a:	2103      	movs	r1, #3
   b591c:	e7ec      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b591e:	2102      	movs	r1, #2
   b5920:	e7ea      	b.n	b58f8 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b5922 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b5922:	b538      	push	{r3, r4, r5, lr}
   b5924:	4604      	mov	r4, r0
   b5926:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5928:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b592a:	f001 fbe1 	bl	b70f0 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b592e:	4620      	mov	r0, r4
   b5930:	f7ff fec6 	bl	b56c0 <_ZN8VCNL404011isConnectedEv>
   b5934:	4605      	mov	r5, r0
   b5936:	b910      	cbnz	r0, b593e <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b5938:	2500      	movs	r5, #0
}
   b593a:	4628      	mov	r0, r5
   b593c:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b593e:	4620      	mov	r0, r4
   b5940:	f7ff fefd 	bl	b573e <_ZN8VCNL40405getIDEv>
   b5944:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b5948:	d1f6      	bne.n	b5938 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b594a:	4620      	mov	r0, r4
   b594c:	21c8      	movs	r1, #200	; 0xc8
   b594e:	f7ff ffc2 	bl	b58d6 <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b5952:	4620      	mov	r0, r4
   b5954:	2128      	movs	r1, #40	; 0x28
   b5956:	f7ff ff56 	bl	b5806 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b595a:	4620      	mov	r0, r4
   b595c:	2108      	movs	r1, #8
   b595e:	f7ff ff73 	bl	b5848 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b5962:	2110      	movs	r1, #16
   b5964:	4620      	mov	r0, r4
   b5966:	f7ff ff93 	bl	b5890 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b596a:	4620      	mov	r0, r4
   b596c:	f7ff ff9e 	bl	b58ac <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b5970:	4620      	mov	r0, r4
   b5972:	f7ff ff82 	bl	b587a <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b5976:	e7e0      	b.n	b593a <_ZN8VCNL40405beginER7TwoWire+0x18>

000b5978 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5978:	b510      	push	{r4, lr}
   b597a:	4b04      	ldr	r3, [pc, #16]	; (b598c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b597c:	6003      	str	r3, [r0, #0]
   b597e:	4604      	mov	r4, r0
  if(buffer) {
   b5980:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5982:	b108      	cbz	r0, b5988 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5984:	f000 ff32 	bl	b67ec <free>
    buffer = NULL;
  }
}
   b5988:	4620      	mov	r0, r4
   b598a:	bd10      	pop	{r4, pc}
   b598c:	000b8bd4 	.word	0x000b8bd4

000b5990 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5990:	b510      	push	{r4, lr}
   b5992:	4604      	mov	r4, r0
}
   b5994:	f7ff fff0 	bl	b5978 <_ZN16Adafruit_SSD1306D1Ev>
   b5998:	4620      	mov	r0, r4
   b599a:	2150      	movs	r1, #80	; 0x50
   b599c:	f7fe fb8f 	bl	b40be <_ZdlPvj>
   b59a0:	4620      	mov	r0, r4
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b59a4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b59a6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b59a8:	db4b      	blt.n	b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59aa:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b59ae:	428c      	cmp	r4, r1
   b59b0:	dd47      	ble.n	b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59b2:	2a00      	cmp	r2, #0
   b59b4:	db45      	blt.n	b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b59b6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b59ba:	4294      	cmp	r4, r2
   b59bc:	dd41      	ble.n	b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b59be:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b59c0:	2c02      	cmp	r4, #2
   b59c2:	d01f      	beq.n	b5a04 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b59c4:	2c03      	cmp	r4, #3
   b59c6:	d026      	beq.n	b5a16 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b59c8:	2c01      	cmp	r4, #1
   b59ca:	d104      	bne.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b59cc:	8904      	ldrh	r4, [r0, #8]
   b59ce:	43d2      	mvns	r2, r2
   b59d0:	4414      	add	r4, r2
      break;
   b59d2:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b59d4:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b59d6:	2b01      	cmp	r3, #1
   b59d8:	d023      	beq.n	b5a22 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b59da:	2b02      	cmp	r3, #2
   b59dc:	d032      	beq.n	b5a44 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b59de:	bb83      	cbnz	r3, b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b59e0:	2a00      	cmp	r2, #0
   b59e2:	4613      	mov	r3, r2
   b59e4:	8904      	ldrh	r4, [r0, #8]
   b59e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b59e8:	bfb8      	it	lt
   b59ea:	1dd3      	addlt	r3, r2, #7
   b59ec:	10db      	asrs	r3, r3, #3
   b59ee:	fb13 1104 	smlabb	r1, r3, r4, r1
   b59f2:	f002 0207 	and.w	r2, r2, #7
   b59f6:	2301      	movs	r3, #1
   b59f8:	4093      	lsls	r3, r2
   b59fa:	5c42      	ldrb	r2, [r0, r1]
   b59fc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5a00:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5a02:	e01e      	b.n	b5a42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5a04:	8904      	ldrh	r4, [r0, #8]
   b5a06:	3c01      	subs	r4, #1
   b5a08:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b5a0a:	8944      	ldrh	r4, [r0, #10]
   b5a0c:	43d2      	mvns	r2, r2
   b5a0e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5a10:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5a12:	b212      	sxth	r2, r2
      break;
   b5a14:	e7df      	b.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b5a16:	8944      	ldrh	r4, [r0, #10]
   b5a18:	3c01      	subs	r4, #1
   b5a1a:	1a64      	subs	r4, r4, r1
      break;
   b5a1c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b5a1e:	b222      	sxth	r2, r4
      break;
   b5a20:	e7d9      	b.n	b59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b5a22:	2a00      	cmp	r2, #0
   b5a24:	8904      	ldrh	r4, [r0, #8]
   b5a26:	4613      	mov	r3, r2
   b5a28:	bfb8      	it	lt
   b5a2a:	1dd3      	addlt	r3, r2, #7
   b5a2c:	10db      	asrs	r3, r3, #3
   b5a2e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5a32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5a34:	f002 0007 	and.w	r0, r2, #7
   b5a38:	2201      	movs	r2, #1
   b5a3a:	4082      	lsls	r2, r0
   b5a3c:	5c58      	ldrb	r0, [r3, r1]
   b5a3e:	4302      	orrs	r2, r0
   b5a40:	545a      	strb	r2, [r3, r1]
}
   b5a42:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5a44:	2a00      	cmp	r2, #0
   b5a46:	4613      	mov	r3, r2
   b5a48:	8904      	ldrh	r4, [r0, #8]
   b5a4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5a4c:	bfb8      	it	lt
   b5a4e:	1dd3      	addlt	r3, r2, #7
   b5a50:	10db      	asrs	r3, r3, #3
   b5a52:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5a56:	f002 0207 	and.w	r2, r2, #7
   b5a5a:	2301      	movs	r3, #1
   b5a5c:	fa03 f202 	lsl.w	r2, r3, r2
   b5a60:	5c43      	ldrb	r3, [r0, r1]
   b5a62:	405a      	eors	r2, r3
   b5a64:	e7cc      	b.n	b5a00 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5a68 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5a68:	b570      	push	{r4, r5, r6, lr}
   b5a6a:	4604      	mov	r4, r0
   b5a6c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a6e:	2600      	movs	r6, #0
   b5a70:	f7ff fac4 	bl	b4ffc <_ZN12Adafruit_GFXC1Ess>
   b5a74:	4b11      	ldr	r3, [pc, #68]	; (b5abc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5a76:	6023      	str	r3, [r4, #0]
   b5a78:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b5a7a:	b915      	cbnz	r5, b5a82 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5a7c:	f002 f848 	bl	b7b10 <_Z19__fetch_global_Wirev>
   b5a80:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5a82:	23ff      	movs	r3, #255	; 0xff
   b5a84:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5a88:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5a8c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5a90:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5a94:	4b0a      	ldr	r3, [pc, #40]	; (b5ac0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5a96:	63a3      	str	r3, [r4, #56]	; 0x38
   b5a98:	2301      	movs	r3, #1
   b5a9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5a9e:	9b05      	ldr	r3, [sp, #20]
   b5aa0:	64a3      	str	r3, [r4, #72]	; 0x48
   b5aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5aa6:	9b06      	ldr	r3, [sp, #24]
   b5aa8:	86a2      	strh	r2, [r4, #52]	; 0x34
   b5aaa:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5aae:	6426      	str	r6, [r4, #64]	; 0x40
   b5ab0:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5ab4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	bd70      	pop	{r4, r5, r6, pc}
   b5aba:	bf00      	nop
   b5abc:	000b8bd4 	.word	0x000b8bd4
   b5ac0:	000b8720 	.word	0x000b8720

000b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ac6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5ac8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5aca:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5acc:	b190      	cbz	r0, b5af4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5ace:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5ad2:	f001 fb43 	bl	b715c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5ad6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ad8:	6803      	ldr	r3, [r0, #0]
   b5ada:	2100      	movs	r1, #0
   b5adc:	689b      	ldr	r3, [r3, #8]
   b5ade:	4798      	blx	r3
    WIRE_WRITE(c);
   b5ae0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ae2:	6803      	ldr	r3, [r0, #0]
   b5ae4:	4629      	mov	r1, r5
   b5ae6:	689b      	ldr	r3, [r3, #8]
   b5ae8:	4798      	blx	r3
    wire->endTransmission();
   b5aea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5af0:	f001 bb3b 	b.w	b716a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5af4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5af8:	4601      	mov	r1, r0
   b5afa:	b298      	uxth	r0, r3
   b5afc:	f001 ff43 	bl	b7986 <digitalWrite>
  if(spi) {
   b5b00:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b02:	b120      	cbz	r0, b5b0e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5b04:	4629      	mov	r1, r5
}
   b5b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b5b0a:	f000 bf89 	b.w	b6a20 <_ZN8SPIClass8transferEh>
   b5b0e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5b10:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5b12:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5b16:	ea05 0107 	and.w	r1, r5, r7
   b5b1a:	b280      	uxth	r0, r0
   b5b1c:	f001 ff33 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5b20:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b24:	2101      	movs	r1, #1
   b5b26:	b280      	uxth	r0, r0
   b5b28:	f001 ff2d 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5b2c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5b30:	2100      	movs	r1, #0
   b5b32:	b280      	uxth	r0, r0
   b5b34:	f001 ff27 	bl	b7986 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5b38:	3e01      	subs	r6, #1
   b5b3a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b5b3e:	d1e8      	bne.n	b5b12 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b5b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b42 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5b42:	b538      	push	{r3, r4, r5, lr}
   b5b44:	4604      	mov	r4, r0
  TRANSACTION_START
   b5b46:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b5b48:	460d      	mov	r5, r1
  TRANSACTION_START
   b5b4a:	b180      	cbz	r0, b5b6e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
   b5b4c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5b4e:	f001 facb 	bl	b70e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5b52:	2d00      	cmp	r5, #0
   b5b54:	4620      	mov	r0, r4
   b5b56:	bf14      	ite	ne
   b5b58:	21a7      	movne	r1, #167	; 0xa7
   b5b5a:	21a6      	moveq	r1, #166	; 0xa6
   b5b5c:	f7ff ffb2 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5b60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5b62:	b188      	cbz	r0, b5b88 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5b64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5b6a:	f001 babd 	b.w	b70e8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5b6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b70:	b118      	cbz	r0, b5b7a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5b72:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5b76:	f000 fee5 	bl	b6944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5b7a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b7e:	2100      	movs	r1, #0
   b5b80:	b280      	uxth	r0, r0
   b5b82:	f001 ff00 	bl	b7986 <digitalWrite>
   b5b86:	e7e4      	b.n	b5b52 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5b88:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5b8c:	2101      	movs	r1, #1
   b5b8e:	b280      	uxth	r0, r0
   b5b90:	f001 fef9 	bl	b7986 <digitalWrite>
   b5b94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b96:	b118      	cbz	r0, b5ba0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5b9c:	f000 beb8 	b.w	b6910 <_ZN8SPIClass14endTransactionEv>
}
   b5ba0:	bd38      	pop	{r3, r4, r5, pc}

000b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5ba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ba6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5ba8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5baa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5bac:	188f      	adds	r7, r1, r2
   b5bae:	b340      	cbz	r0, b5c02 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5bb0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5bb4:	f001 fad2 	bl	b715c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5bb8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bba:	6803      	ldr	r3, [r0, #0]
   b5bbc:	2100      	movs	r1, #0
   b5bbe:	689b      	ldr	r3, [r3, #8]
   b5bc0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5bc2:	2601      	movs	r6, #1
    while(n--) {
   b5bc4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5bc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5bc8:	d017      	beq.n	b5bfa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5bca:	2e1f      	cmp	r6, #31
   b5bcc:	d90c      	bls.n	b5be8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5bce:	f001 facc 	bl	b716a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5bd2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5bd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bd8:	f001 fac0 	bl	b715c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5bdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bde:	6803      	ldr	r3, [r0, #0]
   b5be0:	2100      	movs	r1, #0
   b5be2:	689b      	ldr	r3, [r3, #8]
   b5be4:	4798      	blx	r3
        bytesOut = 1;
   b5be6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5be8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5bea:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5bee:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5bf0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5bf2:	689b      	ldr	r3, [r3, #8]
   b5bf4:	4798      	blx	r3
      bytesOut++;
   b5bf6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5bf8:	e7e4      	b.n	b5bc4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5bfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5bfe:	f001 bab4 	b.w	b716a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5c02:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5c06:	4601      	mov	r1, r0
   b5c08:	b298      	uxth	r0, r3
   b5c0a:	f001 febc 	bl	b7986 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5c0e:	42bd      	cmp	r5, r7
   b5c10:	d022      	beq.n	b5c58 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5c14:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5c18:	b118      	cbz	r0, b5c22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5c1a:	4649      	mov	r1, r9
   b5c1c:	f000 ff00 	bl	b6a20 <_ZN8SPIClass8transferEh>
   b5c20:	e7f5      	b.n	b5c0e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5c22:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5c24:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5c28:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5c2c:	ea09 0108 	and.w	r1, r9, r8
   b5c30:	b280      	uxth	r0, r0
   b5c32:	f001 fea8 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5c36:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5c3a:	2101      	movs	r1, #1
   b5c3c:	b280      	uxth	r0, r0
   b5c3e:	f001 fea2 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5c42:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5c46:	2100      	movs	r1, #0
   b5c48:	b280      	uxth	r0, r0
   b5c4a:	f001 fe9c 	bl	b7986 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5c4e:	3e01      	subs	r6, #1
   b5c50:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5c54:	d1e8      	bne.n	b5c28 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5c56:	e7da      	b.n	b5c0e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5c5c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5c5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5c60:	1dda      	adds	r2, r3, #7
   b5c62:	bf48      	it	mi
   b5c64:	f103 020e 	addmi.w	r2, r3, #14
   b5c68:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5c6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5c6e:	10d2      	asrs	r2, r2, #3
   b5c70:	435a      	muls	r2, r3
   b5c72:	2100      	movs	r1, #0
   b5c74:	f002 b8a0 	b.w	b7db8 <memset>

000b5c78 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5c78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c7c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5c80:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5c84:	4604      	mov	r4, r0
   b5c86:	460f      	mov	r7, r1
   b5c88:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5c8a:	b1c3      	cbz	r3, b5cbe <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	f7ff ffe5 	bl	b5c5c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5c92:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5c96:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5c9a:	2820      	cmp	r0, #32
   b5c9c:	dc21      	bgt.n	b5ce2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5c9e:	2320      	movs	r3, #32
   b5ca0:	2201      	movs	r2, #1
   b5ca2:	3820      	subs	r0, #32
   b5ca4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5ca8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5cac:	2373      	movs	r3, #115	; 0x73
   b5cae:	3973      	subs	r1, #115	; 0x73
   b5cb0:	9300      	str	r3, [sp, #0]
   b5cb2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5cb6:	4b89      	ldr	r3, [pc, #548]	; (b5edc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5cb8:	f340 024f 	sbfx	r2, r0, #1, #16
   b5cbc:	e021      	b.n	b5d02 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5cbe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5cc2:	1dd8      	adds	r0, r3, #7
   b5cc4:	bf48      	it	mi
   b5cc6:	f103 000e 	addmi.w	r0, r3, #14
   b5cca:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5cce:	10c0      	asrs	r0, r0, #3
   b5cd0:	4358      	muls	r0, r3
   b5cd2:	f000 fd83 	bl	b67dc <malloc>
   b5cd6:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5cd8:	2800      	cmp	r0, #0
   b5cda:	d1d7      	bne.n	b5c8c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5cdc:	b004      	add	sp, #16
   b5cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5ce2:	3840      	subs	r0, #64	; 0x40
   b5ce4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5ce8:	fa02 f280 	sxtah	r2, r2, r0
   b5cec:	2340      	movs	r3, #64	; 0x40
   b5cee:	2001      	movs	r0, #1
   b5cf0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5cf4:	2352      	movs	r3, #82	; 0x52
   b5cf6:	3952      	subs	r1, #82	; 0x52
   b5cf8:	9300      	str	r3, [sp, #0]
   b5cfa:	4b79      	ldr	r3, [pc, #484]	; (b5ee0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5cfc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5d00:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5d02:	4620      	mov	r0, r4
   b5d04:	f341 014f 	sbfx	r1, r1, #1, #16
   b5d08:	f7ff f98e 	bl	b5028 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5d0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5d0e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5d12:	2800      	cmp	r0, #0
   b5d14:	d078      	beq.n	b5e08 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5d16:	2d00      	cmp	r5, #0
   b5d18:	d174      	bne.n	b5e04 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5d1a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5d1e:	2b20      	cmp	r3, #32
   b5d20:	bf0c      	ite	eq
   b5d22:	253c      	moveq	r5, #60	; 0x3c
   b5d24:	253d      	movne	r5, #61	; 0x3d
   b5d26:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5d2a:	f1b8 0f00 	cmp.w	r8, #0
   b5d2e:	d001      	beq.n	b5d34 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5d30:	f001 f9de 	bl	b70f0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5d34:	b1fe      	cbz	r6, b5d76 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5d36:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d3a:	2800      	cmp	r0, #0
   b5d3c:	db1b      	blt.n	b5d76 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5d3e:	2101      	movs	r1, #1
   b5d40:	b280      	uxth	r0, r0
   b5d42:	f001 fe0f 	bl	b7964 <pinMode>
    digitalWrite(rstPin, HIGH);
   b5d46:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d4a:	2101      	movs	r1, #1
   b5d4c:	b280      	uxth	r0, r0
   b5d4e:	f001 fe1a 	bl	b7986 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5d52:	2001      	movs	r0, #1
   b5d54:	f000 ff5e 	bl	b6c14 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5d58:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d5c:	2100      	movs	r1, #0
   b5d5e:	b280      	uxth	r0, r0
   b5d60:	f001 fe11 	bl	b7986 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5d64:	200a      	movs	r0, #10
   b5d66:	f000 ff55 	bl	b6c14 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5d6a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5d6e:	2101      	movs	r1, #1
   b5d70:	b280      	uxth	r0, r0
   b5d72:	f001 fe08 	bl	b7986 <digitalWrite>
  TRANSACTION_START
   b5d76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d78:	2800      	cmp	r0, #0
   b5d7a:	d074      	beq.n	b5e66 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5d7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5d7e:	f001 f9b3 	bl	b70e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5d82:	2204      	movs	r2, #4
   b5d84:	4957      	ldr	r1, [pc, #348]	; (b5ee4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5d86:	4620      	mov	r0, r4
   b5d88:	f7ff ff0b 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5d8c:	8961      	ldrh	r1, [r4, #10]
   b5d8e:	3901      	subs	r1, #1
   b5d90:	b2c9      	uxtb	r1, r1
   b5d92:	4620      	mov	r0, r4
   b5d94:	f7ff fe96 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5d98:	4953      	ldr	r1, [pc, #332]	; (b5ee8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5d9a:	2204      	movs	r2, #4
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	f7ff ff00 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5da2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5da6:	2b01      	cmp	r3, #1
   b5da8:	bf0c      	ite	eq
   b5daa:	2110      	moveq	r1, #16
   b5dac:	2114      	movne	r1, #20
   b5dae:	4620      	mov	r0, r4
   b5db0:	f7ff fe88 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5db4:	2204      	movs	r2, #4
   b5db6:	494d      	ldr	r1, [pc, #308]	; (b5eec <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5db8:	4620      	mov	r0, r4
   b5dba:	f7ff fef2 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5dbe:	68a3      	ldr	r3, [r4, #8]
   b5dc0:	4a4b      	ldr	r2, [pc, #300]	; (b5ef0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5dc2:	4293      	cmp	r3, r2
   b5dc4:	d15c      	bne.n	b5e80 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5dc6:	494b      	ldr	r1, [pc, #300]	; (b5ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5dc8:	2204      	movs	r2, #4
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff fee9 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5dd0:	21d9      	movs	r1, #217	; 0xd9
   b5dd2:	4620      	mov	r0, r4
   b5dd4:	f7ff fe76 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5dd8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5ddc:	2b01      	cmp	r3, #1
   b5dde:	bf0c      	ite	eq
   b5de0:	2122      	moveq	r1, #34	; 0x22
   b5de2:	21f1      	movne	r1, #241	; 0xf1
   b5de4:	4620      	mov	r0, r4
   b5de6:	f7ff fe6d 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5dea:	4620      	mov	r0, r4
   b5dec:	4942      	ldr	r1, [pc, #264]	; (b5ef8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5dee:	2206      	movs	r2, #6
   b5df0:	f7ff fed7 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5df4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5df6:	2800      	cmp	r0, #0
   b5df8:	d063      	beq.n	b5ec2 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5dfa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5dfc:	f001 f974 	bl	b70e8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5e00:	2001      	movs	r0, #1
   b5e02:	e76b      	b.n	b5cdc <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5e04:	b26d      	sxtb	r5, r5
   b5e06:	e78e      	b.n	b5d26 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5e08:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5e0c:	2101      	movs	r1, #1
   b5e0e:	b280      	uxth	r0, r0
   b5e10:	f001 fda8 	bl	b7964 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5e14:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e18:	2101      	movs	r1, #1
   b5e1a:	b280      	uxth	r0, r0
   b5e1c:	f001 fda2 	bl	b7964 <pinMode>
    SSD1306_DESELECT
   b5e20:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e24:	2101      	movs	r1, #1
   b5e26:	b280      	uxth	r0, r0
   b5e28:	f001 fdad 	bl	b7986 <digitalWrite>
    if(spi) { // Hardware SPI
   b5e2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5e2e:	b13d      	cbz	r5, b5e40 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5e30:	f1b8 0f00 	cmp.w	r8, #0
   b5e34:	f43f af7e 	beq.w	b5d34 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5e38:	4628      	mov	r0, r5
   b5e3a:	f000 fd55 	bl	b68e8 <_ZN8SPIClass5beginEv>
   b5e3e:	e779      	b.n	b5d34 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5e40:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5e44:	2101      	movs	r1, #1
   b5e46:	b280      	uxth	r0, r0
   b5e48:	f001 fd8c 	bl	b7964 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5e4c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e50:	2101      	movs	r1, #1
   b5e52:	b280      	uxth	r0, r0
   b5e54:	f001 fd86 	bl	b7964 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5e58:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5e5c:	4629      	mov	r1, r5
   b5e5e:	b280      	uxth	r0, r0
   b5e60:	f001 fd91 	bl	b7986 <digitalWrite>
   b5e64:	e766      	b.n	b5d34 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5e66:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5e68:	b118      	cbz	r0, b5e72 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5e6a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5e6e:	f000 fd69 	bl	b6944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5e72:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5e76:	2100      	movs	r1, #0
   b5e78:	b280      	uxth	r0, r0
   b5e7a:	f001 fd84 	bl	b7986 <digitalWrite>
   b5e7e:	e780      	b.n	b5d82 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5e80:	4a1e      	ldr	r2, [pc, #120]	; (b5efc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5e82:	4293      	cmp	r3, r2
   b5e84:	d10e      	bne.n	b5ea4 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5e86:	491e      	ldr	r1, [pc, #120]	; (b5f00 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5e88:	2203      	movs	r2, #3
   b5e8a:	4620      	mov	r0, r4
   b5e8c:	f7ff fe89 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5e90:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5e94:	2b01      	cmp	r3, #1
   b5e96:	bf0c      	ite	eq
   b5e98:	219f      	moveq	r1, #159	; 0x9f
   b5e9a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	f7ff fe11 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5ea2:	e795      	b.n	b5dd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5ea4:	4a17      	ldr	r2, [pc, #92]	; (b5f04 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5ea6:	4293      	cmp	r3, r2
   b5ea8:	d192      	bne.n	b5dd0 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5eaa:	4917      	ldr	r1, [pc, #92]	; (b5f08 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5eac:	2203      	movs	r2, #3
   b5eae:	4620      	mov	r0, r4
   b5eb0:	f7ff fe77 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5eb4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5eb8:	2b01      	cmp	r3, #1
   b5eba:	bf0c      	ite	eq
   b5ebc:	2110      	moveq	r1, #16
   b5ebe:	21af      	movne	r1, #175	; 0xaf
   b5ec0:	e7ec      	b.n	b5e9c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5ec2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5ec6:	2101      	movs	r1, #1
   b5ec8:	b280      	uxth	r0, r0
   b5eca:	f001 fd5c 	bl	b7986 <digitalWrite>
   b5ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5ed0:	2800      	cmp	r0, #0
   b5ed2:	d095      	beq.n	b5e00 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5ed4:	f000 fd1c 	bl	b6910 <_ZN8SPIClass14endTransactionEv>
   b5ed8:	e792      	b.n	b5e00 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5eda:	bf00      	nop
   b5edc:	000b89ec 	.word	0x000b89ec
   b5ee0:	000b872c 	.word	0x000b872c
   b5ee4:	000b8c34 	.word	0x000b8c34
   b5ee8:	000b8c38 	.word	0x000b8c38
   b5eec:	000b8c3c 	.word	0x000b8c3c
   b5ef0:	00200080 	.word	0x00200080
   b5ef4:	000b8c46 	.word	0x000b8c46
   b5ef8:	000b8c40 	.word	0x000b8c40
   b5efc:	00400080 	.word	0x00400080
   b5f00:	000b8c4a 	.word	0x000b8c4a
   b5f04:	00100060 	.word	0x00100060
   b5f08:	000b8c4d 	.word	0x000b8c4d

000b5f0c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f0c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5f0e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f10:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5f14:	db3d      	blt.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f16:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5f1a:	4294      	cmp	r4, r2
   b5f1c:	dd39      	ble.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5f1e:	2900      	cmp	r1, #0
      w += x;
   b5f20:	bfbe      	ittt	lt
   b5f22:	185b      	addlt	r3, r3, r1
   b5f24:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5f26:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5f28:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5f2c:	18ce      	adds	r6, r1, r3
   b5f2e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5f30:	bfc4      	itt	gt
   b5f32:	1a63      	subgt	r3, r4, r1
   b5f34:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5f36:	2b00      	cmp	r3, #0
   b5f38:	dd2b      	ble.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5f3a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5f3c:	10d6      	asrs	r6, r2, #3
   b5f3e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5f42:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5f44:	f002 0007 	and.w	r0, r2, #7
   b5f48:	2201      	movs	r2, #1
   b5f4a:	4082      	lsls	r2, r0
      switch(color) {
   b5f4c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5f4e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5f50:	d016      	beq.n	b5f80 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5f52:	2d02      	cmp	r5, #2
   b5f54:	d00b      	beq.n	b5f6e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5f56:	b9e5      	cbnz	r5, b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5f58:	43d2      	mvns	r2, r2
   b5f5a:	b2d2      	uxtb	r2, r2
   b5f5c:	440b      	add	r3, r1
   b5f5e:	4299      	cmp	r1, r3
   b5f60:	d017      	beq.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f62:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f66:	4010      	ands	r0, r2
   b5f68:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f6c:	e7f7      	b.n	b5f5e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5f6e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5f70:	4299      	cmp	r1, r3
   b5f72:	d00e      	beq.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f74:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f78:	4050      	eors	r0, r2
   b5f7a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f7e:	e7f7      	b.n	b5f70 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5f80:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5f82:	4299      	cmp	r1, r3
   b5f84:	d005      	beq.n	b5f92 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5f86:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5f8a:	4310      	orrs	r0, r2
   b5f8c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5f90:	e7f7      	b.n	b5f82 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5f92:	bd70      	pop	{r4, r5, r6, pc}

000b5f94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5f94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5f96:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5f98:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5f9c:	db76      	blt.n	b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5f9e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5fa2:	42b1      	cmp	r1, r6
   b5fa4:	da72      	bge.n	b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5fa6:	2a00      	cmp	r2, #0
      __h += __y;
   b5fa8:	bfbe      	ittt	lt
   b5faa:	189b      	addlt	r3, r3, r2
   b5fac:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5fae:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5fb0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5fb4:	18d7      	adds	r7, r2, r3
   b5fb6:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5fb8:	bfc4      	itt	gt
   b5fba:	1aa3      	subgt	r3, r4, r2
   b5fbc:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5fbe:	2b00      	cmp	r3, #0
   b5fc0:	dd64      	ble.n	b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5fc2:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5fc6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5fc8:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5fcc:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5fd0:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5fd2:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5fd6:	d023      	beq.n	b6020 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5fd8:	f1c2 0208 	rsb	r2, r2, #8
   b5fdc:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5fde:	492d      	ldr	r1, [pc, #180]	; (b6094 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5fe0:	4293      	cmp	r3, r2
   b5fe2:	bf3c      	itt	cc
   b5fe4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5fe8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5fec:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5fee:	bf3c      	itt	cc
   b5ff0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5ff4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5ff8:	2d01      	cmp	r5, #1
   b5ffa:	d007      	beq.n	b600c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5ffc:	2d02      	cmp	r5, #2
   b5ffe:	d02e      	beq.n	b605e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b6000:	b94d      	cbnz	r5, b6016 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b6002:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6006:	ea2c 0101 	bic.w	r1, ip, r1
   b600a:	e003      	b.n	b6014 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b600c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6010:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6014:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6016:	4293      	cmp	r3, r2
   b6018:	d338      	bcc.n	b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b601a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b601e:	440c      	add	r4, r1
        h -= mod;
   b6020:	1a9a      	subs	r2, r3, r2
   b6022:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6024:	2a07      	cmp	r2, #7
   b6026:	d90e      	bls.n	b6046 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6028:	2d02      	cmp	r5, #2
   b602a:	d11d      	bne.n	b6068 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b602c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b602e:	7821      	ldrb	r1, [r4, #0]
   b6030:	43c9      	mvns	r1, r1
   b6032:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6034:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6036:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b603a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b603c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b603e:	440c      	add	r4, r1
            } while(h >= 8);
   b6040:	d8f5      	bhi.n	b602e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6042:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6046:	b30a      	cbz	r2, b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6048:	4b13      	ldr	r3, [pc, #76]	; (b6098 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b604a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b604c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b604e:	d01a      	beq.n	b6086 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6050:	2d02      	cmp	r5, #2
   b6052:	d01c      	beq.n	b608e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6054:	b9d5      	cbnz	r5, b608c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6056:	7822      	ldrb	r2, [r4, #0]
   b6058:	ea22 0303 	bic.w	r3, r2, r3
   b605c:	e015      	b.n	b608a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b605e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6062:	ea81 010c 	eor.w	r1, r1, ip
   b6066:	e7d5      	b.n	b6014 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6068:	1e29      	subs	r1, r5, #0
   b606a:	bf18      	it	ne
   b606c:	2101      	movne	r1, #1
   b606e:	4249      	negs	r1, r1
   b6070:	b2c9      	uxtb	r1, r1
   b6072:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6074:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6076:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6078:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b607c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b607e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6080:	4434      	add	r4, r6
            } while(h >= 8);
   b6082:	d8f7      	bhi.n	b6074 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6084:	e7dd      	b.n	b6042 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6086:	7822      	ldrb	r2, [r4, #0]
   b6088:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b608a:	7023      	strb	r3, [r4, #0]
}
   b608c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b608e:	7822      	ldrb	r2, [r4, #0]
   b6090:	4053      	eors	r3, r2
   b6092:	e7fa      	b.n	b608a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6094:	000b8c24 	.word	0x000b8c24
   b6098:	000b8c2c 	.word	0x000b8c2c

000b609c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b609c:	b470      	push	{r4, r5, r6}
   b609e:	4614      	mov	r4, r2
  switch(rotation) {
   b60a0:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b60a2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b60a6:	2a02      	cmp	r2, #2
   b60a8:	d00d      	beq.n	b60c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b60aa:	2a03      	cmp	r2, #3
   b60ac:	d018      	beq.n	b60e0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b60ae:	2a01      	cmp	r2, #1
   b60b0:	d111      	bne.n	b60d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b60b2:	8902      	ldrh	r2, [r0, #8]
   b60b4:	43e4      	mvns	r4, r4
   b60b6:	4414      	add	r4, r2
   b60b8:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b60ba:	9603      	str	r6, [sp, #12]
   b60bc:	460a      	mov	r2, r1
   b60be:	4621      	mov	r1, r4
}
   b60c0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b60c2:	f7ff bf67 	b.w	b5f94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b60c6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b60c8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b60ca:	43e4      	mvns	r4, r4
    x -= (w-1);
   b60cc:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b60ce:	4414      	add	r4, r2
    x -= (w-1);
   b60d0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b60d2:	b224      	sxth	r4, r4
    x -= (w-1);
   b60d4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b60d6:	9603      	str	r6, [sp, #12]
   b60d8:	4622      	mov	r2, r4
}
   b60da:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b60dc:	f7ff bf16 	b.w	b5f0c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b60e0:	8945      	ldrh	r5, [r0, #10]
   b60e2:	4419      	add	r1, r3
   b60e4:	1a69      	subs	r1, r5, r1
   b60e6:	b209      	sxth	r1, r1
    break;
   b60e8:	e7e7      	b.n	b60ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b60ea <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b60ea:	b430      	push	{r4, r5}
   b60ec:	4614      	mov	r4, r2
  switch(rotation) {
   b60ee:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b60f0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b60f4:	2a02      	cmp	r2, #2
   b60f6:	d00d      	beq.n	b6114 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b60f8:	2a03      	cmp	r2, #3
   b60fa:	d018      	beq.n	b612e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b60fc:	2a01      	cmp	r2, #1
   b60fe:	d111      	bne.n	b6124 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6100:	18e2      	adds	r2, r4, r3
   b6102:	8904      	ldrh	r4, [r0, #8]
   b6104:	1aa4      	subs	r4, r4, r2
   b6106:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6108:	9502      	str	r5, [sp, #8]
   b610a:	460a      	mov	r2, r1
   b610c:	4621      	mov	r1, r4
}
   b610e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6110:	f7ff befc 	b.w	b5f0c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6114:	8902      	ldrh	r2, [r0, #8]
   b6116:	43c9      	mvns	r1, r1
   b6118:	4411      	add	r1, r2
    y -= (h-1);
   b611a:	18e2      	adds	r2, r4, r3
   b611c:	8944      	ldrh	r4, [r0, #10]
   b611e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6120:	b209      	sxth	r1, r1
    y -= (h-1);
   b6122:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6124:	9502      	str	r5, [sp, #8]
   b6126:	4622      	mov	r2, r4
}
   b6128:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b612a:	f7ff bf33 	b.w	b5f94 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b612e:	8942      	ldrh	r2, [r0, #10]
   b6130:	43c9      	mvns	r1, r1
   b6132:	4411      	add	r1, r2
   b6134:	b209      	sxth	r1, r1
    break;
   b6136:	e7e7      	b.n	b6108 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6138 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b613c:	4604      	mov	r4, r0
  TRANSACTION_START
   b613e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6140:	2800      	cmp	r0, #0
   b6142:	d042      	beq.n	b61ca <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6144:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6146:	f000 ffcf 	bl	b70e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b614a:	4947      	ldr	r1, [pc, #284]	; (b6268 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b614c:	2205      	movs	r2, #5
   b614e:	4620      	mov	r0, r4
   b6150:	f7ff fd27 	bl	b5ba2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6154:	8921      	ldrh	r1, [r4, #8]
   b6156:	3901      	subs	r1, #1
   b6158:	4620      	mov	r0, r4
   b615a:	b2c9      	uxtb	r1, r1
   b615c:	f7ff fcb2 	bl	b5ac4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6160:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6164:	1dde      	adds	r6, r3, #7
   b6166:	bf48      	it	mi
   b6168:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b616c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6170:	8923      	ldrh	r3, [r4, #8]
   b6172:	10f6      	asrs	r6, r6, #3
   b6174:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6178:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b617c:	2800      	cmp	r0, #0
   b617e:	d03a      	beq.n	b61f6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6180:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6184:	f000 ffea 	bl	b715c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b618a:	6803      	ldr	r3, [r0, #0]
   b618c:	2140      	movs	r1, #64	; 0x40
   b618e:	689b      	ldr	r3, [r3, #8]
   b6190:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6192:	2701      	movs	r7, #1
    while(count--) {
   b6194:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6196:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6198:	d024      	beq.n	b61e4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b619a:	2f1f      	cmp	r7, #31
   b619c:	d90c      	bls.n	b61b8 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b619e:	f000 ffe4 	bl	b716a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b61a2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b61a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61a8:	f000 ffd8 	bl	b715c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b61ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61ae:	6803      	ldr	r3, [r0, #0]
   b61b0:	2140      	movs	r1, #64	; 0x40
   b61b2:	689b      	ldr	r3, [r3, #8]
   b61b4:	4798      	blx	r3
        bytesOut = 1;
   b61b6:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b61b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61ba:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61be:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b61c0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b61c2:	689b      	ldr	r3, [r3, #8]
   b61c4:	4798      	blx	r3
      bytesOut++;
   b61c6:	b2ff      	uxtb	r7, r7
    while(count--) {
   b61c8:	e7e4      	b.n	b6194 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b61ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b61cc:	b118      	cbz	r0, b61d6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b61ce:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b61d2:	f000 fbb7 	bl	b6944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b61d6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b61da:	2100      	movs	r1, #0
   b61dc:	b280      	uxth	r0, r0
   b61de:	f001 fbd2 	bl	b7986 <digitalWrite>
   b61e2:	e7b2      	b.n	b614a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b61e4:	f000 ffc1 	bl	b716a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b61e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b61ea:	b378      	cbz	r0, b624c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b61ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b61ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b61f2:	f000 bf79 	b.w	b70e8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b61f6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b61fa:	2101      	movs	r1, #1
   b61fc:	b280      	uxth	r0, r0
   b61fe:	f001 fbc2 	bl	b7986 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6202:	42ae      	cmp	r6, r5
   b6204:	d0f0      	beq.n	b61e8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6206:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6208:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b620c:	b118      	cbz	r0, b6216 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b620e:	4649      	mov	r1, r9
   b6210:	f000 fc06 	bl	b6a20 <_ZN8SPIClass8transferEh>
   b6214:	e7f5      	b.n	b6202 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6216:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6218:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b621c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6220:	ea09 0108 	and.w	r1, r9, r8
   b6224:	b280      	uxth	r0, r0
   b6226:	f001 fbae 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b622a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b622e:	2101      	movs	r1, #1
   b6230:	b280      	uxth	r0, r0
   b6232:	f001 fba8 	bl	b7986 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6236:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b623a:	2100      	movs	r1, #0
   b623c:	b280      	uxth	r0, r0
   b623e:	f001 fba2 	bl	b7986 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6242:	3f01      	subs	r7, #1
   b6244:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6248:	d1e8      	bne.n	b621c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b624a:	e7da      	b.n	b6202 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b624c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6250:	2101      	movs	r1, #1
   b6252:	b280      	uxth	r0, r0
   b6254:	f001 fb97 	bl	b7986 <digitalWrite>
   b6258:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b625a:	b118      	cbz	r0, b6264 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b625c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6260:	f000 bb56 	b.w	b6910 <_ZN8SPIClass14endTransactionEv>
}
   b6264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6268:	000b8c50 	.word	0x000b8c50

000b626c <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b626c:	f000 bcd2 	b.w	b6c14 <delay>

000b6270 <_Z11BlynkMillisv>:
   b6270:	f000 b880 	b.w	b6374 <HAL_Timer_Get_Milli_Seconds>

000b6274 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6274:	4770      	bx	lr

000b6276 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6276:	4770      	bx	lr

000b6278 <BlynkNoOpCbk>:
{}
   b6278:	4770      	bx	lr
	...

000b627c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b627c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b627e:	bf5a      	itte	pl
   b6280:	4b02      	ldrpl	r3, [pc, #8]	; (b628c <GetReadHandler+0x10>)
   b6282:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6286:	2000      	movmi	r0, #0
#endif
}
   b6288:	4770      	bx	lr
   b628a:	bf00      	nop
   b628c:	000b8c58 	.word	0x000b8c58

000b6290 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6290:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6292:	bf5a      	itte	pl
   b6294:	4b02      	ldrpl	r3, [pc, #8]	; (b62a0 <GetWriteHandler+0x10>)
   b6296:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b629a:	2000      	movmi	r0, #0
#endif
}
   b629c:	4770      	bx	lr
   b629e:	bf00      	nop
   b62a0:	000b8e58 	.word	0x000b8e58

000b62a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <netdb_freeaddrinfo+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	689b      	ldr	r3, [r3, #8]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030268 	.word	0x00030268

000b62b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <netdb_getaddrinfo+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	68db      	ldr	r3, [r3, #12]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030268 	.word	0x00030268

000b62c4 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <hal_pin_validate_function+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	685b      	ldr	r3, [r3, #4]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	0003022c 	.word	0x0003022c

000b62d4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <hal_gpio_mode+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	689b      	ldr	r3, [r3, #8]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003022c 	.word	0x0003022c

000b62e4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <hal_gpio_get_mode+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	68db      	ldr	r3, [r3, #12]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003022c 	.word	0x0003022c

000b62f4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <hal_gpio_write+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	691b      	ldr	r3, [r3, #16]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003022c 	.word	0x0003022c

000b6304 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <hal_gpio_read+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	695b      	ldr	r3, [r3, #20]
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	0003022c 	.word	0x0003022c

000b6314 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <HAL_DAC_Write+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	0003022c 	.word	0x0003022c

000b6324 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_adc_read+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	0003022c 	.word	0x0003022c

000b6334 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_pwm_write_ext+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	0003022c 	.word	0x0003022c

000b6344 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <if_index_to_name+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	695b      	ldr	r3, [r3, #20]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	0003026c 	.word	0x0003026c

000b6354 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <HAL_RNG_GetRandomNumber+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	685b      	ldr	r3, [r3, #4]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	00030218 	.word	0x00030218

000b6364 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <HAL_Delay_Microseconds+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	68db      	ldr	r3, [r3, #12]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	00030218 	.word	0x00030218

000b6374 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	695b      	ldr	r3, [r3, #20]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	00030218 	.word	0x00030218

000b6384 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <os_mutex_create+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	00030248 	.word	0x00030248

000b6394 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <os_mutex_destroy+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030248 	.word	0x00030248

000b63a4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <os_mutex_recursive_create+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030248 	.word	0x00030248

000b63b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <inet_inet_ntop+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	695b      	ldr	r3, [r3, #20]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	00030264 	.word	0x00030264

000b63c4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <inet_htonl+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	6a1b      	ldr	r3, [r3, #32]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030264 	.word	0x00030264

000b63d4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <inet_ntohs+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030264 	.word	0x00030264

000b63e4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <inet_htons+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030264 	.word	0x00030264

000b63f4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <hal_usart_write+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	68db      	ldr	r3, [r3, #12]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	0003023c 	.word	0x0003023c

000b6404 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <hal_usart_available+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	691b      	ldr	r3, [r3, #16]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003023c 	.word	0x0003023c

000b6414 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <hal_usart_read+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	695b      	ldr	r3, [r3, #20]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003023c 	.word	0x0003023c

000b6424 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <hal_usart_peek+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	699b      	ldr	r3, [r3, #24]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	0003023c 	.word	0x0003023c

000b6434 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <hal_usart_flush+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	69db      	ldr	r3, [r3, #28]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	0003023c 	.word	0x0003023c

000b6444 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <hal_usart_is_enabled+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	6a1b      	ldr	r3, [r3, #32]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	0003023c 	.word	0x0003023c

000b6454 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <hal_usart_available_data_for_write+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	0003023c 	.word	0x0003023c

000b6464 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <hal_usart_init_ex+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	0003023c 	.word	0x0003023c

000b6474 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <hal_i2c_set_speed+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	681b      	ldr	r3, [r3, #0]
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030228 	.word	0x00030228

000b6484 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <hal_i2c_begin+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	68db      	ldr	r3, [r3, #12]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030228 	.word	0x00030228

000b6494 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <hal_i2c_begin_transmission+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	699b      	ldr	r3, [r3, #24]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030228 	.word	0x00030228

000b64a4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <hal_i2c_end_transmission+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	69db      	ldr	r3, [r3, #28]
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030228 	.word	0x00030228

000b64b4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <hal_i2c_write+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6a1b      	ldr	r3, [r3, #32]
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030228 	.word	0x00030228

000b64c4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <hal_i2c_available+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030228 	.word	0x00030228

000b64d4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <hal_i2c_read+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030228 	.word	0x00030228

000b64e4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <hal_i2c_peek+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030228 	.word	0x00030228

000b64f4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <hal_i2c_flush+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030228 	.word	0x00030228

000b6504 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <hal_i2c_is_enabled+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030228 	.word	0x00030228

000b6514 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_i2c_init+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030228 	.word	0x00030228

000b6524 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_i2c_request_ex+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030228 	.word	0x00030228

000b6534 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <sock_setsockopt+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	699b      	ldr	r3, [r3, #24]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030238 	.word	0x00030238

000b6544 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <sock_close+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	69db      	ldr	r3, [r3, #28]
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030238 	.word	0x00030238

000b6554 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <sock_connect+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6a1b      	ldr	r3, [r3, #32]
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030238 	.word	0x00030238

000b6564 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <sock_recv+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030238 	.word	0x00030238

000b6574 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <sock_send+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030238 	.word	0x00030238

000b6584 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <sock_socket+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030238 	.word	0x00030238

000b6594 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <hal_spi_begin+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	681b      	ldr	r3, [r3, #0]
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030230 	.word	0x00030230

000b65a4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_spi_transfer+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	695b      	ldr	r3, [r3, #20]
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	00030230 	.word	0x00030230

000b65b4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_spi_init+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	69db      	ldr	r3, [r3, #28]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	00030230 	.word	0x00030230

000b65c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_spi_is_enabled+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	6a1b      	ldr	r3, [r3, #32]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	00030230 	.word	0x00030230

000b65d4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <hal_spi_info+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	00030230 	.word	0x00030230

000b65e4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <hal_spi_set_settings+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	00030230 	.word	0x00030230

000b65f4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <hal_spi_acquire+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	00030230 	.word	0x00030230

000b6604 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <hal_spi_release+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	00030230 	.word	0x00030230

000b6614 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <HAL_USB_USART_Init+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	681b      	ldr	r3, [r3, #0]
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	0003024c 	.word	0x0003024c

000b6624 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <HAL_USB_USART_Begin+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	685b      	ldr	r3, [r3, #4]
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	0003024c 	.word	0x0003024c

000b6634 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <HAL_USB_USART_Available_Data+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	691b      	ldr	r3, [r3, #16]
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	0003024c 	.word	0x0003024c

000b6644 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	695b      	ldr	r3, [r3, #20]
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	0003024c 	.word	0x0003024c

000b6654 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <HAL_USB_USART_Receive_Data+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	699b      	ldr	r3, [r3, #24]
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	0003024c 	.word	0x0003024c

000b6664 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <HAL_USB_USART_Send_Data+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	69db      	ldr	r3, [r3, #28]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	0003024c 	.word	0x0003024c

000b6674 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <HAL_USB_USART_Flush_Data+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	6a1b      	ldr	r3, [r3, #32]
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	0003024c 	.word	0x0003024c

000b6684 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <panic_+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	00030260 	.word	0x00030260

000b6694 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <log_message+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	00030260 	.word	0x00030260

000b66a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <set_system_mode+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	685b      	ldr	r3, [r3, #4]
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	00030220 	.word	0x00030220

000b66b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <system_delay_ms+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	695b      	ldr	r3, [r3, #20]
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	00030220 	.word	0x00030220

000b66c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <system_thread_set_state+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	00030220 	.word	0x00030220

000b66d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b03      	ldr	r3, [pc, #12]	; (b66e4 <system_ctrl_set_app_request_handler+0x10>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b66de:	9301      	str	r3, [sp, #4]
   b66e0:	bd08      	pop	{r3, pc}
   b66e2:	0000      	.short	0x0000
   b66e4:	00030220 	.word	0x00030220

000b66e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b03      	ldr	r3, [pc, #12]	; (b66f8 <system_ctrl_set_result+0x10>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b66f2:	9301      	str	r3, [sp, #4]
   b66f4:	bd08      	pop	{r3, pc}
   b66f6:	0000      	.short	0x0000
   b66f8:	00030220 	.word	0x00030220

000b66fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <network_connect+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	685b      	ldr	r3, [r3, #4]
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030240 	.word	0x00030240

000b670c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <network_connecting+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	689b      	ldr	r3, [r3, #8]
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	00030240 	.word	0x00030240

000b671c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <network_disconnect+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	68db      	ldr	r3, [r3, #12]
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	00030240 	.word	0x00030240

000b672c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <network_ready+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	691b      	ldr	r3, [r3, #16]
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	00030240 	.word	0x00030240

000b673c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <network_on+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	695b      	ldr	r3, [r3, #20]
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030240 	.word	0x00030240

000b674c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <network_off+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	699b      	ldr	r3, [r3, #24]
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	00030240 	.word	0x00030240

000b675c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <network_listen+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	69db      	ldr	r3, [r3, #28]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	00030240 	.word	0x00030240

000b676c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <network_listening+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	6a1b      	ldr	r3, [r3, #32]
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	00030240 	.word	0x00030240

000b677c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <network_set_listen_timeout+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	00030240 	.word	0x00030240

000b678c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <network_get_listen_timeout+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	00030240 	.word	0x00030240

000b679c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <network_is_on+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	00030240 	.word	0x00030240

000b67ac <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <network_is_off+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	00030240 	.word	0x00030240

000b67bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <spark_process+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	689b      	ldr	r3, [r3, #8]
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	00030244 	.word	0x00030244

000b67cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	00030244 	.word	0x00030244

000b67dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <malloc+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	681b      	ldr	r3, [r3, #0]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	0003021c 	.word	0x0003021c

000b67ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <free+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	685b      	ldr	r3, [r3, #4]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	0003021c 	.word	0x0003021c

000b67fc <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <snprintf+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	69db      	ldr	r3, [r3, #28]
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	0003021c 	.word	0x0003021c

000b680c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <vsnprintf+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	0003021c 	.word	0x0003021c

000b681c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <__errno+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	0003021c 	.word	0x0003021c

000b682c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b682c:	b508      	push	{r3, lr}
   b682e:	4b02      	ldr	r3, [pc, #8]	; (b6838 <__assert_func+0xc>)
   b6830:	681b      	ldr	r3, [r3, #0]
   b6832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6834:	9301      	str	r3, [sp, #4]
   b6836:	bd08      	pop	{r3, pc}
   b6838:	0003021c 	.word	0x0003021c

000b683c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b683c:	b508      	push	{r3, lr}
   b683e:	4b02      	ldr	r3, [pc, #8]	; (b6848 <newlib_impure_ptr_callback+0xc>)
   b6840:	681b      	ldr	r3, [r3, #0]
   b6842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6844:	9301      	str	r3, [sp, #4]
   b6846:	bd08      	pop	{r3, pc}
   b6848:	0003021c 	.word	0x0003021c

000b684c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b684c:	2200      	movs	r2, #0
   b684e:	6840      	ldr	r0, [r0, #4]
   b6850:	4611      	mov	r1, r2
   b6852:	f7ff bf8b 	b.w	b676c <network_listening>

000b6856 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6856:	2200      	movs	r2, #0
   b6858:	6840      	ldr	r0, [r0, #4]
   b685a:	4611      	mov	r1, r2
   b685c:	f7ff bf96 	b.w	b678c <network_get_listen_timeout>

000b6860 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6860:	6840      	ldr	r0, [r0, #4]
   b6862:	2200      	movs	r2, #0
   b6864:	f7ff bf8a 	b.w	b677c <network_set_listen_timeout>

000b6868 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6868:	6840      	ldr	r0, [r0, #4]
   b686a:	2200      	movs	r2, #0
   b686c:	f081 0101 	eor.w	r1, r1, #1
   b6870:	f7ff bf74 	b.w	b675c <network_listen>

000b6874 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6874:	2300      	movs	r3, #0
   b6876:	6840      	ldr	r0, [r0, #4]
   b6878:	461a      	mov	r2, r3
   b687a:	4619      	mov	r1, r3
   b687c:	f7ff bf66 	b.w	b674c <network_off>

000b6880 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6880:	2300      	movs	r3, #0
   b6882:	6840      	ldr	r0, [r0, #4]
   b6884:	461a      	mov	r2, r3
   b6886:	4619      	mov	r1, r3
   b6888:	f7ff bf58 	b.w	b673c <network_on>

000b688c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b688c:	2200      	movs	r2, #0
   b688e:	6840      	ldr	r0, [r0, #4]
   b6890:	4611      	mov	r1, r2
   b6892:	f7ff bf4b 	b.w	b672c <network_ready>

000b6896 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6896:	2200      	movs	r2, #0
   b6898:	6840      	ldr	r0, [r0, #4]
   b689a:	4611      	mov	r1, r2
   b689c:	f7ff bf36 	b.w	b670c <network_connecting>

000b68a0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b68a0:	6840      	ldr	r0, [r0, #4]
   b68a2:	2200      	movs	r2, #0
   b68a4:	2102      	movs	r1, #2
   b68a6:	f7ff bf39 	b.w	b671c <network_disconnect>

000b68aa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b68aa:	2300      	movs	r3, #0
   b68ac:	6840      	ldr	r0, [r0, #4]
   b68ae:	461a      	mov	r2, r3
   b68b0:	f7ff bf24 	b.w	b66fc <network_connect>

000b68b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b68b4:	4b02      	ldr	r3, [pc, #8]	; (b68c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b68b6:	2203      	movs	r2, #3
   b68b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b68ba:	4a02      	ldr	r2, [pc, #8]	; (b68c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b68bc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b68be:	4770      	bx	lr
   b68c0:	2003e6c4 	.word	0x2003e6c4
   b68c4:	000b9060 	.word	0x000b9060

000b68c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b68c8:	2100      	movs	r1, #0
   b68ca:	f7ff be9b 	b.w	b6604 <hal_spi_release>

000b68ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b68ce:	2100      	movs	r1, #0
   b68d0:	f7ff be90 	b.w	b65f4 <hal_spi_acquire>

000b68d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b68d4:	b510      	push	{r4, lr}
   b68d6:	4604      	mov	r4, r0
   b68d8:	4608      	mov	r0, r1
{
    _spi = spi;
   b68da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b68dc:	f7ff fe6a 	bl	b65b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b68e0:	2300      	movs	r3, #0
   b68e2:	6063      	str	r3, [r4, #4]
}
   b68e4:	4620      	mov	r0, r4
   b68e6:	bd10      	pop	{r4, pc}

000b68e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b68e8:	b513      	push	{r0, r1, r4, lr}
   b68ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b68ec:	7800      	ldrb	r0, [r0, #0]
   b68ee:	f7ff ffee 	bl	b68ce <_ZN8SPIClass4lockEv.isra.0>
   b68f2:	b958      	cbnz	r0, b690c <_ZN8SPIClass5beginEv+0x24>
   b68f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b68f6:	9001      	str	r0, [sp, #4]
   b68f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b68fc:	f7ff fe4a 	bl	b6594 <hal_spi_begin>
        unlock();
   b6900:	9801      	ldr	r0, [sp, #4]
    }
}
   b6902:	b002      	add	sp, #8
   b6904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6908:	f7ff bfde 	b.w	b68c8 <_ZN8SPIClass6unlockEv.isra.0>
   b690c:	b002      	add	sp, #8
   b690e:	bd10      	pop	{r4, pc}

000b6910 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6910:	7800      	ldrb	r0, [r0, #0]
   b6912:	f7ff bfd9 	b.w	b68c8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6918 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6918:	0840      	lsrs	r0, r0, #1
{
   b691a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b691c:	6018      	str	r0, [r3, #0]
   b691e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6920:	6818      	ldr	r0, [r3, #0]
   b6922:	4288      	cmp	r0, r1
   b6924:	b2e5      	uxtb	r5, r4
   b6926:	d906      	bls.n	b6936 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6928:	3401      	adds	r4, #1
   b692a:	2c08      	cmp	r4, #8
   b692c:	d002      	beq.n	b6934 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b692e:	0840      	lsrs	r0, r0, #1
   b6930:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6932:	e7f5      	b.n	b6920 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6934:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6936:	4b02      	ldr	r3, [pc, #8]	; (b6940 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6938:	5d5b      	ldrb	r3, [r3, r5]
   b693a:	7013      	strb	r3, [r2, #0]
}
   b693c:	bd30      	pop	{r4, r5, pc}
   b693e:	bf00      	nop
   b6940:	000b9094 	.word	0x000b9094

000b6944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6948:	4606      	mov	r6, r0
   b694a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b694c:	7800      	ldrb	r0, [r0, #0]
{
   b694e:	460c      	mov	r4, r1
    CHECK(lock());
   b6950:	f7ff ffbd 	bl	b68ce <_ZN8SPIClass4lockEv.isra.0>
   b6954:	2800      	cmp	r0, #0
   b6956:	db1b      	blt.n	b6990 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6958:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b695a:	2214      	movs	r2, #20
   b695c:	2100      	movs	r1, #0
   b695e:	a809      	add	r0, sp, #36	; 0x24
   b6960:	f001 fa2a 	bl	b7db8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6964:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6966:	2200      	movs	r2, #0
   b6968:	a909      	add	r1, sp, #36	; 0x24
   b696a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b696c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6970:	f7ff fe30 	bl	b65d4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6974:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6978:	b113      	cbz	r3, b6980 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b697a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b697e:	b155      	cbz	r5, b6996 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6980:	2700      	movs	r7, #0
   b6982:	46b9      	mov	r9, r7
   b6984:	46b8      	mov	r8, r7
   b6986:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6988:	7923      	ldrb	r3, [r4, #4]
   b698a:	b15d      	cbz	r5, b69a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b698c:	b1c3      	cbz	r3, b69c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b698e:	2000      	movs	r0, #0
}
   b6990:	b00f      	add	sp, #60	; 0x3c
   b6992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6996:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b699a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b699e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b69a2:	e7f1      	b.n	b6988 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b69a4:	2b00      	cmp	r3, #0
   b69a6:	d135      	bne.n	b6a14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b69a8:	68a3      	ldr	r3, [r4, #8]
   b69aa:	4543      	cmp	r3, r8
   b69ac:	d108      	bne.n	b69c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b69ae:	f88d 9020 	strb.w	r9, [sp, #32]
   b69b2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b69b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b69ba:	89a3      	ldrh	r3, [r4, #12]
   b69bc:	429a      	cmp	r2, r3
   b69be:	d0e6      	beq.n	b698e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b69c0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b69c2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b69c4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b69c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b69ca:	ab04      	add	r3, sp, #16
   b69cc:	f10d 020f 	add.w	r2, sp, #15
   b69d0:	f7ff ffa2 	bl	b6918 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b69d4:	7921      	ldrb	r1, [r4, #4]
   b69d6:	b985      	cbnz	r5, b69fa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b69d8:	b989      	cbnz	r1, b69fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b69da:	68a3      	ldr	r3, [r4, #8]
   b69dc:	4543      	cmp	r3, r8
   b69de:	d30e      	bcc.n	b69fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b69e0:	f88d 9020 	strb.w	r9, [sp, #32]
   b69e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b69e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b69ec:	89a3      	ldrh	r3, [r4, #12]
   b69ee:	429a      	cmp	r2, r3
   b69f0:	d105      	bne.n	b69fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b69f2:	9b04      	ldr	r3, [sp, #16]
   b69f4:	4543      	cmp	r3, r8
   b69f6:	d102      	bne.n	b69fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b69f8:	e7c9      	b.n	b698e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b69fa:	2900      	cmp	r1, #0
   b69fc:	d1f9      	bne.n	b69f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b69fe:	2300      	movs	r3, #0
   b6a00:	9301      	str	r3, [sp, #4]
   b6a02:	7b63      	ldrb	r3, [r4, #13]
   b6a04:	9300      	str	r3, [sp, #0]
   b6a06:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6a0a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6a0c:	7830      	ldrb	r0, [r6, #0]
   b6a0e:	f7ff fde9 	bl	b65e4 <hal_spi_set_settings>
   b6a12:	e7bc      	b.n	b698e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6a14:	e9cd 5500 	strd	r5, r5, [sp]
   b6a18:	462b      	mov	r3, r5
   b6a1a:	462a      	mov	r2, r5
   b6a1c:	2101      	movs	r1, #1
   b6a1e:	e7f5      	b.n	b6a0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6a20 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6a20:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6a22:	7800      	ldrb	r0, [r0, #0]
   b6a24:	f7ff fdbe 	bl	b65a4 <hal_spi_transfer>
}
   b6a28:	b2c0      	uxtb	r0, r0
   b6a2a:	bd08      	pop	{r3, pc}

000b6a2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6a2c:	4b05      	ldr	r3, [pc, #20]	; (b6a44 <_GLOBAL__sub_I_System+0x18>)
   b6a2e:	2202      	movs	r2, #2
   b6a30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6a32:	4b05      	ldr	r3, [pc, #20]	; (b6a48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6a34:	4a05      	ldr	r2, [pc, #20]	; (b6a4c <_GLOBAL__sub_I_System+0x20>)
   b6a36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6a38:	2000      	movs	r0, #0
   b6a3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6a3e:	f7ff be31 	b.w	b66a4 <set_system_mode>
   b6a42:	bf00      	nop
   b6a44:	2003e6d8 	.word	0x2003e6d8
   b6a48:	2003e6cc 	.word	0x2003e6cc
   b6a4c:	ffff0000 	.word	0xffff0000

000b6a50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b6a50:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6a52:	6843      	ldr	r3, [r0, #4]
   b6a54:	3b01      	subs	r3, #1
    {
   b6a56:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6a58:	6043      	str	r3, [r0, #4]
   b6a5a:	b963      	cbnz	r3, b6a76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b6a5c:	6803      	ldr	r3, [r0, #0]
   b6a5e:	689b      	ldr	r3, [r3, #8]
   b6a60:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b6a62:	68a3      	ldr	r3, [r4, #8]
   b6a64:	3b01      	subs	r3, #1
   b6a66:	60a3      	str	r3, [r4, #8]
   b6a68:	b92b      	cbnz	r3, b6a76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6a6a:	6823      	ldr	r3, [r4, #0]
   b6a6c:	4620      	mov	r0, r4
   b6a6e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b6a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6a74:	4718      	bx	r3
    }
   b6a76:	bd10      	pop	{r4, pc}

000b6a78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6a78:	4802      	ldr	r0, [pc, #8]	; (b6a84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6a7a:	2300      	movs	r3, #0
   b6a7c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6a7e:	f7ff bc91 	b.w	b63a4 <os_mutex_recursive_create>
   b6a82:	bf00      	nop
   b6a84:	2003e6dc 	.word	0x2003e6dc

000b6a88 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a8a:	4606      	mov	r6, r0
   b6a8c:	460d      	mov	r5, r1
  size_t n = 0;
   b6a8e:	188f      	adds	r7, r1, r2
   b6a90:	2400      	movs	r4, #0
  while (size--) {
   b6a92:	42bd      	cmp	r5, r7
   b6a94:	d00c      	beq.n	b6ab0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a96:	6833      	ldr	r3, [r6, #0]
   b6a98:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a9c:	689b      	ldr	r3, [r3, #8]
   b6a9e:	4630      	mov	r0, r6
   b6aa0:	4798      	blx	r3
     if (chunk>=0)
   b6aa2:	1e03      	subs	r3, r0, #0
   b6aa4:	db01      	blt.n	b6aaa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6aa6:	441c      	add	r4, r3
  while (size--) {
   b6aa8:	e7f3      	b.n	b6a92 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6aaa:	2c00      	cmp	r4, #0
   b6aac:	bf08      	it	eq
   b6aae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ab4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6ab4:	b513      	push	{r0, r1, r4, lr}
   b6ab6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6ab8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6aba:	b159      	cbz	r1, b6ad4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6abc:	9101      	str	r1, [sp, #4]
   b6abe:	f7fd fab7 	bl	b4030 <strlen>
   b6ac2:	6823      	ldr	r3, [r4, #0]
   b6ac4:	9901      	ldr	r1, [sp, #4]
   b6ac6:	68db      	ldr	r3, [r3, #12]
   b6ac8:	4602      	mov	r2, r0
   b6aca:	4620      	mov	r0, r4
    }
   b6acc:	b002      	add	sp, #8
   b6ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6ad2:	4718      	bx	r3
    }
   b6ad4:	b002      	add	sp, #8
   b6ad6:	bd10      	pop	{r4, pc}

000b6ad8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6ad8:	b508      	push	{r3, lr}
  return write(str);
   b6ada:	f7ff ffeb 	bl	b6ab4 <_ZN5Print5writeEPKc>
}
   b6ade:	bd08      	pop	{r3, pc}

000b6ae0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6ae0:	6803      	ldr	r3, [r0, #0]
   b6ae2:	689b      	ldr	r3, [r3, #8]
   b6ae4:	4718      	bx	r3

000b6ae6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6ae6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6ae8:	210d      	movs	r1, #13
{
   b6aea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6aec:	f7ff fff8 	bl	b6ae0 <_ZN5Print5printEc>
  n += print('\n');
   b6af0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6af2:	4604      	mov	r4, r0
  n += print('\n');
   b6af4:	4628      	mov	r0, r5
   b6af6:	f7ff fff3 	bl	b6ae0 <_ZN5Print5printEc>
  return n;
}
   b6afa:	4420      	add	r0, r4
   b6afc:	bd38      	pop	{r3, r4, r5, pc}

000b6afe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6afe:	b530      	push	{r4, r5, lr}
   b6b00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6b02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6b04:	2a01      	cmp	r2, #1
  *str = '\0';
   b6b06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6b0a:	bf98      	it	ls
   b6b0c:	220a      	movls	r2, #10
   b6b0e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6b10:	460d      	mov	r5, r1
   b6b12:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6b16:	fb01 5312 	mls	r3, r1, r2, r5
   b6b1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b1e:	2b09      	cmp	r3, #9
   b6b20:	bf94      	ite	ls
   b6b22:	3330      	addls	r3, #48	; 0x30
   b6b24:	3337      	addhi	r3, #55	; 0x37
   b6b26:	b2db      	uxtb	r3, r3
  } while(n);
   b6b28:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b2a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b2e:	d9ef      	bls.n	b6b10 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b30:	4621      	mov	r1, r4
   b6b32:	f7ff ffbf 	bl	b6ab4 <_ZN5Print5writeEPKc>
}
   b6b36:	b00b      	add	sp, #44	; 0x2c
   b6b38:	bd30      	pop	{r4, r5, pc}

000b6b3a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b3e:	b086      	sub	sp, #24
   b6b40:	af00      	add	r7, sp, #0
   b6b42:	4605      	mov	r5, r0
   b6b44:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b46:	1d38      	adds	r0, r7, #4
   b6b48:	2114      	movs	r1, #20
{
   b6b4a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6b4c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6b4e:	f7ff fe5d 	bl	b680c <vsnprintf>

    if (n<bufsize)
   b6b52:	2813      	cmp	r0, #19
   b6b54:	d80e      	bhi.n	b6b74 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6b56:	1d39      	adds	r1, r7, #4
   b6b58:	4628      	mov	r0, r5
   b6b5a:	f7ff ffab 	bl	b6ab4 <_ZN5Print5writeEPKc>
   b6b5e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6b60:	b11e      	cbz	r6, b6b6a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6b62:	4628      	mov	r0, r5
   b6b64:	f7ff ffbf 	bl	b6ae6 <_ZN5Print7printlnEv>
   b6b68:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6b6a:	4620      	mov	r0, r4
   b6b6c:	3718      	adds	r7, #24
   b6b6e:	46bd      	mov	sp, r7
   b6b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6b74:	f100 0308 	add.w	r3, r0, #8
   b6b78:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6b7c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6b7e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6b82:	4622      	mov	r2, r4
   b6b84:	1c41      	adds	r1, r0, #1
   b6b86:	683b      	ldr	r3, [r7, #0]
   b6b88:	4668      	mov	r0, sp
   b6b8a:	f7ff fe3f 	bl	b680c <vsnprintf>
  return write(str);
   b6b8e:	4669      	mov	r1, sp
   b6b90:	4628      	mov	r0, r5
   b6b92:	f7ff ff8f 	bl	b6ab4 <_ZN5Print5writeEPKc>
   b6b96:	4604      	mov	r4, r0
   b6b98:	46c5      	mov	sp, r8
   b6b9a:	e7e1      	b.n	b6b60 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6b9c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6b9c:	b510      	push	{r4, lr}
   b6b9e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6ba0:	f7ff fbe8 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6ba4:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6ba6:	6823      	ldr	r3, [r4, #0]
   b6ba8:	4620      	mov	r0, r4
   b6baa:	695b      	ldr	r3, [r3, #20]
   b6bac:	4798      	blx	r3
    if (c >= 0) return c;
   b6bae:	2800      	cmp	r0, #0
   b6bb0:	da08      	bge.n	b6bc4 <_ZN6Stream9timedReadEv+0x28>
   b6bb2:	f7ff fbdf 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6bb6:	68e3      	ldr	r3, [r4, #12]
   b6bb8:	1ac0      	subs	r0, r0, r3
   b6bba:	68a3      	ldr	r3, [r4, #8]
   b6bbc:	4298      	cmp	r0, r3
   b6bbe:	d3f2      	bcc.n	b6ba6 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6bc4:	bd10      	pop	{r4, pc}

000b6bc6 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b6bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6bca:	4607      	mov	r7, r0
   b6bcc:	460c      	mov	r4, r1
   b6bce:	188e      	adds	r6, r1, r2
   b6bd0:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b6bd2:	42b5      	cmp	r5, r6
   b6bd4:	eba5 0804 	sub.w	r8, r5, r4
   b6bd8:	d007      	beq.n	b6bea <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b6bda:	4638      	mov	r0, r7
   b6bdc:	f7ff ffde 	bl	b6b9c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b6be0:	1e03      	subs	r3, r0, #0
   b6be2:	db02      	blt.n	b6bea <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b6be4:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b6be8:	e7f3      	b.n	b6bd2 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b6bea:	4640      	mov	r0, r8
   b6bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6bf0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6bf0:	4b01      	ldr	r3, [pc, #4]	; (b6bf8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6bf2:	4a02      	ldr	r2, [pc, #8]	; (b6bfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6bf4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6bf6:	4770      	bx	lr
   b6bf8:	2003e6e0 	.word	0x2003e6e0
   b6bfc:	000b90a4 	.word	0x000b90a4

000b6c00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6c00:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6c02:	681a      	ldr	r2, [r3, #0]
   b6c04:	4b02      	ldr	r3, [pc, #8]	; (b6c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6c06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6c08:	4770      	bx	lr
   b6c0a:	bf00      	nop
   b6c0c:	2003e574 	.word	0x2003e574
   b6c10:	2003e6e4 	.word	0x2003e6e4

000b6c14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6c14:	2100      	movs	r1, #0
   b6c16:	f7ff bd4d 	b.w	b66b4 <system_delay_ms>
	...

000b6c1c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6c1c:	b510      	push	{r4, lr}
   b6c1e:	4b04      	ldr	r3, [pc, #16]	; (b6c30 <_ZN9TCPClientD1Ev+0x14>)
   b6c20:	6003      	str	r3, [r0, #0]
   b6c22:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b6c24:	6980      	ldr	r0, [r0, #24]
   b6c26:	b108      	cbz	r0, b6c2c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6c28:	f7ff ff12 	bl	b6a50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	bd10      	pop	{r4, pc}
   b6c30:	000b919c 	.word	0x000b919c

000b6c34 <_ZN9TCPClientD0Ev>:
   b6c34:	b510      	push	{r4, lr}
   b6c36:	4604      	mov	r4, r0
   b6c38:	f7ff fff0 	bl	b6c1c <_ZN9TCPClientD1Ev>
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	211c      	movs	r1, #28
   b6c40:	f7fd fa3d 	bl	b40be <_ZdlPvj>
   b6c44:	4620      	mov	r0, r4
   b6c46:	bd10      	pop	{r4, pc}

000b6c48 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6c48:	4b01      	ldr	r3, [pc, #4]	; (b6c50 <_GLOBAL__sub_I_RGB+0x8>)
   b6c4a:	2200      	movs	r2, #0
   b6c4c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6c4e:	4770      	bx	lr
   b6c50:	2003e6e8 	.word	0x2003e6e8

000b6c54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6c54:	4b01      	ldr	r3, [pc, #4]	; (b6c5c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6c56:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6c58:	4770      	bx	lr
   b6c5a:	bf00      	nop
   b6c5c:	2003e578 	.word	0x2003e578

000b6c60 <serialEventRun>:
{
   b6c60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6c62:	4b0b      	ldr	r3, [pc, #44]	; (b6c90 <serialEventRun+0x30>)
   b6c64:	b143      	cbz	r3, b6c78 <serialEventRun+0x18>
   b6c66:	f000 f97d 	bl	b6f64 <_Z16_fetch_usbserialv>
   b6c6a:	6803      	ldr	r3, [r0, #0]
   b6c6c:	691b      	ldr	r3, [r3, #16]
   b6c6e:	4798      	blx	r3
   b6c70:	2800      	cmp	r0, #0
   b6c72:	dd01      	ble.n	b6c78 <serialEventRun+0x18>
        serialEvent();
   b6c74:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6c78:	4b06      	ldr	r3, [pc, #24]	; (b6c94 <serialEventRun+0x34>)
   b6c7a:	b143      	cbz	r3, b6c8e <serialEventRun+0x2e>
   b6c7c:	f000 ff08 	bl	b7a90 <_Z22__fetch_global_Serial1v>
   b6c80:	6803      	ldr	r3, [r0, #0]
   b6c82:	691b      	ldr	r3, [r3, #16]
   b6c84:	4798      	blx	r3
   b6c86:	2800      	cmp	r0, #0
   b6c88:	dd01      	ble.n	b6c8e <serialEventRun+0x2e>
        serialEvent1();
   b6c8a:	f3af 8000 	nop.w
}
   b6c8e:	bd08      	pop	{r3, pc}
	...

000b6c98 <_post_loop>:
{
   b6c98:	b508      	push	{r3, lr}
	serialEventRun();
   b6c9a:	f7ff ffe1 	bl	b6c60 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6c9e:	f7ff fb69 	bl	b6374 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6ca2:	4b01      	ldr	r3, [pc, #4]	; (b6ca8 <_post_loop+0x10>)
   b6ca4:	6018      	str	r0, [r3, #0]
}
   b6ca6:	bd08      	pop	{r3, pc}
   b6ca8:	2003e740 	.word	0x2003e740

000b6cac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6cac:	4805      	ldr	r0, [pc, #20]	; (b6cc4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6cae:	4a06      	ldr	r2, [pc, #24]	; (b6cc8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6cb0:	4906      	ldr	r1, [pc, #24]	; (b6ccc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6cb2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6cb4:	1a12      	subs	r2, r2, r0
   b6cb6:	f001 f871 	bl	b7d9c <memcpy>
    __backup_sram_signature = signature;
   b6cba:	4b05      	ldr	r3, [pc, #20]	; (b6cd0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6cbc:	4a05      	ldr	r2, [pc, #20]	; (b6cd4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6cbe:	601a      	str	r2, [r3, #0]
}
   b6cc0:	bd08      	pop	{r3, pc}
   b6cc2:	bf00      	nop
   b6cc4:	2003f400 	.word	0x2003f400
   b6cc8:	2003f404 	.word	0x2003f404
   b6ccc:	000b959c 	.word	0x000b959c
   b6cd0:	2003f400 	.word	0x2003f400
   b6cd4:	9a271c1e 	.word	0x9a271c1e

000b6cd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6cd8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6cda:	2300      	movs	r3, #0
   b6cdc:	9300      	str	r3, [sp, #0]
   b6cde:	461a      	mov	r2, r3
   b6ce0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6ce4:	f7ff fd00 	bl	b66e8 <system_ctrl_set_result>
}
   b6ce8:	b003      	add	sp, #12
   b6cea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6cf0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6cf0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6cf2:	8843      	ldrh	r3, [r0, #2]
   b6cf4:	2b0a      	cmp	r3, #10
   b6cf6:	d008      	beq.n	b6d0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6cf8:	2b50      	cmp	r3, #80	; 0x50
   b6cfa:	d10b      	bne.n	b6d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6cfc:	4b09      	ldr	r3, [pc, #36]	; (b6d24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6cfe:	681b      	ldr	r3, [r3, #0]
   b6d00:	b14b      	cbz	r3, b6d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6d02:	b003      	add	sp, #12
   b6d04:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6d08:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6d0a:	f7ff ffe5 	bl	b6cd8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6d0e:	b003      	add	sp, #12
   b6d10:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6d14:	2300      	movs	r3, #0
   b6d16:	9300      	str	r3, [sp, #0]
   b6d18:	461a      	mov	r2, r3
   b6d1a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6d1e:	f7ff fce3 	bl	b66e8 <system_ctrl_set_result>
}
   b6d22:	e7f4      	b.n	b6d0e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6d24:	2003e6fc 	.word	0x2003e6fc

000b6d28 <module_user_init_hook>:
{
   b6d28:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6d2a:	4812      	ldr	r0, [pc, #72]	; (b6d74 <module_user_init_hook+0x4c>)
   b6d2c:	2100      	movs	r1, #0
   b6d2e:	f7ff fd85 	bl	b683c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6d32:	4b11      	ldr	r3, [pc, #68]	; (b6d78 <module_user_init_hook+0x50>)
   b6d34:	681a      	ldr	r2, [r3, #0]
   b6d36:	4b11      	ldr	r3, [pc, #68]	; (b6d7c <module_user_init_hook+0x54>)
   b6d38:	429a      	cmp	r2, r3
   b6d3a:	4b11      	ldr	r3, [pc, #68]	; (b6d80 <module_user_init_hook+0x58>)
   b6d3c:	bf0c      	ite	eq
   b6d3e:	2201      	moveq	r2, #1
   b6d40:	2200      	movne	r2, #0
   b6d42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6d44:	d001      	beq.n	b6d4a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6d46:	f7ff ffb1 	bl	b6cac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6d4a:	f7ff fb03 	bl	b6354 <HAL_RNG_GetRandomNumber>
   b6d4e:	4604      	mov	r4, r0
    srand(seed);
   b6d50:	f001 f83a 	bl	b7dc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6d54:	4b0b      	ldr	r3, [pc, #44]	; (b6d84 <module_user_init_hook+0x5c>)
   b6d56:	b113      	cbz	r3, b6d5e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6d58:	4620      	mov	r0, r4
   b6d5a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6d5e:	2100      	movs	r1, #0
   b6d60:	4808      	ldr	r0, [pc, #32]	; (b6d84 <module_user_init_hook+0x5c>)
   b6d62:	f7ff fd33 	bl	b67cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6d6a:	4807      	ldr	r0, [pc, #28]	; (b6d88 <module_user_init_hook+0x60>)
   b6d6c:	2100      	movs	r1, #0
   b6d6e:	f7ff bcb1 	b.w	b66d4 <system_ctrl_set_app_request_handler>
   b6d72:	bf00      	nop
   b6d74:	000b6c55 	.word	0x000b6c55
   b6d78:	2003f400 	.word	0x2003f400
   b6d7c:	9a271c1e 	.word	0x9a271c1e
   b6d80:	2003e6f8 	.word	0x2003e6f8
   b6d84:	00000000 	.word	0x00000000
   b6d88:	000b6cf1 	.word	0x000b6cf1

000b6d8c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d8c:	4770      	bx	lr

000b6d8e <_ZN9IPAddressD0Ev>:
   b6d8e:	b510      	push	{r4, lr}
   b6d90:	2118      	movs	r1, #24
   b6d92:	4604      	mov	r4, r0
   b6d94:	f7fd f993 	bl	b40be <_ZdlPvj>
   b6d98:	4620      	mov	r0, r4
   b6d9a:	bd10      	pop	{r4, pc}

000b6d9c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d9e:	7d03      	ldrb	r3, [r0, #20]
   b6da0:	2b06      	cmp	r3, #6
{
   b6da2:	b08d      	sub	sp, #52	; 0x34
   b6da4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6da6:	f100 0704 	add.w	r7, r0, #4
   b6daa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6dae:	d012      	beq.n	b6dd6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6db0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6db4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6db8:	220a      	movs	r2, #10
   b6dba:	4630      	mov	r0, r6
   b6dbc:	f7ff fe9f 	bl	b6afe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6dc0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6dc2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6dc4:	d019      	beq.n	b6dfa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6dc6:	2c00      	cmp	r4, #0
   b6dc8:	d0f4      	beq.n	b6db4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6dca:	212e      	movs	r1, #46	; 0x2e
   b6dcc:	4630      	mov	r0, r6
   b6dce:	f7ff fe87 	bl	b6ae0 <_ZN5Print5printEc>
   b6dd2:	4404      	add	r4, r0
   b6dd4:	e7ee      	b.n	b6db4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6dd6:	232f      	movs	r3, #47	; 0x2f
   b6dd8:	466a      	mov	r2, sp
   b6dda:	4639      	mov	r1, r7
   b6ddc:	200a      	movs	r0, #10
		buf[0] = 0;
   b6dde:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6de2:	f7ff fae7 	bl	b63b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6de6:	4668      	mov	r0, sp
   b6de8:	f7fd f922 	bl	b4030 <strlen>
   b6dec:	6833      	ldr	r3, [r6, #0]
   b6dee:	4602      	mov	r2, r0
   b6df0:	68db      	ldr	r3, [r3, #12]
   b6df2:	4669      	mov	r1, sp
   b6df4:	4630      	mov	r0, r6
   b6df6:	4798      	blx	r3
   b6df8:	4604      	mov	r4, r0
    }
    return n;
}
   b6dfa:	4620      	mov	r0, r4
   b6dfc:	b00d      	add	sp, #52	; 0x34
   b6dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e00 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6e00:	b510      	push	{r4, lr}
   b6e02:	4b05      	ldr	r3, [pc, #20]	; (b6e18 <_ZN9IPAddressC1Ev+0x18>)
   b6e04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6e06:	2211      	movs	r2, #17
   b6e08:	f840 3b04 	str.w	r3, [r0], #4
   b6e0c:	2100      	movs	r1, #0
   b6e0e:	f000 ffd3 	bl	b7db8 <memset>
}
   b6e12:	4620      	mov	r0, r4
   b6e14:	bd10      	pop	{r4, pc}
   b6e16:	bf00      	nop
   b6e18:	000b90cc 	.word	0x000b90cc

000b6e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6e1c:	4603      	mov	r3, r0
   b6e1e:	4a07      	ldr	r2, [pc, #28]	; (b6e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6e20:	b510      	push	{r4, lr}
   b6e22:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6e26:	f101 0210 	add.w	r2, r1, #16
   b6e2a:	f851 4b04 	ldr.w	r4, [r1], #4
   b6e2e:	f843 4b04 	str.w	r4, [r3], #4
   b6e32:	4291      	cmp	r1, r2
   b6e34:	d1f9      	bne.n	b6e2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6e36:	780a      	ldrb	r2, [r1, #0]
   b6e38:	701a      	strb	r2, [r3, #0]
}
   b6e3a:	bd10      	pop	{r4, pc}
   b6e3c:	000b90cc 	.word	0x000b90cc

000b6e40 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6e40:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6e42:	2b04      	cmp	r3, #4
   b6e44:	d104      	bne.n	b6e50 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6e46:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e48:	3800      	subs	r0, #0
   b6e4a:	bf18      	it	ne
   b6e4c:	2001      	movne	r0, #1
   b6e4e:	4770      	bx	lr
    } else if (version() == 6) {
   b6e50:	2b06      	cmp	r3, #6
   b6e52:	d107      	bne.n	b6e64 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e54:	6843      	ldr	r3, [r0, #4]
   b6e56:	b93b      	cbnz	r3, b6e68 <_ZNK9IPAddresscvbEv+0x28>
   b6e58:	6883      	ldr	r3, [r0, #8]
   b6e5a:	b92b      	cbnz	r3, b6e68 <_ZNK9IPAddresscvbEv+0x28>
   b6e5c:	68c3      	ldr	r3, [r0, #12]
   b6e5e:	b91b      	cbnz	r3, b6e68 <_ZNK9IPAddresscvbEv+0x28>
   b6e60:	6900      	ldr	r0, [r0, #16]
   b6e62:	e7f1      	b.n	b6e48 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6e64:	2000      	movs	r0, #0
   b6e66:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6e68:	2001      	movs	r0, #1
}
   b6e6a:	4770      	bx	lr

000b6e6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6e6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6e6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6e72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6e76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6e7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6e7e:	2304      	movs	r3, #4
   b6e80:	6041      	str	r1, [r0, #4]
   b6e82:	7503      	strb	r3, [r0, #20]
}
   b6e84:	bd10      	pop	{r4, pc}
	...

000b6e88 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e88:	b507      	push	{r0, r1, r2, lr}
   b6e8a:	4b06      	ldr	r3, [pc, #24]	; (b6ea4 <_ZN9IPAddressC1EPKh+0x1c>)
   b6e8c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e8e:	78cb      	ldrb	r3, [r1, #3]
   b6e90:	9300      	str	r3, [sp, #0]
   b6e92:	788b      	ldrb	r3, [r1, #2]
   b6e94:	784a      	ldrb	r2, [r1, #1]
   b6e96:	7809      	ldrb	r1, [r1, #0]
   b6e98:	f7ff ffe8 	bl	b6e6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e9c:	b003      	add	sp, #12
   b6e9e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6ea2:	bf00      	nop
   b6ea4:	000b90cc 	.word	0x000b90cc

000b6ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ea8:	7441      	strb	r1, [r0, #17]
}
   b6eaa:	4770      	bx	lr

000b6eac <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6eac:	4770      	bx	lr

000b6eae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6eae:	4770      	bx	lr

000b6eb0 <_ZN9USBSerial4readEv>:
{
   b6eb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6eb2:	2100      	movs	r1, #0
   b6eb4:	7c00      	ldrb	r0, [r0, #16]
   b6eb6:	f7ff fbcd 	bl	b6654 <HAL_USB_USART_Receive_Data>
}
   b6eba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ebe:	bd08      	pop	{r3, pc}

000b6ec0 <_ZN9USBSerial4peekEv>:
{
   b6ec0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6ec2:	2101      	movs	r1, #1
   b6ec4:	7c00      	ldrb	r0, [r0, #16]
   b6ec6:	f7ff fbc5 	bl	b6654 <HAL_USB_USART_Receive_Data>
}
   b6eca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6ece:	bd08      	pop	{r3, pc}

000b6ed0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6ed0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6ed2:	7c00      	ldrb	r0, [r0, #16]
   b6ed4:	f7ff fbb6 	bl	b6644 <HAL_USB_USART_Available_Data_For_Write>
}
   b6ed8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6edc:	bd08      	pop	{r3, pc}

000b6ede <_ZN9USBSerial9availableEv>:
{
   b6ede:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6ee0:	7c00      	ldrb	r0, [r0, #16]
   b6ee2:	f7ff fba7 	bl	b6634 <HAL_USB_USART_Available_Data>
}
   b6ee6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6eea:	bd08      	pop	{r3, pc}

000b6eec <_ZN9USBSerial5writeEh>:
{
   b6eec:	b513      	push	{r0, r1, r4, lr}
   b6eee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ef0:	7c00      	ldrb	r0, [r0, #16]
{
   b6ef2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ef4:	f7ff fba6 	bl	b6644 <HAL_USB_USART_Available_Data_For_Write>
   b6ef8:	2800      	cmp	r0, #0
   b6efa:	9901      	ldr	r1, [sp, #4]
   b6efc:	dc01      	bgt.n	b6f02 <_ZN9USBSerial5writeEh+0x16>
   b6efe:	7c60      	ldrb	r0, [r4, #17]
   b6f00:	b120      	cbz	r0, b6f0c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6f02:	7c20      	ldrb	r0, [r4, #16]
   b6f04:	f7ff fbae 	bl	b6664 <HAL_USB_USART_Send_Data>
   b6f08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6f0c:	b002      	add	sp, #8
   b6f0e:	bd10      	pop	{r4, pc}

000b6f10 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6f10:	7c00      	ldrb	r0, [r0, #16]
   b6f12:	f7ff bbaf 	b.w	b6674 <HAL_USB_USART_Flush_Data>

000b6f16 <_ZN9USBSerialD0Ev>:
   b6f16:	b510      	push	{r4, lr}
   b6f18:	2114      	movs	r1, #20
   b6f1a:	4604      	mov	r4, r0
   b6f1c:	f7fd f8cf 	bl	b40be <_ZdlPvj>
   b6f20:	4620      	mov	r0, r4
   b6f22:	bd10      	pop	{r4, pc}

000b6f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6f24:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f2a:	4604      	mov	r4, r0
   b6f2c:	4608      	mov	r0, r1
   b6f2e:	2100      	movs	r1, #0
   b6f30:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6f34:	4b04      	ldr	r3, [pc, #16]	; (b6f48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6f36:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6f38:	2301      	movs	r3, #1
  _serial = serial;
   b6f3a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6f3c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6f3e:	4611      	mov	r1, r2
   b6f40:	f7ff fb68 	bl	b6614 <HAL_USB_USART_Init>
}
   b6f44:	4620      	mov	r0, r4
   b6f46:	bd10      	pop	{r4, pc}
   b6f48:	000b90e0 	.word	0x000b90e0

000b6f4c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6f4c:	7c00      	ldrb	r0, [r0, #16]
   b6f4e:	2200      	movs	r2, #0
   b6f50:	f7ff bb68 	b.w	b6624 <HAL_USB_USART_Begin>

000b6f54 <_Z19acquireSerialBufferv>:
{
   b6f54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6f56:	2214      	movs	r2, #20
{
   b6f58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6f5a:	2100      	movs	r1, #0
   b6f5c:	f000 ff2c 	bl	b7db8 <memset>
}
   b6f60:	4620      	mov	r0, r4
   b6f62:	bd10      	pop	{r4, pc}

000b6f64 <_Z16_fetch_usbserialv>:
{
   b6f64:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6f66:	4c0f      	ldr	r4, [pc, #60]	; (b6fa4 <_Z16_fetch_usbserialv+0x40>)
{
   b6f68:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6f6a:	a803      	add	r0, sp, #12
   b6f6c:	f7ff fff2 	bl	b6f54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6f70:	7821      	ldrb	r1, [r4, #0]
   b6f72:	f3bf 8f5b 	dmb	ish
   b6f76:	f011 0101 	ands.w	r1, r1, #1
   b6f7a:	d10f      	bne.n	b6f9c <_Z16_fetch_usbserialv+0x38>
   b6f7c:	4620      	mov	r0, r4
   b6f7e:	9101      	str	r1, [sp, #4]
   b6f80:	f7fd f8ac 	bl	b40dc <__cxa_guard_acquire>
   b6f84:	9901      	ldr	r1, [sp, #4]
   b6f86:	b148      	cbz	r0, b6f9c <_Z16_fetch_usbserialv+0x38>
   b6f88:	aa03      	add	r2, sp, #12
   b6f8a:	4807      	ldr	r0, [pc, #28]	; (b6fa8 <_Z16_fetch_usbserialv+0x44>)
   b6f8c:	f7ff ffca 	bl	b6f24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6f90:	4620      	mov	r0, r4
   b6f92:	f7fd f8a8 	bl	b40e6 <__cxa_guard_release>
   b6f96:	4805      	ldr	r0, [pc, #20]	; (b6fac <_Z16_fetch_usbserialv+0x48>)
   b6f98:	f000 fef2 	bl	b7d80 <atexit>
	return _usbserial;
}
   b6f9c:	4802      	ldr	r0, [pc, #8]	; (b6fa8 <_Z16_fetch_usbserialv+0x44>)
   b6f9e:	b008      	add	sp, #32
   b6fa0:	bd10      	pop	{r4, pc}
   b6fa2:	bf00      	nop
   b6fa4:	2003e700 	.word	0x2003e700
   b6fa8:	2003e704 	.word	0x2003e704
   b6fac:	000b6ead 	.word	0x000b6ead

000b6fb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6fb0:	4770      	bx	lr

000b6fb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fb2:	7441      	strb	r1, [r0, #17]
}
   b6fb4:	4770      	bx	lr

000b6fb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6fb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6fb8:	7c00      	ldrb	r0, [r0, #16]
   b6fba:	f7ff fa4b 	bl	b6454 <hal_usart_available_data_for_write>
}
   b6fbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fc2:	bd08      	pop	{r3, pc}

000b6fc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6fc4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6fc6:	7c00      	ldrb	r0, [r0, #16]
   b6fc8:	f7ff fa1c 	bl	b6404 <hal_usart_available>
}
   b6fcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fd0:	bd08      	pop	{r3, pc}

000b6fd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6fd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6fd4:	7c00      	ldrb	r0, [r0, #16]
   b6fd6:	f7ff fa25 	bl	b6424 <hal_usart_peek>
}
   b6fda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fde:	bd08      	pop	{r3, pc}

000b6fe0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6fe0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6fe2:	7c00      	ldrb	r0, [r0, #16]
   b6fe4:	f7ff fa16 	bl	b6414 <hal_usart_read>
}
   b6fe8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fec:	bd08      	pop	{r3, pc}

000b6fee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6fee:	7c00      	ldrb	r0, [r0, #16]
   b6ff0:	f7ff ba20 	b.w	b6434 <hal_usart_flush>

000b6ff4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ff6:	7c45      	ldrb	r5, [r0, #17]
{
   b6ff8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ffa:	b12d      	cbz	r5, b7008 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6ffc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6ffe:	b003      	add	sp, #12
   b7000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7004:	f7ff b9f6 	b.w	b63f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7008:	7c00      	ldrb	r0, [r0, #16]
   b700a:	9101      	str	r1, [sp, #4]
   b700c:	f7ff fa22 	bl	b6454 <hal_usart_available_data_for_write>
   b7010:	2800      	cmp	r0, #0
   b7012:	9901      	ldr	r1, [sp, #4]
   b7014:	dcf2      	bgt.n	b6ffc <_ZN11USARTSerial5writeEh+0x8>
}
   b7016:	4628      	mov	r0, r5
   b7018:	b003      	add	sp, #12
   b701a:	bd30      	pop	{r4, r5, pc}

000b701c <_ZN11USARTSerialD0Ev>:
   b701c:	b510      	push	{r4, lr}
   b701e:	2114      	movs	r1, #20
   b7020:	4604      	mov	r4, r0
   b7022:	f7fd f84c 	bl	b40be <_ZdlPvj>
   b7026:	4620      	mov	r0, r4
   b7028:	bd10      	pop	{r4, pc}
	...

000b702c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b702c:	b510      	push	{r4, lr}
   b702e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7032:	4604      	mov	r4, r0
   b7034:	4608      	mov	r0, r1
   b7036:	4611      	mov	r1, r2
   b7038:	2200      	movs	r2, #0
   b703a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b703e:	4b04      	ldr	r3, [pc, #16]	; (b7050 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7040:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7042:	2301      	movs	r3, #1
  _serial = serial;
   b7044:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7046:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7048:	f7ff fa0c 	bl	b6464 <hal_usart_init_ex>
}
   b704c:	4620      	mov	r0, r4
   b704e:	bd10      	pop	{r4, pc}
   b7050:	000b9110 	.word	0x000b9110

000b7054 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7054:	4770      	bx	lr

000b7056 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7058:	4606      	mov	r6, r0
   b705a:	4615      	mov	r5, r2
   b705c:	460c      	mov	r4, r1
   b705e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7060:	42bc      	cmp	r4, r7
   b7062:	d006      	beq.n	b7072 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7064:	6833      	ldr	r3, [r6, #0]
   b7066:	f814 1b01 	ldrb.w	r1, [r4], #1
   b706a:	689b      	ldr	r3, [r3, #8]
   b706c:	4630      	mov	r0, r6
   b706e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7070:	e7f6      	b.n	b7060 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7072:	4628      	mov	r0, r5
   b7074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7076 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7076:	7c00      	ldrb	r0, [r0, #16]
   b7078:	2200      	movs	r2, #0
   b707a:	f7ff ba1b 	b.w	b64b4 <hal_i2c_write>

000b707e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b707e:	7c00      	ldrb	r0, [r0, #16]
   b7080:	2100      	movs	r1, #0
   b7082:	f7ff ba1f 	b.w	b64c4 <hal_i2c_available>

000b7086 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7086:	7c00      	ldrb	r0, [r0, #16]
   b7088:	2100      	movs	r1, #0
   b708a:	f7ff ba23 	b.w	b64d4 <hal_i2c_read>

000b708e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b708e:	7c00      	ldrb	r0, [r0, #16]
   b7090:	2100      	movs	r1, #0
   b7092:	f7ff ba27 	b.w	b64e4 <hal_i2c_peek>

000b7096 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7096:	7c00      	ldrb	r0, [r0, #16]
   b7098:	2100      	movs	r1, #0
   b709a:	f7ff ba2b 	b.w	b64f4 <hal_i2c_flush>

000b709e <_ZN7TwoWireD0Ev>:
   b709e:	b510      	push	{r4, lr}
   b70a0:	2114      	movs	r1, #20
   b70a2:	4604      	mov	r4, r0
   b70a4:	f7fd f80b 	bl	b40be <_ZdlPvj>
   b70a8:	4620      	mov	r0, r4
   b70aa:	bd10      	pop	{r4, pc}

000b70ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70ac:	b538      	push	{r3, r4, r5, lr}
   b70ae:	4604      	mov	r4, r0
   b70b0:	4615      	mov	r5, r2
   b70b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70b6:	2200      	movs	r2, #0
   b70b8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b70bc:	4b09      	ldr	r3, [pc, #36]	; (b70e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b70be:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b70c0:	4608      	mov	r0, r1
   b70c2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b70c4:	4629      	mov	r1, r5
   b70c6:	f7ff fa25 	bl	b6514 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70ca:	30bf      	adds	r0, #191	; 0xbf
   b70cc:	d108      	bne.n	b70e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b70ce:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b70d0:	07db      	lsls	r3, r3, #31
   b70d2:	d505      	bpl.n	b70e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b70d4:	6868      	ldr	r0, [r5, #4]
   b70d6:	f7ff fb89 	bl	b67ec <free>
    free(conf.tx_buffer);
   b70da:	68e8      	ldr	r0, [r5, #12]
   b70dc:	f7ff fb86 	bl	b67ec <free>
}
   b70e0:	4620      	mov	r0, r4
   b70e2:	bd38      	pop	{r3, r4, r5, pc}
   b70e4:	000b9140 	.word	0x000b9140

000b70e8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b70e8:	7c00      	ldrb	r0, [r0, #16]
   b70ea:	2200      	movs	r2, #0
   b70ec:	f7ff b9c2 	b.w	b6474 <hal_i2c_set_speed>

000b70f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b70f0:	2300      	movs	r3, #0
   b70f2:	7c00      	ldrb	r0, [r0, #16]
   b70f4:	461a      	mov	r2, r3
   b70f6:	4619      	mov	r1, r3
   b70f8:	f7ff b9c4 	b.w	b6484 <hal_i2c_begin>

000b70fc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b70fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b70fe:	2200      	movs	r2, #0
   b7100:	2314      	movs	r3, #20
   b7102:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b7106:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b710a:	780b      	ldrb	r3, [r1, #0]
   b710c:	f88d 3008 	strb.w	r3, [sp, #8]
   b7110:	684b      	ldr	r3, [r1, #4]
   b7112:	9303      	str	r3, [sp, #12]
   b7114:	68cb      	ldr	r3, [r1, #12]
   b7116:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7118:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b711a:	7a0b      	ldrb	r3, [r1, #8]
   b711c:	9305      	str	r3, [sp, #20]
   b711e:	a901      	add	r1, sp, #4
   b7120:	f7ff fa00 	bl	b6524 <hal_i2c_request_ex>
}
   b7124:	b007      	add	sp, #28
   b7126:	f85d fb04 	ldr.w	pc, [sp], #4

000b712a <_ZN7TwoWire11requestFromEhjh>:
{
   b712a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b712c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b712e:	f88d 1000 	strb.w	r1, [sp]
   b7132:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7136:	9103      	str	r1, [sp, #12]
   b7138:	bf18      	it	ne
   b713a:	2301      	movne	r3, #1
   b713c:	4669      	mov	r1, sp
    size_ = size;
   b713e:	9201      	str	r2, [sp, #4]
   b7140:	f88d 3008 	strb.w	r3, [sp, #8]
   b7144:	f7ff ffda 	bl	b70fc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7148:	b005      	add	sp, #20
   b714a:	f85d fb04 	ldr.w	pc, [sp], #4

000b714e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b714e:	2301      	movs	r3, #1
   b7150:	f7ff bfeb 	b.w	b712a <_ZN7TwoWire11requestFromEhjh>

000b7154 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7154:	7c00      	ldrb	r0, [r0, #16]
   b7156:	2200      	movs	r2, #0
   b7158:	f7ff b99c 	b.w	b6494 <hal_i2c_begin_transmission>

000b715c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b715c:	b2c9      	uxtb	r1, r1
   b715e:	f7ff bff9 	b.w	b7154 <_ZN7TwoWire17beginTransmissionEh>

000b7162 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7162:	7c00      	ldrb	r0, [r0, #16]
   b7164:	2200      	movs	r2, #0
   b7166:	f7ff b99d 	b.w	b64a4 <hal_i2c_end_transmission>

000b716a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b716a:	2101      	movs	r1, #1
   b716c:	f7ff bff9 	b.w	b7162 <_ZN7TwoWire15endTransmissionEh>

000b7170 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7170:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7172:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7174:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7178:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b717a:	2201      	movs	r2, #1
   b717c:	f04f 33ff 	mov.w	r3, #4294967295
   b7180:	f10d 0107 	add.w	r1, sp, #7
   b7184:	47a0      	blx	r4
}
   b7186:	b002      	add	sp, #8
   b7188:	bd10      	pop	{r4, pc}

000b718a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b718a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b718c:	6803      	ldr	r3, [r0, #0]
   b718e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7190:	f04f 33ff 	mov.w	r3, #4294967295
   b7194:	46a4      	mov	ip, r4
}
   b7196:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b719a:	4760      	bx	ip

000b719c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b719c:	b513      	push	{r0, r1, r4, lr}
   b719e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b71a0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b71a2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b71a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b71a8:	f10d 0107 	add.w	r1, sp, #7
   b71ac:	2201      	movs	r2, #1
   b71ae:	47a0      	blx	r4
}
   b71b0:	b002      	add	sp, #8
   b71b2:	bd10      	pop	{r4, pc}

000b71b4 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b71b4:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b71b6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b71b8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b71c0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b71c2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b71c4:	d008      	beq.n	b71d8 <_ZN9TCPClient4readEv+0x24>
   b71c6:	6963      	ldr	r3, [r4, #20]
   b71c8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b71cc:	1c51      	adds	r1, r2, #1
   b71ce:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b71d2:	4413      	add	r3, r2
   b71d4:	7918      	ldrb	r0, [r3, #4]
}
   b71d6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b71d8:	6803      	ldr	r3, [r0, #0]
   b71da:	691b      	ldr	r3, [r3, #16]
   b71dc:	4798      	blx	r3
   b71de:	2800      	cmp	r0, #0
   b71e0:	d1f1      	bne.n	b71c6 <_ZN9TCPClient4readEv+0x12>
   b71e2:	f04f 30ff 	mov.w	r0, #4294967295
   b71e6:	e7f6      	b.n	b71d6 <_ZN9TCPClient4readEv+0x22>

000b71e8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b71e8:	4770      	bx	lr

000b71ea <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b71ea:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b71ec:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b71ee:	43c0      	mvns	r0, r0
   b71f0:	0fc0      	lsrs	r0, r0, #31
   b71f2:	4770      	bx	lr

000b71f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b71f4:	4770      	bx	lr
	...

000b71f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b71f8:	4b06      	ldr	r3, [pc, #24]	; (b7214 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b71fa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b71fc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b71fe:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7202:	d005      	beq.n	b7210 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7204:	4608      	mov	r0, r1
   b7206:	f000 fca9 	bl	b7b5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b720a:	2800      	cmp	r0, #0
   b720c:	bf08      	it	eq
   b720e:	2400      	moveq	r4, #0
      }
   b7210:	4620      	mov	r0, r4
   b7212:	bd10      	pop	{r4, pc}
   b7214:	000b909c 	.word	0x000b909c

000b7218 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7218:	b510      	push	{r4, lr}
   b721a:	21ac      	movs	r1, #172	; 0xac
   b721c:	4604      	mov	r4, r0
   b721e:	f7fc ff4e 	bl	b40be <_ZdlPvj>
   b7222:	4620      	mov	r0, r4
   b7224:	bd10      	pop	{r4, pc}

000b7226 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7226:	21ac      	movs	r1, #172	; 0xac
   b7228:	f7fc bf49 	b.w	b40be <_ZdlPvj>

000b722c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7230:	f04f 0800 	mov.w	r8, #0
   b7234:	b086      	sub	sp, #24
   b7236:	461c      	mov	r4, r3
   b7238:	f8c0 8004 	str.w	r8, [r0, #4]
   b723c:	4605      	mov	r5, r0
   b723e:	460e      	mov	r6, r1
   b7240:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7242:	4641      	mov	r1, r8
   b7244:	2210      	movs	r2, #16
   b7246:	a802      	add	r0, sp, #8
   b7248:	f000 fdb6 	bl	b7db8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b724c:	1c63      	adds	r3, r4, #1
   b724e:	d009      	beq.n	b7264 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7254:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7258:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b725c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7260:	435c      	muls	r4, r3
   b7262:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7264:	6968      	ldr	r0, [r5, #20]
   b7266:	2310      	movs	r3, #16
   b7268:	9300      	str	r3, [sp, #0]
   b726a:	6800      	ldr	r0, [r0, #0]
   b726c:	ab02      	add	r3, sp, #8
   b726e:	f241 0205 	movw	r2, #4101	; 0x1005
   b7272:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7276:	f7ff f95d 	bl	b6534 <sock_setsockopt>
    if (ret < 0) {
   b727a:	2800      	cmp	r0, #0
   b727c:	da07      	bge.n	b728e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b727e:	f7ff facd 	bl	b681c <__errno>
   b7282:	6803      	ldr	r3, [r0, #0]
   b7284:	606b      	str	r3, [r5, #4]
        return 0;
   b7286:	2000      	movs	r0, #0
}
   b7288:	b006      	add	sp, #24
   b728a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b728e:	6968      	ldr	r0, [r5, #20]
   b7290:	2300      	movs	r3, #0
   b7292:	6800      	ldr	r0, [r0, #0]
   b7294:	463a      	mov	r2, r7
   b7296:	4631      	mov	r1, r6
   b7298:	f7ff f96c 	bl	b6574 <sock_send>
    if (ret < 0) {
   b729c:	1e03      	subs	r3, r0, #0
   b729e:	dbee      	blt.n	b727e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b72a0:	4618      	mov	r0, r3
   b72a2:	e7f1      	b.n	b7288 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b72a4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b72a4:	b530      	push	{r4, r5, lr}
   b72a6:	b087      	sub	sp, #28
   b72a8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b72aa:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b72ac:	4668      	mov	r0, sp
   b72ae:	f7ff fdeb 	bl	b6e88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b72b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72b4:	3404      	adds	r4, #4
   b72b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72b8:	682b      	ldr	r3, [r5, #0]
   b72ba:	7023      	strb	r3, [r4, #0]
    }
   b72bc:	b007      	add	sp, #28
   b72be:	bd30      	pop	{r4, r5, pc}

000b72c0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b72c0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b72c2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b72c4:	4b05      	ldr	r3, [pc, #20]	; (b72dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b72c6:	4604      	mov	r4, r0
   b72c8:	358c      	adds	r5, #140	; 0x8c
   b72ca:	f844 3b04 	str.w	r3, [r4], #4
   b72ce:	4606      	mov	r6, r0
   b72d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b72d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72d4:	682b      	ldr	r3, [r5, #0]
   b72d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b72d8:	4630      	mov	r0, r6
   b72da:	bd70      	pop	{r4, r5, r6, pc}
   b72dc:	000b90cc 	.word	0x000b90cc

000b72e0 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b72e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b72e4:	4698      	mov	r8, r3
    stop();
   b72e6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b72e8:	b093      	sub	sp, #76	; 0x4c
   b72ea:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b72ec:	2400      	movs	r4, #0
    stop();
   b72ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b72f0:	4606      	mov	r6, r0
   b72f2:	4617      	mov	r7, r2
    stop();
   b72f4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b72f6:	4628      	mov	r0, r5
   b72f8:	466b      	mov	r3, sp
   b72fa:	4622      	mov	r2, r4
   b72fc:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b72fe:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7300:	f7fe ffd8 	bl	b62b4 <netdb_getaddrinfo>
   b7304:	4605      	mov	r5, r0
   b7306:	2800      	cmp	r0, #0
   b7308:	d163      	bne.n	b73d2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b730a:	9b00      	ldr	r3, [sp, #0]
   b730c:	2b00      	cmp	r3, #0
   b730e:	d04b      	beq.n	b73a8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7310:	695b      	ldr	r3, [r3, #20]
   b7312:	2b00      	cmp	r3, #0
   b7314:	d048      	beq.n	b73a8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7316:	a806      	add	r0, sp, #24
   b7318:	f7ff fd72 	bl	b6e00 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b731c:	9b00      	ldr	r3, [sp, #0]
   b731e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7320:	7863      	ldrb	r3, [r4, #1]
   b7322:	2b02      	cmp	r3, #2
   b7324:	d104      	bne.n	b7330 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7326:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7328:	a806      	add	r0, sp, #24
   b732a:	f7ff ffbb 	bl	b72a4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b732e:	e026      	b.n	b737e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7330:	2b0a      	cmp	r3, #10
   b7332:	d124      	bne.n	b737e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7334:	2211      	movs	r2, #17
   b7336:	4629      	mov	r1, r5
   b7338:	a801      	add	r0, sp, #4
   b733a:	f000 fd3d 	bl	b7db8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b733e:	68a3      	ldr	r3, [r4, #8]
   b7340:	2b00      	cmp	r3, #0
   b7342:	d038      	beq.n	b73b6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7344:	f104 0308 	add.w	r3, r4, #8
   b7348:	f10d 0c04 	add.w	ip, sp, #4
   b734c:	3418      	adds	r4, #24
   b734e:	6818      	ldr	r0, [r3, #0]
   b7350:	6859      	ldr	r1, [r3, #4]
   b7352:	4662      	mov	r2, ip
   b7354:	c203      	stmia	r2!, {r0, r1}
   b7356:	3308      	adds	r3, #8
   b7358:	42a3      	cmp	r3, r4
   b735a:	4694      	mov	ip, r2
   b735c:	d1f7      	bne.n	b734e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b735e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7360:	a901      	add	r1, sp, #4
   b7362:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7364:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7368:	f7ff fd58 	bl	b6e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b736c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7370:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7374:	ac07      	add	r4, sp, #28
   b7376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7378:	f8dc 3000 	ldr.w	r3, [ip]
   b737c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b737e:	a806      	add	r0, sp, #24
   b7380:	f7ff fd5e 	bl	b6e40 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7384:	b180      	cbz	r0, b73a8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7386:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7388:	ad07      	add	r5, sp, #28
   b738a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b738e:	4b12      	ldr	r3, [pc, #72]	; (b73d8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7390:	930c      	str	r3, [sp, #48]	; 0x30
   b7392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7394:	ac0d      	add	r4, sp, #52	; 0x34
   b7396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7398:	682b      	ldr	r3, [r5, #0]
   b739a:	7023      	strb	r3, [r4, #0]
   b739c:	463a      	mov	r2, r7
   b739e:	4643      	mov	r3, r8
   b73a0:	a90c      	add	r1, sp, #48	; 0x30
   b73a2:	4630      	mov	r0, r6
   b73a4:	47c8      	blx	r9
   b73a6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b73a8:	9800      	ldr	r0, [sp, #0]
   b73aa:	f7fe ff7b 	bl	b62a4 <netdb_freeaddrinfo>
}
   b73ae:	4628      	mov	r0, r5
   b73b0:	b013      	add	sp, #76	; 0x4c
   b73b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b73b6:	68e3      	ldr	r3, [r4, #12]
   b73b8:	2b00      	cmp	r3, #0
   b73ba:	d1c3      	bne.n	b7344 <_ZN9TCPClient7connectEPKctm+0x64>
   b73bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b73c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b73c4:	f7fe fffe 	bl	b63c4 <inet_htonl>
   b73c8:	4581      	cmp	r9, r0
   b73ca:	d1bb      	bne.n	b7344 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b73cc:	f104 0114 	add.w	r1, r4, #20
   b73d0:	e7aa      	b.n	b7328 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b73d2:	4625      	mov	r5, r4
   b73d4:	e7e8      	b.n	b73a8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b73d6:	bf00      	nop
   b73d8:	000b90cc 	.word	0x000b90cc

000b73dc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b73dc:	b538      	push	{r3, r4, r5, lr}
   b73de:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b73e0:	681a      	ldr	r2, [r3, #0]
   b73e2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b73e4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b73e6:	da10      	bge.n	b740a <_ZN9TCPClient9connectedEv+0x2e>
   b73e8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73ec:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b73f0:	429a      	cmp	r2, r3
   b73f2:	d10a      	bne.n	b740a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b73f4:	6803      	ldr	r3, [r0, #0]
   b73f6:	691b      	ldr	r3, [r3, #16]
   b73f8:	4798      	blx	r3
        if (!rv) {
   b73fa:	4604      	mov	r4, r0
   b73fc:	b928      	cbnz	r0, b740a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b73fe:	682b      	ldr	r3, [r5, #0]
   b7400:	4628      	mov	r0, r5
   b7402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7404:	4798      	blx	r3
        rv = available();
   b7406:	4620      	mov	r0, r4
}
   b7408:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b740a:	2001      	movs	r0, #1
   b740c:	e7fc      	b.n	b7408 <_ZN9TCPClient9connectedEv+0x2c>

000b740e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b740e:	b510      	push	{r4, lr}
   b7410:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7412:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7416:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b741a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b741c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b741e:	d005      	beq.n	b742c <_ZN9TCPClient4peekEv+0x1e>
   b7420:	6963      	ldr	r3, [r4, #20]
   b7422:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7426:	4413      	add	r3, r2
   b7428:	7918      	ldrb	r0, [r3, #4]
}
   b742a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b742c:	6803      	ldr	r3, [r0, #0]
   b742e:	691b      	ldr	r3, [r3, #16]
   b7430:	4798      	blx	r3
   b7432:	2800      	cmp	r0, #0
   b7434:	d1f4      	bne.n	b7420 <_ZN9TCPClient4peekEv+0x12>
   b7436:	f04f 30ff 	mov.w	r0, #4294967295
   b743a:	e7f6      	b.n	b742a <_ZN9TCPClient4peekEv+0x1c>

000b743c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b743e:	6943      	ldr	r3, [r0, #20]
   b7440:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7442:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7446:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b744a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b744c:	4605      	mov	r5, r0
   b744e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7450:	d016      	beq.n	b7480 <_ZN9TCPClient4readEPhj+0x44>
   b7452:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7454:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7458:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b745c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b745e:	42bc      	cmp	r4, r7
   b7460:	bf28      	it	cs
   b7462:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7464:	3304      	adds	r3, #4
   b7466:	4622      	mov	r2, r4
   b7468:	4419      	add	r1, r3
   b746a:	4630      	mov	r0, r6
   b746c:	f000 fc96 	bl	b7d9c <memcpy>
   b7470:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7472:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7476:	4423      	add	r3, r4
   b7478:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b747c:	4620      	mov	r0, r4
   b747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7480:	6803      	ldr	r3, [r0, #0]
   b7482:	691b      	ldr	r3, [r3, #16]
   b7484:	4798      	blx	r3
   b7486:	2800      	cmp	r0, #0
   b7488:	d1e3      	bne.n	b7452 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b748a:	f04f 34ff 	mov.w	r4, #4294967295
   b748e:	e7f5      	b.n	b747c <_ZN9TCPClient4readEPhj+0x40>

000b7490 <_ZN9TCPClient12flush_bufferEv>:
   b7490:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7492:	2300      	movs	r3, #0
   b7494:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7498:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b749a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b749e:	4770      	bx	lr

000b74a0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74a4:	461f      	mov	r7, r3
    stop();
   b74a6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74a8:	460c      	mov	r4, r1
    stop();
   b74aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b74ac:	b08a      	sub	sp, #40	; 0x28
   b74ae:	4605      	mov	r5, r0
   b74b0:	4616      	mov	r6, r2
    stop();
   b74b2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b74b4:	7d23      	ldrb	r3, [r4, #20]
   b74b6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b74ba:	2b04      	cmp	r3, #4
   b74bc:	bf0c      	ite	eq
   b74be:	2002      	moveq	r0, #2
   b74c0:	200a      	movne	r0, #10
   b74c2:	2206      	movs	r2, #6
   b74c4:	2101      	movs	r1, #1
   b74c6:	f7ff f85d 	bl	b6584 <sock_socket>
   b74ca:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b74ce:	696b      	ldr	r3, [r5, #20]
   b74d0:	681b      	ldr	r3, [r3, #0]
   b74d2:	2b00      	cmp	r3, #0
   b74d4:	da08      	bge.n	b74e8 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b74d6:	682b      	ldr	r3, [r5, #0]
   b74d8:	4628      	mov	r0, r5
   b74da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b74dc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b74de:	4798      	blx	r3
}
   b74e0:	4620      	mov	r0, r4
   b74e2:	b00a      	add	sp, #40	; 0x28
   b74e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b74e8:	4628      	mov	r0, r5
   b74ea:	f7ff ffd1 	bl	b7490 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b74ee:	b1b7      	cbz	r7, b751e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b74f0:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b74f2:	a903      	add	r1, sp, #12
   b74f4:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b74f6:	9303      	str	r3, [sp, #12]
   b74f8:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b74fc:	f7fe ff22 	bl	b6344 <if_index_to_name>
   b7500:	2800      	cmp	r0, #0
   b7502:	d1e8      	bne.n	b74d6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7504:	6968      	ldr	r0, [r5, #20]
   b7506:	2306      	movs	r3, #6
   b7508:	9300      	str	r3, [sp, #0]
   b750a:	6800      	ldr	r0, [r0, #0]
   b750c:	ab03      	add	r3, sp, #12
   b750e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7512:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7516:	f7ff f80d 	bl	b6534 <sock_setsockopt>
   b751a:	2800      	cmp	r0, #0
   b751c:	d1db      	bne.n	b74d6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b751e:	221c      	movs	r2, #28
   b7520:	2100      	movs	r1, #0
   b7522:	a803      	add	r0, sp, #12
   b7524:	f000 fc48 	bl	b7db8 <memset>
    if (ip.version() == 4) {
   b7528:	7d23      	ldrb	r3, [r4, #20]
   b752a:	2b04      	cmp	r3, #4
   b752c:	d11d      	bne.n	b756a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b752e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7532:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7534:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7538:	f7fe ff54 	bl	b63e4 <inet_htons>
   b753c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7540:	6860      	ldr	r0, [r4, #4]
   b7542:	f7fe ff3f 	bl	b63c4 <inet_htonl>
   b7546:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7548:	696b      	ldr	r3, [r5, #20]
   b754a:	221c      	movs	r2, #28
   b754c:	6818      	ldr	r0, [r3, #0]
   b754e:	a903      	add	r1, sp, #12
   b7550:	f7ff f800 	bl	b6554 <sock_connect>
   b7554:	2800      	cmp	r0, #0
   b7556:	d1be      	bne.n	b74d6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7558:	3404      	adds	r4, #4
   b755a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b755c:	696d      	ldr	r5, [r5, #20]
   b755e:	358c      	adds	r5, #140	; 0x8c
   b7560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7562:	6823      	ldr	r3, [r4, #0]
   b7564:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7566:	2401      	movs	r4, #1
   b7568:	e7ba      	b.n	b74e0 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b756a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b756e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7570:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7574:	f7fe ff36 	bl	b63e4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7578:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b757a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b757e:	1d23      	adds	r3, r4, #4
   b7580:	f104 0714 	add.w	r7, r4, #20
   b7584:	6818      	ldr	r0, [r3, #0]
   b7586:	6859      	ldr	r1, [r3, #4]
   b7588:	4632      	mov	r2, r6
   b758a:	c203      	stmia	r2!, {r0, r1}
   b758c:	3308      	adds	r3, #8
   b758e:	42bb      	cmp	r3, r7
   b7590:	4616      	mov	r6, r2
   b7592:	d1f7      	bne.n	b7584 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7594:	e7d8      	b.n	b7548 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7598 <_ZN9TCPClient9availableEv>:
{
   b7598:	b530      	push	{r4, r5, lr}
   b759a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b759c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b75a0:	b08b      	sub	sp, #44	; 0x2c
   b75a2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b75a4:	b12b      	cbz	r3, b75b2 <_ZN9TCPClient9availableEv+0x1a>
   b75a6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b75aa:	429a      	cmp	r2, r3
   b75ac:	d101      	bne.n	b75b2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b75ae:	f7ff ff6f 	bl	b7490 <_ZN9TCPClient12flush_bufferEv>
   b75b2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b75b4:	6808      	ldr	r0, [r1, #0]
   b75b6:	2800      	cmp	r0, #0
   b75b8:	db18      	blt.n	b75ec <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b75ba:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b75be:	2d7f      	cmp	r5, #127	; 0x7f
   b75c0:	d814      	bhi.n	b75ec <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b75c2:	3104      	adds	r1, #4
   b75c4:	2308      	movs	r3, #8
   b75c6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b75ca:	4429      	add	r1, r5
   b75cc:	f7fe ffca 	bl	b6564 <sock_recv>
            if (ret > 0) {
   b75d0:	2800      	cmp	r0, #0
   b75d2:	dd13      	ble.n	b75fc <_ZN9TCPClient9availableEv+0x64>
   b75d4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b75d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75da:	b90a      	cbnz	r2, b75e0 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b75dc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b75e0:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b75e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75e6:	4410      	add	r0, r2
   b75e8:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b75ec:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b75ee:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b75f2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b75f6:	1ac0      	subs	r0, r0, r3
   b75f8:	b00b      	add	sp, #44	; 0x2c
   b75fa:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b75fc:	f7ff f90e 	bl	b681c <__errno>
   b7600:	6803      	ldr	r3, [r0, #0]
   b7602:	2b0b      	cmp	r3, #11
   b7604:	d0f2      	beq.n	b75ec <_ZN9TCPClient9availableEv+0x54>
   b7606:	f7ff f909 	bl	b681c <__errno>
   b760a:	6803      	ldr	r3, [r0, #0]
   b760c:	2b0b      	cmp	r3, #11
   b760e:	d0ed      	beq.n	b75ec <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7610:	2320      	movs	r3, #32
   b7612:	2500      	movs	r5, #0
   b7614:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7618:	f7ff f900 	bl	b681c <__errno>
   b761c:	6803      	ldr	r3, [r0, #0]
   b761e:	9301      	str	r3, [sp, #4]
   b7620:	4b08      	ldr	r3, [pc, #32]	; (b7644 <_ZN9TCPClient9availableEv+0xac>)
   b7622:	4909      	ldr	r1, [pc, #36]	; (b7648 <_ZN9TCPClient9availableEv+0xb0>)
   b7624:	9300      	str	r3, [sp, #0]
   b7626:	aa02      	add	r2, sp, #8
   b7628:	462b      	mov	r3, r5
   b762a:	2032      	movs	r0, #50	; 0x32
   b762c:	f7ff f832 	bl	b6694 <log_message>
                    sock_close(d_->sock);
   b7630:	6963      	ldr	r3, [r4, #20]
   b7632:	6818      	ldr	r0, [r3, #0]
   b7634:	f7fe ff86 	bl	b6544 <sock_close>
   b7638:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b763a:	f04f 32ff 	mov.w	r2, #4294967295
   b763e:	601a      	str	r2, [r3, #0]
   b7640:	e7d4      	b.n	b75ec <_ZN9TCPClient9availableEv+0x54>
   b7642:	bf00      	nop
   b7644:	000b9167 	.word	0x000b9167
   b7648:	000b9160 	.word	0x000b9160

000b764c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b764c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b764e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7650:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7652:	6818      	ldr	r0, [r3, #0]
   b7654:	2800      	cmp	r0, #0
   b7656:	db01      	blt.n	b765c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7658:	f7fe ff74 	bl	b6544 <sock_close>
   b765c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b765e:	f04f 32ff 	mov.w	r2, #4294967295
   b7662:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7664:	6960      	ldr	r0, [r4, #20]
   b7666:	2211      	movs	r2, #17
   b7668:	2100      	movs	r1, #0
   b766a:	308c      	adds	r0, #140	; 0x8c
   b766c:	f000 fba4 	bl	b7db8 <memset>
    flush_buffer();
   b7670:	4620      	mov	r0, r4
}
   b7672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7676:	f7ff bf0b 	b.w	b7490 <_ZN9TCPClient12flush_bufferEv>

000b767a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b767a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b767c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b767e:	4604      	mov	r4, r0
          total(0) {
   b7680:	6001      	str	r1, [r0, #0]
   b7682:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7686:	3088      	adds	r0, #136	; 0x88
   b7688:	f7ff fbba 	bl	b6e00 <_ZN9IPAddressC1Ev>
}
   b768c:	4620      	mov	r0, r4
   b768e:	bd10      	pop	{r4, pc}

000b7690 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7690:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7692:	2300      	movs	r3, #0
   b7694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7698:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b769c:	4a0e      	ldr	r2, [pc, #56]	; (b76d8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b769e:	6103      	str	r3, [r0, #16]
   b76a0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b76a2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b76a4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b76a6:	20ac      	movs	r0, #172	; 0xac
   b76a8:	9101      	str	r1, [sp, #4]
   b76aa:	f7fc fd04 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b76ae:	1e05      	subs	r5, r0, #0
   b76b0:	f105 060c 	add.w	r6, r5, #12
   b76b4:	d008      	beq.n	b76c8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b76b6:	2301      	movs	r3, #1
   b76b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b76bc:	4b07      	ldr	r3, [pc, #28]	; (b76dc <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b76be:	9901      	ldr	r1, [sp, #4]
   b76c0:	602b      	str	r3, [r5, #0]
   b76c2:	4630      	mov	r0, r6
   b76c4:	f7ff ffd9 	bl	b767a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b76c8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b76ca:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b76ce:	f7ff fedf 	bl	b7490 <_ZN9TCPClient12flush_bufferEv>
}
   b76d2:	b002      	add	sp, #8
   b76d4:	bd70      	pop	{r4, r5, r6, pc}
   b76d6:	bf00      	nop
   b76d8:	000b919c 	.word	0x000b919c
   b76dc:	000b9180 	.word	0x000b9180

000b76e0 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b76e0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b76e2:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b76e6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b76e8:	f7ff ffd2 	bl	b7690 <_ZN9TCPClientC1Ei>
}
   b76ec:	4620      	mov	r0, r4
   b76ee:	bd10      	pop	{r4, pc}

000b76f0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b76f0:	b510      	push	{r4, lr}
   b76f2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b76f4:	6800      	ldr	r0, [r0, #0]
   b76f6:	2800      	cmp	r0, #0
   b76f8:	db01      	blt.n	b76fe <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b76fa:	f7fe ff23 	bl	b6544 <sock_close>
    }
}
   b76fe:	4620      	mov	r0, r4
   b7700:	bd10      	pop	{r4, pc}

000b7702 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7702:	300c      	adds	r0, #12
   b7704:	f7ff bff4 	b.w	b76f0 <_ZN9TCPClient4DataD1Ev>

000b7708 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7708:	2200      	movs	r2, #0
   b770a:	6840      	ldr	r0, [r0, #4]
   b770c:	4611      	mov	r1, r2
   b770e:	f7ff b80d 	b.w	b672c <network_ready>

000b7712 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7712:	2200      	movs	r2, #0
   b7714:	6840      	ldr	r0, [r0, #4]
   b7716:	4611      	mov	r1, r2
   b7718:	f7ff b828 	b.w	b676c <network_listening>

000b771c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b771c:	2200      	movs	r2, #0
   b771e:	6840      	ldr	r0, [r0, #4]
   b7720:	4611      	mov	r1, r2
   b7722:	f7ff b833 	b.w	b678c <network_get_listen_timeout>

000b7726 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7726:	6840      	ldr	r0, [r0, #4]
   b7728:	2200      	movs	r2, #0
   b772a:	f7ff b827 	b.w	b677c <network_set_listen_timeout>

000b772e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b772e:	6840      	ldr	r0, [r0, #4]
   b7730:	2200      	movs	r2, #0
   b7732:	f081 0101 	eor.w	r1, r1, #1
   b7736:	f7ff b811 	b.w	b675c <network_listen>

000b773a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b773a:	2300      	movs	r3, #0
   b773c:	6840      	ldr	r0, [r0, #4]
   b773e:	461a      	mov	r2, r3
   b7740:	4619      	mov	r1, r3
   b7742:	f7ff b803 	b.w	b674c <network_off>

000b7746 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7746:	2300      	movs	r3, #0
   b7748:	6840      	ldr	r0, [r0, #4]
   b774a:	461a      	mov	r2, r3
   b774c:	4619      	mov	r1, r3
   b774e:	f7fe bff5 	b.w	b673c <network_on>

000b7752 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7752:	2200      	movs	r2, #0
   b7754:	6840      	ldr	r0, [r0, #4]
   b7756:	4611      	mov	r1, r2
   b7758:	f7fe bfd8 	b.w	b670c <network_connecting>

000b775c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b775c:	6840      	ldr	r0, [r0, #4]
   b775e:	2200      	movs	r2, #0
   b7760:	2102      	movs	r1, #2
   b7762:	f7fe bfdb 	b.w	b671c <network_disconnect>

000b7766 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7766:	2300      	movs	r3, #0
   b7768:	6840      	ldr	r0, [r0, #4]
   b776a:	461a      	mov	r2, r3
   b776c:	f7fe bfc6 	b.w	b66fc <network_connect>

000b7770 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7770:	4b02      	ldr	r3, [pc, #8]	; (b777c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7772:	2204      	movs	r2, #4
   b7774:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7776:	4a02      	ldr	r2, [pc, #8]	; (b7780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7778:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b777a:	4770      	bx	lr
   b777c:	2003e718 	.word	0x2003e718
   b7780:	000b91e8 	.word	0x000b91e8

000b7784 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7784:	2300      	movs	r3, #0
   b7786:	6840      	ldr	r0, [r0, #4]
   b7788:	461a      	mov	r2, r3
   b778a:	f7fe bfb7 	b.w	b66fc <network_connect>

000b778e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b778e:	6840      	ldr	r0, [r0, #4]
   b7790:	2200      	movs	r2, #0
   b7792:	2102      	movs	r1, #2
   b7794:	f7fe bfc2 	b.w	b671c <network_disconnect>

000b7798 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7798:	2200      	movs	r2, #0
   b779a:	6840      	ldr	r0, [r0, #4]
   b779c:	4611      	mov	r1, r2
   b779e:	f7fe bfb5 	b.w	b670c <network_connecting>

000b77a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b77a2:	2200      	movs	r2, #0
   b77a4:	6840      	ldr	r0, [r0, #4]
   b77a6:	4611      	mov	r1, r2
   b77a8:	f7fe bfc0 	b.w	b672c <network_ready>

000b77ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b77ac:	2300      	movs	r3, #0
   b77ae:	6840      	ldr	r0, [r0, #4]
   b77b0:	461a      	mov	r2, r3
   b77b2:	4619      	mov	r1, r3
   b77b4:	f7fe bfc2 	b.w	b673c <network_on>

000b77b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b77b8:	2300      	movs	r3, #0
   b77ba:	6840      	ldr	r0, [r0, #4]
   b77bc:	461a      	mov	r2, r3
   b77be:	4619      	mov	r1, r3
   b77c0:	f7fe bfc4 	b.w	b674c <network_off>

000b77c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b77c4:	6840      	ldr	r0, [r0, #4]
   b77c6:	2100      	movs	r1, #0
   b77c8:	f7fe bfe8 	b.w	b679c <network_is_on>

000b77cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b77cc:	6840      	ldr	r0, [r0, #4]
   b77ce:	2100      	movs	r1, #0
   b77d0:	f7fe bfec 	b.w	b67ac <network_is_off>

000b77d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b77d4:	6840      	ldr	r0, [r0, #4]
   b77d6:	2200      	movs	r2, #0
   b77d8:	f081 0101 	eor.w	r1, r1, #1
   b77dc:	f7fe bfbe 	b.w	b675c <network_listen>

000b77e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b77e0:	6840      	ldr	r0, [r0, #4]
   b77e2:	2200      	movs	r2, #0
   b77e4:	f7fe bfca 	b.w	b677c <network_set_listen_timeout>

000b77e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b77e8:	2200      	movs	r2, #0
   b77ea:	6840      	ldr	r0, [r0, #4]
   b77ec:	4611      	mov	r1, r2
   b77ee:	f7fe bfcd 	b.w	b678c <network_get_listen_timeout>

000b77f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b77f2:	2200      	movs	r2, #0
   b77f4:	6840      	ldr	r0, [r0, #4]
   b77f6:	4611      	mov	r1, r2
   b77f8:	f7fe bfb8 	b.w	b676c <network_listening>

000b77fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b77fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7800:	b095      	sub	sp, #84	; 0x54
   b7802:	4614      	mov	r4, r2
   b7804:	460d      	mov	r5, r1
   b7806:	4607      	mov	r7, r0
    IPAddress addr;
   b7808:	f7ff fafa 	bl	b6e00 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b780c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b780e:	221c      	movs	r2, #28
   b7810:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7812:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7814:	f000 fad0 	bl	b7db8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7818:	2340      	movs	r3, #64	; 0x40
   b781a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b781c:	4620      	mov	r0, r4
   b781e:	466b      	mov	r3, sp
   b7820:	aa0c      	add	r2, sp, #48	; 0x30
   b7822:	2100      	movs	r1, #0
   b7824:	f7fe fd46 	bl	b62b4 <netdb_getaddrinfo>
    if (!r) {
   b7828:	4604      	mov	r4, r0
   b782a:	2800      	cmp	r0, #0
   b782c:	d14b      	bne.n	b78c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b782e:	4602      	mov	r2, r0
   b7830:	2101      	movs	r1, #1
   b7832:	6868      	ldr	r0, [r5, #4]
   b7834:	f7fe ff7a 	bl	b672c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7838:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b783a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b783c:	4622      	mov	r2, r4
   b783e:	6868      	ldr	r0, [r5, #4]
   b7840:	f7fe ff74 	bl	b672c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7844:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7846:	4681      	mov	r9, r0
        bool ok = false;
   b7848:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b784a:	2e00      	cmp	r6, #0
   b784c:	d03b      	beq.n	b78c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b784e:	2900      	cmp	r1, #0
   b7850:	d139      	bne.n	b78c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7852:	6873      	ldr	r3, [r6, #4]
   b7854:	2b02      	cmp	r3, #2
   b7856:	d003      	beq.n	b7860 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7858:	2b0a      	cmp	r3, #10
   b785a:	d011      	beq.n	b7880 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b785c:	69f6      	ldr	r6, [r6, #28]
   b785e:	e7f4      	b.n	b784a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7860:	f1b8 0f00 	cmp.w	r8, #0
   b7864:	d0fa      	beq.n	b785c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7866:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7868:	a806      	add	r0, sp, #24
   b786a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b786c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b786e:	f7ff fb0b 	bl	b6e88 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7874:	1d3c      	adds	r4, r7, #4
   b7876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7878:	682b      	ldr	r3, [r5, #0]
   b787a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b787c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b787e:	e7ed      	b.n	b785c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7880:	f1b9 0f00 	cmp.w	r9, #0
   b7884:	d0ea      	beq.n	b785c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7886:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7888:	2210      	movs	r2, #16
   b788a:	a801      	add	r0, sp, #4
   b788c:	f000 fa94 	bl	b7db8 <memset>
                    a.v = 6;
   b7890:	2306      	movs	r3, #6
   b7892:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7896:	ad01      	add	r5, sp, #4
   b7898:	f104 0308 	add.w	r3, r4, #8
   b789c:	3418      	adds	r4, #24
   b789e:	6818      	ldr	r0, [r3, #0]
   b78a0:	6859      	ldr	r1, [r3, #4]
   b78a2:	462a      	mov	r2, r5
   b78a4:	c203      	stmia	r2!, {r0, r1}
   b78a6:	3308      	adds	r3, #8
   b78a8:	42a3      	cmp	r3, r4
   b78aa:	4615      	mov	r5, r2
   b78ac:	d1f7      	bne.n	b789e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b78ae:	a901      	add	r1, sp, #4
   b78b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b78b2:	ad07      	add	r5, sp, #28
   b78b4:	f7ff fab2 	bl	b6e1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b78b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b78ba:	1d3c      	adds	r4, r7, #4
   b78bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b78be:	682b      	ldr	r3, [r5, #0]
   b78c0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b78c2:	4649      	mov	r1, r9
   b78c4:	e7ca      	b.n	b785c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b78c6:	9800      	ldr	r0, [sp, #0]
   b78c8:	f7fe fcec 	bl	b62a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b78cc:	4638      	mov	r0, r7
   b78ce:	b015      	add	sp, #84	; 0x54
   b78d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b78d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b78d4:	4b02      	ldr	r3, [pc, #8]	; (b78e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b78d6:	4a03      	ldr	r2, [pc, #12]	; (b78e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b78d8:	601a      	str	r2, [r3, #0]
   b78da:	2200      	movs	r2, #0
   b78dc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b78de:	4770      	bx	lr
   b78e0:	2003e720 	.word	0x2003e720
   b78e4:	000b9224 	.word	0x000b9224

000b78e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b78e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b78ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b78ec:	d902      	bls.n	b78f4 <pinAvailable+0xc>
    return false;
   b78ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b78f0:	b002      	add	sp, #8
   b78f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b78f4:	f1a0 030b 	sub.w	r3, r0, #11
   b78f8:	2b02      	cmp	r3, #2
   b78fa:	d81a      	bhi.n	b7932 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b78fc:	4c17      	ldr	r4, [pc, #92]	; (b795c <pinAvailable+0x74>)
   b78fe:	7821      	ldrb	r1, [r4, #0]
   b7900:	f3bf 8f5b 	dmb	ish
   b7904:	f011 0101 	ands.w	r1, r1, #1
   b7908:	d10b      	bne.n	b7922 <pinAvailable+0x3a>
   b790a:	4620      	mov	r0, r4
   b790c:	9101      	str	r1, [sp, #4]
   b790e:	f7fc fbe5 	bl	b40dc <__cxa_guard_acquire>
   b7912:	9901      	ldr	r1, [sp, #4]
   b7914:	b128      	cbz	r0, b7922 <pinAvailable+0x3a>
   b7916:	4812      	ldr	r0, [pc, #72]	; (b7960 <pinAvailable+0x78>)
   b7918:	f7fe ffdc 	bl	b68d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b791c:	4620      	mov	r0, r4
   b791e:	f7fc fbe2 	bl	b40e6 <__cxa_guard_release>
   b7922:	4b0f      	ldr	r3, [pc, #60]	; (b7960 <pinAvailable+0x78>)
   b7924:	7818      	ldrb	r0, [r3, #0]
   b7926:	f7fe fe4d 	bl	b65c4 <hal_spi_is_enabled>
   b792a:	2800      	cmp	r0, #0
   b792c:	d1df      	bne.n	b78ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b792e:	2001      	movs	r0, #1
   b7930:	e7de      	b.n	b78f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7932:	2801      	cmp	r0, #1
   b7934:	d809      	bhi.n	b794a <pinAvailable+0x62>
   b7936:	f000 f8eb 	bl	b7b10 <_Z19__fetch_global_Wirev>
   b793a:	2100      	movs	r1, #0
   b793c:	7c00      	ldrb	r0, [r0, #16]
   b793e:	f7fe fde1 	bl	b6504 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7942:	f080 0001 	eor.w	r0, r0, #1
   b7946:	b2c0      	uxtb	r0, r0
   b7948:	e7d2      	b.n	b78f0 <pinAvailable+0x8>
   b794a:	3809      	subs	r0, #9
   b794c:	2801      	cmp	r0, #1
   b794e:	d8ee      	bhi.n	b792e <pinAvailable+0x46>
   b7950:	f000 f89e 	bl	b7a90 <_Z22__fetch_global_Serial1v>
   b7954:	7c00      	ldrb	r0, [r0, #16]
   b7956:	f7fe fd75 	bl	b6444 <hal_usart_is_enabled>
   b795a:	e7f2      	b.n	b7942 <pinAvailable+0x5a>
   b795c:	2003e6b8 	.word	0x2003e6b8
   b7960:	2003e6bc 	.word	0x2003e6bc

000b7964 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7964:	2823      	cmp	r0, #35	; 0x23
{
   b7966:	b538      	push	{r3, r4, r5, lr}
   b7968:	4604      	mov	r4, r0
   b796a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b796c:	d80a      	bhi.n	b7984 <pinMode+0x20>
   b796e:	29ff      	cmp	r1, #255	; 0xff
   b7970:	d008      	beq.n	b7984 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7972:	f7ff ffb9 	bl	b78e8 <pinAvailable>
   b7976:	b128      	cbz	r0, b7984 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7978:	4629      	mov	r1, r5
   b797a:	4620      	mov	r0, r4
}
   b797c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7980:	f7fe bca8 	b.w	b62d4 <hal_gpio_mode>
}
   b7984:	bd38      	pop	{r3, r4, r5, pc}

000b7986 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7986:	b538      	push	{r3, r4, r5, lr}
   b7988:	4604      	mov	r4, r0
   b798a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b798c:	f7fe fcaa 	bl	b62e4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7990:	28ff      	cmp	r0, #255	; 0xff
   b7992:	d010      	beq.n	b79b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7994:	2806      	cmp	r0, #6
   b7996:	d804      	bhi.n	b79a2 <digitalWrite+0x1c>
   b7998:	234d      	movs	r3, #77	; 0x4d
   b799a:	fa23 f000 	lsr.w	r0, r3, r0
   b799e:	07c3      	lsls	r3, r0, #31
   b79a0:	d409      	bmi.n	b79b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b79a2:	4620      	mov	r0, r4
   b79a4:	f7ff ffa0 	bl	b78e8 <pinAvailable>
   b79a8:	b128      	cbz	r0, b79b6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b79aa:	4629      	mov	r1, r5
   b79ac:	4620      	mov	r0, r4
}
   b79ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b79b2:	f7fe bc9f 	b.w	b62f4 <hal_gpio_write>
}
   b79b6:	bd38      	pop	{r3, r4, r5, pc}

000b79b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b79b8:	b510      	push	{r4, lr}
   b79ba:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b79bc:	f7fe fc92 	bl	b62e4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b79c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b79c2:	b2db      	uxtb	r3, r3
   b79c4:	2b01      	cmp	r3, #1
   b79c6:	d908      	bls.n	b79da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b79c8:	4620      	mov	r0, r4
   b79ca:	f7ff ff8d 	bl	b78e8 <pinAvailable>
   b79ce:	b120      	cbz	r0, b79da <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b79d0:	4620      	mov	r0, r4
}
   b79d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b79d6:	f7fe bc95 	b.w	b6304 <hal_gpio_read>
}
   b79da:	2000      	movs	r0, #0
   b79dc:	bd10      	pop	{r4, pc}

000b79de <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b79de:	280d      	cmp	r0, #13
{
   b79e0:	b510      	push	{r4, lr}
   b79e2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b79e4:	bf9c      	itt	ls
   b79e6:	340e      	addls	r4, #14
   b79e8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b79ea:	4620      	mov	r0, r4
   b79ec:	f7ff ff7c 	bl	b78e8 <pinAvailable>
   b79f0:	b150      	cbz	r0, b7a08 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b79f2:	2103      	movs	r1, #3
   b79f4:	4620      	mov	r0, r4
   b79f6:	f7fe fc65 	bl	b62c4 <hal_pin_validate_function>
   b79fa:	2803      	cmp	r0, #3
   b79fc:	d104      	bne.n	b7a08 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b79fe:	4620      	mov	r0, r4
}
   b7a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7a04:	f7fe bc8e 	b.w	b6324 <hal_adc_read>
}
   b7a08:	2000      	movs	r0, #0
   b7a0a:	bd10      	pop	{r4, pc}

000b7a0c <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b7a0c:	b538      	push	{r3, r4, r5, lr}
   b7a0e:	4604      	mov	r4, r0
   b7a10:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7a12:	f7ff ff69 	bl	b78e8 <pinAvailable>
   b7a16:	b1f0      	cbz	r0, b7a56 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b7a18:	2104      	movs	r1, #4
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	f7fe fc52 	bl	b62c4 <hal_pin_validate_function>
   b7a20:	2804      	cmp	r0, #4
   b7a22:	d105      	bne.n	b7a30 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7a24:	b2a9      	uxth	r1, r5
   b7a26:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b7a2c:	f7fe bc72 	b.w	b6314 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b7a30:	2102      	movs	r1, #2
   b7a32:	4620      	mov	r0, r4
   b7a34:	f7fe fc46 	bl	b62c4 <hal_pin_validate_function>
   b7a38:	2802      	cmp	r0, #2
   b7a3a:	d10c      	bne.n	b7a56 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b7a3c:	4620      	mov	r0, r4
   b7a3e:	f7fe fc51 	bl	b62e4 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7a42:	2801      	cmp	r0, #1
   b7a44:	d001      	beq.n	b7a4a <_Z11analogWritetm+0x3e>
   b7a46:	2804      	cmp	r0, #4
   b7a48:	d105      	bne.n	b7a56 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7a4a:	4629      	mov	r1, r5
   b7a4c:	4620      	mov	r0, r4
}
   b7a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7a52:	f7fe bc6f 	b.w	b6334 <hal_pwm_write_ext>
}
   b7a56:	bd38      	pop	{r3, r4, r5, pc}

000b7a58 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a58:	4770      	bx	lr
	...

000b7a5c <_Z20acquireSerial1Bufferv>:
{
   b7a5c:	b538      	push	{r3, r4, r5, lr}
   b7a5e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7a60:	2514      	movs	r5, #20
   b7a62:	462a      	mov	r2, r5
   b7a64:	2100      	movs	r1, #0
   b7a66:	f000 f9a7 	bl	b7db8 <memset>
   b7a6a:	8025      	strh	r5, [r4, #0]
   b7a6c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a6e:	4907      	ldr	r1, [pc, #28]	; (b7a8c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7a70:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a72:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7a74:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a76:	f000 f86f 	bl	b7b58 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a7a:	4904      	ldr	r1, [pc, #16]	; (b7a8c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7a7c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a7e:	4628      	mov	r0, r5
   b7a80:	f000 f86a 	bl	b7b58 <_ZnajRKSt9nothrow_t>
    };
   b7a84:	60e0      	str	r0, [r4, #12]
}
   b7a86:	4620      	mov	r0, r4
   b7a88:	bd38      	pop	{r3, r4, r5, pc}
   b7a8a:	bf00      	nop
   b7a8c:	000b9258 	.word	0x000b9258

000b7a90 <_Z22__fetch_global_Serial1v>:
{
   b7a90:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a92:	4d0e      	ldr	r5, [pc, #56]	; (b7acc <_Z22__fetch_global_Serial1v+0x3c>)
   b7a94:	7829      	ldrb	r1, [r5, #0]
   b7a96:	f3bf 8f5b 	dmb	ish
   b7a9a:	f011 0401 	ands.w	r4, r1, #1
{
   b7a9e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7aa0:	d111      	bne.n	b7ac6 <_Z22__fetch_global_Serial1v+0x36>
   b7aa2:	4628      	mov	r0, r5
   b7aa4:	f7fc fb1a 	bl	b40dc <__cxa_guard_acquire>
   b7aa8:	b168      	cbz	r0, b7ac6 <_Z22__fetch_global_Serial1v+0x36>
   b7aaa:	a801      	add	r0, sp, #4
   b7aac:	f7ff ffd6 	bl	b7a5c <_Z20acquireSerial1Bufferv>
   b7ab0:	aa01      	add	r2, sp, #4
   b7ab2:	4621      	mov	r1, r4
   b7ab4:	4806      	ldr	r0, [pc, #24]	; (b7ad0 <_Z22__fetch_global_Serial1v+0x40>)
   b7ab6:	f7ff fab9 	bl	b702c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7aba:	4628      	mov	r0, r5
   b7abc:	f7fc fb13 	bl	b40e6 <__cxa_guard_release>
   b7ac0:	4804      	ldr	r0, [pc, #16]	; (b7ad4 <_Z22__fetch_global_Serial1v+0x44>)
   b7ac2:	f000 f95d 	bl	b7d80 <atexit>
    return serial1;
}
   b7ac6:	4802      	ldr	r0, [pc, #8]	; (b7ad0 <_Z22__fetch_global_Serial1v+0x40>)
   b7ac8:	b007      	add	sp, #28
   b7aca:	bd30      	pop	{r4, r5, pc}
   b7acc:	2003e728 	.word	0x2003e728
   b7ad0:	2003e72c 	.word	0x2003e72c
   b7ad4:	000b7a59 	.word	0x000b7a59

000b7ad8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ad8:	4770      	bx	lr
	...

000b7adc <_Z17acquireWireBufferv>:
{
   b7adc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7ade:	4b0a      	ldr	r3, [pc, #40]	; (b7b08 <_Z17acquireWireBufferv+0x2c>)
   b7ae0:	6003      	str	r3, [r0, #0]
   b7ae2:	2301      	movs	r3, #1
{
   b7ae4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7ae6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ae8:	4908      	ldr	r1, [pc, #32]	; (b7b0c <_Z17acquireWireBufferv+0x30>)
   b7aea:	2020      	movs	r0, #32
   b7aec:	f000 f834 	bl	b7b58 <_ZnajRKSt9nothrow_t>
	};
   b7af0:	2520      	movs	r5, #32
   b7af2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7af4:	4905      	ldr	r1, [pc, #20]	; (b7b0c <_Z17acquireWireBufferv+0x30>)
	};
   b7af6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7af8:	4628      	mov	r0, r5
   b7afa:	f000 f82d 	bl	b7b58 <_ZnajRKSt9nothrow_t>
	};
   b7afe:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7b02:	4620      	mov	r0, r4
   b7b04:	bd38      	pop	{r3, r4, r5, pc}
   b7b06:	bf00      	nop
   b7b08:	00010018 	.word	0x00010018
   b7b0c:	000b9258 	.word	0x000b9258

000b7b10 <_Z19__fetch_global_Wirev>:
{
   b7b10:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b12:	4d0e      	ldr	r5, [pc, #56]	; (b7b4c <_Z19__fetch_global_Wirev+0x3c>)
   b7b14:	7829      	ldrb	r1, [r5, #0]
   b7b16:	f3bf 8f5b 	dmb	ish
   b7b1a:	f011 0401 	ands.w	r4, r1, #1
{
   b7b1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b20:	d111      	bne.n	b7b46 <_Z19__fetch_global_Wirev+0x36>
   b7b22:	4628      	mov	r0, r5
   b7b24:	f7fc fada 	bl	b40dc <__cxa_guard_acquire>
   b7b28:	b168      	cbz	r0, b7b46 <_Z19__fetch_global_Wirev+0x36>
   b7b2a:	4668      	mov	r0, sp
   b7b2c:	f7ff ffd6 	bl	b7adc <_Z17acquireWireBufferv>
   b7b30:	466a      	mov	r2, sp
   b7b32:	4621      	mov	r1, r4
   b7b34:	4806      	ldr	r0, [pc, #24]	; (b7b50 <_Z19__fetch_global_Wirev+0x40>)
   b7b36:	f7ff fab9 	bl	b70ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7b3a:	4628      	mov	r0, r5
   b7b3c:	f7fc fad3 	bl	b40e6 <__cxa_guard_release>
   b7b40:	4804      	ldr	r0, [pc, #16]	; (b7b54 <_Z19__fetch_global_Wirev+0x44>)
   b7b42:	f000 f91d 	bl	b7d80 <atexit>
	return wire;
}
   b7b46:	4802      	ldr	r0, [pc, #8]	; (b7b50 <_Z19__fetch_global_Wirev+0x40>)
   b7b48:	b007      	add	sp, #28
   b7b4a:	bd30      	pop	{r4, r5, pc}
   b7b4c:	2003e744 	.word	0x2003e744
   b7b50:	2003e748 	.word	0x2003e748
   b7b54:	000b7ad9 	.word	0x000b7ad9

000b7b58 <_ZnajRKSt9nothrow_t>:
   b7b58:	f7fc baaf 	b.w	b40ba <_Znaj>

000b7b5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7b5c:	4901      	ldr	r1, [pc, #4]	; (b7b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7b5e:	f000 b8f9 	b.w	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7b62:	bf00      	nop
   b7b64:	000b9274 	.word	0x000b9274

000b7b68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7b6a:	2400      	movs	r4, #0
   b7b6c:	2310      	movs	r3, #16
   b7b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7b72:	6803      	ldr	r3, [r0, #0]
   b7b74:	4615      	mov	r5, r2
   b7b76:	699e      	ldr	r6, [r3, #24]
   b7b78:	6812      	ldr	r2, [r2, #0]
   b7b7a:	466b      	mov	r3, sp
   b7b7c:	e9cd 4400 	strd	r4, r4, [sp]
   b7b80:	47b0      	blx	r6
   b7b82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7b86:	f003 0306 	and.w	r3, r3, #6
   b7b8a:	2b06      	cmp	r3, #6
   b7b8c:	bf03      	ittte	eq
   b7b8e:	9b00      	ldreq	r3, [sp, #0]
   b7b90:	602b      	streq	r3, [r5, #0]
   b7b92:	2001      	moveq	r0, #1
   b7b94:	4620      	movne	r0, r4
   b7b96:	b004      	add	sp, #16
   b7b98:	bd70      	pop	{r4, r5, r6, pc}

000b7b9a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7b9a:	9800      	ldr	r0, [sp, #0]
   b7b9c:	4290      	cmp	r0, r2
   b7b9e:	bf14      	ite	ne
   b7ba0:	2001      	movne	r0, #1
   b7ba2:	2006      	moveq	r0, #6
   b7ba4:	4770      	bx	lr
	...

000b7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7ba8:	b510      	push	{r4, lr}
   b7baa:	4b03      	ldr	r3, [pc, #12]	; (b7bb8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7bac:	6003      	str	r3, [r0, #0]
   b7bae:	4604      	mov	r4, r0
   b7bb0:	f000 f8cd 	bl	b7d4e <_ZNSt9type_infoD1Ev>
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	bd10      	pop	{r4, pc}
   b7bb8:	000b92b4 	.word	0x000b92b4

000b7bbc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7bbc:	b510      	push	{r4, lr}
   b7bbe:	4604      	mov	r4, r0
   b7bc0:	f7ff fff2 	bl	b7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7bc4:	4620      	mov	r0, r4
   b7bc6:	2108      	movs	r1, #8
   b7bc8:	f7fc fa79 	bl	b40be <_ZdlPvj>
   b7bcc:	4620      	mov	r0, r4
   b7bce:	bd10      	pop	{r4, pc}

000b7bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7bd4:	461f      	mov	r7, r3
   b7bd6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7bda:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7bde:	4598      	cmp	r8, r3
   b7be0:	4606      	mov	r6, r0
   b7be2:	4615      	mov	r5, r2
   b7be4:	d107      	bne.n	b7bf6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7be6:	9907      	ldr	r1, [sp, #28]
   b7be8:	f000 f8b4 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7bec:	b118      	cbz	r0, b7bf6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7bee:	7165      	strb	r5, [r4, #5]
   b7bf0:	2000      	movs	r0, #0
   b7bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7bf6:	4639      	mov	r1, r7
   b7bf8:	4630      	mov	r0, r6
   b7bfa:	f000 f8ab 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7bfe:	2800      	cmp	r0, #0
   b7c00:	d0f6      	beq.n	b7bf0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7c02:	2301      	movs	r3, #1
   b7c04:	f8c4 8000 	str.w	r8, [r4]
   b7c08:	7125      	strb	r5, [r4, #4]
   b7c0a:	71a3      	strb	r3, [r4, #6]
   b7c0c:	e7f0      	b.n	b7bf0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7c0e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7c0e:	b538      	push	{r3, r4, r5, lr}
   b7c10:	4615      	mov	r5, r2
   b7c12:	461c      	mov	r4, r3
   b7c14:	f000 f89e 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7c18:	b120      	cbz	r0, b7c24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7c1a:	2308      	movs	r3, #8
   b7c1c:	60e3      	str	r3, [r4, #12]
   b7c1e:	2306      	movs	r3, #6
   b7c20:	6025      	str	r5, [r4, #0]
   b7c22:	7123      	strb	r3, [r4, #4]
   b7c24:	bd38      	pop	{r3, r4, r5, pc}

000b7c26 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c28:	4605      	mov	r5, r0
   b7c2a:	460c      	mov	r4, r1
   b7c2c:	9201      	str	r2, [sp, #4]
   b7c2e:	461e      	mov	r6, r3
   b7c30:	f000 f890 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7c34:	b950      	cbnz	r0, b7c4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c36:	2e03      	cmp	r6, #3
   b7c38:	d808      	bhi.n	b7c4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7c3a:	6823      	ldr	r3, [r4, #0]
   b7c3c:	9a01      	ldr	r2, [sp, #4]
   b7c3e:	695b      	ldr	r3, [r3, #20]
   b7c40:	4629      	mov	r1, r5
   b7c42:	4620      	mov	r0, r4
   b7c44:	b002      	add	sp, #8
   b7c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7c4a:	4718      	bx	r3
   b7c4c:	b002      	add	sp, #8
   b7c4e:	bd70      	pop	{r4, r5, r6, pc}

000b7c50 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7c50:	b510      	push	{r4, lr}
   b7c52:	4b03      	ldr	r3, [pc, #12]	; (b7c60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7c54:	6003      	str	r3, [r0, #0]
   b7c56:	4604      	mov	r4, r0
   b7c58:	f7ff ffa6 	bl	b7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	bd10      	pop	{r4, pc}
   b7c60:	000b9314 	.word	0x000b9314

000b7c64 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7c64:	b510      	push	{r4, lr}
   b7c66:	4604      	mov	r4, r0
   b7c68:	f7ff fff2 	bl	b7c50 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7c6c:	4620      	mov	r0, r4
   b7c6e:	210c      	movs	r1, #12
   b7c70:	f7fc fa25 	bl	b40be <_ZdlPvj>
   b7c74:	4620      	mov	r0, r4
   b7c76:	bd10      	pop	{r4, pc}

000b7c78 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7c7a:	9f08      	ldr	r7, [sp, #32]
   b7c7c:	4297      	cmp	r7, r2
   b7c7e:	4605      	mov	r5, r0
   b7c80:	460e      	mov	r6, r1
   b7c82:	4614      	mov	r4, r2
   b7c84:	d00a      	beq.n	b7c9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7c86:	68a8      	ldr	r0, [r5, #8]
   b7c88:	6802      	ldr	r2, [r0, #0]
   b7c8a:	9708      	str	r7, [sp, #32]
   b7c8c:	6a15      	ldr	r5, [r2, #32]
   b7c8e:	4631      	mov	r1, r6
   b7c90:	4622      	mov	r2, r4
   b7c92:	46ac      	mov	ip, r5
   b7c94:	b003      	add	sp, #12
   b7c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7c9a:	4760      	bx	ip
   b7c9c:	4619      	mov	r1, r3
   b7c9e:	9301      	str	r3, [sp, #4]
   b7ca0:	f000 f858 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7ca4:	9b01      	ldr	r3, [sp, #4]
   b7ca6:	2800      	cmp	r0, #0
   b7ca8:	d0ed      	beq.n	b7c86 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7caa:	2006      	movs	r0, #6
   b7cac:	b003      	add	sp, #12
   b7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7cb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7cb0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7cb4:	460d      	mov	r5, r1
   b7cb6:	4619      	mov	r1, r3
   b7cb8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7cbc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7cc0:	4681      	mov	r9, r0
   b7cc2:	4617      	mov	r7, r2
   b7cc4:	4698      	mov	r8, r3
   b7cc6:	f000 f845 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7cca:	b190      	cbz	r0, b7cf2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7ccc:	2d00      	cmp	r5, #0
   b7cce:	6034      	str	r4, [r6, #0]
   b7cd0:	7137      	strb	r7, [r6, #4]
   b7cd2:	db09      	blt.n	b7ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7cd4:	1961      	adds	r1, r4, r5
   b7cd6:	458a      	cmp	sl, r1
   b7cd8:	bf0c      	ite	eq
   b7cda:	2106      	moveq	r1, #6
   b7cdc:	2101      	movne	r1, #1
   b7cde:	71b1      	strb	r1, [r6, #6]
   b7ce0:	2000      	movs	r0, #0
   b7ce2:	b001      	add	sp, #4
   b7ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7ce8:	3502      	adds	r5, #2
   b7cea:	d1f9      	bne.n	b7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7cec:	2301      	movs	r3, #1
   b7cee:	71b3      	strb	r3, [r6, #6]
   b7cf0:	e7f6      	b.n	b7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7cf2:	4554      	cmp	r4, sl
   b7cf4:	d106      	bne.n	b7d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7cf6:	4659      	mov	r1, fp
   b7cf8:	4648      	mov	r0, r9
   b7cfa:	f000 f82b 	bl	b7d54 <_ZNKSt9type_infoeqERKS_>
   b7cfe:	b108      	cbz	r0, b7d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7d00:	7177      	strb	r7, [r6, #5]
   b7d02:	e7ed      	b.n	b7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7d04:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7d08:	6803      	ldr	r3, [r0, #0]
   b7d0a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7d0e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7d12:	69dc      	ldr	r4, [r3, #28]
   b7d14:	463a      	mov	r2, r7
   b7d16:	4643      	mov	r3, r8
   b7d18:	4629      	mov	r1, r5
   b7d1a:	46a4      	mov	ip, r4
   b7d1c:	b001      	add	sp, #4
   b7d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d22:	4760      	bx	ip

000b7d24 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7d28:	4607      	mov	r7, r0
   b7d2a:	460c      	mov	r4, r1
   b7d2c:	4615      	mov	r5, r2
   b7d2e:	461e      	mov	r6, r3
   b7d30:	f7ff ff6d 	bl	b7c0e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7d34:	b948      	cbnz	r0, b7d4a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7d36:	68b8      	ldr	r0, [r7, #8]
   b7d38:	6803      	ldr	r3, [r0, #0]
   b7d3a:	699f      	ldr	r7, [r3, #24]
   b7d3c:	462a      	mov	r2, r5
   b7d3e:	4633      	mov	r3, r6
   b7d40:	4621      	mov	r1, r4
   b7d42:	46bc      	mov	ip, r7
   b7d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7d48:	4760      	bx	ip
   b7d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7d4e <_ZNSt9type_infoD1Ev>:
   b7d4e:	4770      	bx	lr

000b7d50 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7d50:	2000      	movs	r0, #0
   b7d52:	4770      	bx	lr

000b7d54 <_ZNKSt9type_infoeqERKS_>:
   b7d54:	4281      	cmp	r1, r0
   b7d56:	b508      	push	{r3, lr}
   b7d58:	d00e      	beq.n	b7d78 <_ZNKSt9type_infoeqERKS_+0x24>
   b7d5a:	6840      	ldr	r0, [r0, #4]
   b7d5c:	7803      	ldrb	r3, [r0, #0]
   b7d5e:	2b2a      	cmp	r3, #42	; 0x2a
   b7d60:	d00c      	beq.n	b7d7c <_ZNKSt9type_infoeqERKS_+0x28>
   b7d62:	6849      	ldr	r1, [r1, #4]
   b7d64:	780b      	ldrb	r3, [r1, #0]
   b7d66:	2b2a      	cmp	r3, #42	; 0x2a
   b7d68:	bf08      	it	eq
   b7d6a:	3101      	addeq	r1, #1
   b7d6c:	f7fc f956 	bl	b401c <strcmp>
   b7d70:	fab0 f080 	clz	r0, r0
   b7d74:	0940      	lsrs	r0, r0, #5
   b7d76:	bd08      	pop	{r3, pc}
   b7d78:	2001      	movs	r0, #1
   b7d7a:	e7fc      	b.n	b7d76 <_ZNKSt9type_infoeqERKS_+0x22>
   b7d7c:	2000      	movs	r0, #0
   b7d7e:	e7fa      	b.n	b7d76 <_ZNKSt9type_infoeqERKS_+0x22>

000b7d80 <atexit>:
   b7d80:	2300      	movs	r3, #0
   b7d82:	4601      	mov	r1, r0
   b7d84:	461a      	mov	r2, r3
   b7d86:	4618      	mov	r0, r3
   b7d88:	f000 b8ec 	b.w	b7f64 <__register_exitproc>

000b7d8c <atoi>:
   b7d8c:	220a      	movs	r2, #10
   b7d8e:	2100      	movs	r1, #0
   b7d90:	f000 b8de 	b.w	b7f50 <strtol>

000b7d94 <atol>:
   b7d94:	220a      	movs	r2, #10
   b7d96:	2100      	movs	r1, #0
   b7d98:	f000 b8da 	b.w	b7f50 <strtol>

000b7d9c <memcpy>:
   b7d9c:	440a      	add	r2, r1
   b7d9e:	4291      	cmp	r1, r2
   b7da0:	f100 33ff 	add.w	r3, r0, #4294967295
   b7da4:	d100      	bne.n	b7da8 <memcpy+0xc>
   b7da6:	4770      	bx	lr
   b7da8:	b510      	push	{r4, lr}
   b7daa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7dae:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7db2:	4291      	cmp	r1, r2
   b7db4:	d1f9      	bne.n	b7daa <memcpy+0xe>
   b7db6:	bd10      	pop	{r4, pc}

000b7db8 <memset>:
   b7db8:	4402      	add	r2, r0
   b7dba:	4603      	mov	r3, r0
   b7dbc:	4293      	cmp	r3, r2
   b7dbe:	d100      	bne.n	b7dc2 <memset+0xa>
   b7dc0:	4770      	bx	lr
   b7dc2:	f803 1b01 	strb.w	r1, [r3], #1
   b7dc6:	e7f9      	b.n	b7dbc <memset+0x4>

000b7dc8 <srand>:
   b7dc8:	b538      	push	{r3, r4, r5, lr}
   b7dca:	4b10      	ldr	r3, [pc, #64]	; (b7e0c <srand+0x44>)
   b7dcc:	681d      	ldr	r5, [r3, #0]
   b7dce:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7dd0:	4604      	mov	r4, r0
   b7dd2:	b9b3      	cbnz	r3, b7e02 <srand+0x3a>
   b7dd4:	2018      	movs	r0, #24
   b7dd6:	f7fe fd01 	bl	b67dc <malloc>
   b7dda:	4602      	mov	r2, r0
   b7ddc:	63a8      	str	r0, [r5, #56]	; 0x38
   b7dde:	b920      	cbnz	r0, b7dea <srand+0x22>
   b7de0:	4b0b      	ldr	r3, [pc, #44]	; (b7e10 <srand+0x48>)
   b7de2:	480c      	ldr	r0, [pc, #48]	; (b7e14 <srand+0x4c>)
   b7de4:	2142      	movs	r1, #66	; 0x42
   b7de6:	f7fe fd21 	bl	b682c <__assert_func>
   b7dea:	490b      	ldr	r1, [pc, #44]	; (b7e18 <srand+0x50>)
   b7dec:	4b0b      	ldr	r3, [pc, #44]	; (b7e1c <srand+0x54>)
   b7dee:	e9c0 1300 	strd	r1, r3, [r0]
   b7df2:	4b0b      	ldr	r3, [pc, #44]	; (b7e20 <srand+0x58>)
   b7df4:	6083      	str	r3, [r0, #8]
   b7df6:	230b      	movs	r3, #11
   b7df8:	8183      	strh	r3, [r0, #12]
   b7dfa:	2100      	movs	r1, #0
   b7dfc:	2001      	movs	r0, #1
   b7dfe:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7e02:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7e04:	2200      	movs	r2, #0
   b7e06:	611c      	str	r4, [r3, #16]
   b7e08:	615a      	str	r2, [r3, #20]
   b7e0a:	bd38      	pop	{r3, r4, r5, pc}
   b7e0c:	2003e578 	.word	0x2003e578
   b7e10:	000b934d 	.word	0x000b934d
   b7e14:	000b9364 	.word	0x000b9364
   b7e18:	abcd330e 	.word	0xabcd330e
   b7e1c:	e66d1234 	.word	0xe66d1234
   b7e20:	0005deec 	.word	0x0005deec

000b7e24 <strncpy>:
   b7e24:	b510      	push	{r4, lr}
   b7e26:	3901      	subs	r1, #1
   b7e28:	4603      	mov	r3, r0
   b7e2a:	b132      	cbz	r2, b7e3a <strncpy+0x16>
   b7e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7e30:	f803 4b01 	strb.w	r4, [r3], #1
   b7e34:	3a01      	subs	r2, #1
   b7e36:	2c00      	cmp	r4, #0
   b7e38:	d1f7      	bne.n	b7e2a <strncpy+0x6>
   b7e3a:	441a      	add	r2, r3
   b7e3c:	2100      	movs	r1, #0
   b7e3e:	4293      	cmp	r3, r2
   b7e40:	d100      	bne.n	b7e44 <strncpy+0x20>
   b7e42:	bd10      	pop	{r4, pc}
   b7e44:	f803 1b01 	strb.w	r1, [r3], #1
   b7e48:	e7f9      	b.n	b7e3e <strncpy+0x1a>
	...

000b7e4c <_strtol_l.constprop.0>:
   b7e4c:	2b01      	cmp	r3, #1
   b7e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e52:	d001      	beq.n	b7e58 <_strtol_l.constprop.0+0xc>
   b7e54:	2b24      	cmp	r3, #36	; 0x24
   b7e56:	d906      	bls.n	b7e66 <_strtol_l.constprop.0+0x1a>
   b7e58:	f7fe fce0 	bl	b681c <__errno>
   b7e5c:	2316      	movs	r3, #22
   b7e5e:	6003      	str	r3, [r0, #0]
   b7e60:	2000      	movs	r0, #0
   b7e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7f4c <_strtol_l.constprop.0+0x100>
   b7e6a:	460d      	mov	r5, r1
   b7e6c:	462e      	mov	r6, r5
   b7e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7e72:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7e76:	f017 0708 	ands.w	r7, r7, #8
   b7e7a:	d1f7      	bne.n	b7e6c <_strtol_l.constprop.0+0x20>
   b7e7c:	2c2d      	cmp	r4, #45	; 0x2d
   b7e7e:	d132      	bne.n	b7ee6 <_strtol_l.constprop.0+0x9a>
   b7e80:	782c      	ldrb	r4, [r5, #0]
   b7e82:	2701      	movs	r7, #1
   b7e84:	1cb5      	adds	r5, r6, #2
   b7e86:	2b00      	cmp	r3, #0
   b7e88:	d05b      	beq.n	b7f42 <_strtol_l.constprop.0+0xf6>
   b7e8a:	2b10      	cmp	r3, #16
   b7e8c:	d109      	bne.n	b7ea2 <_strtol_l.constprop.0+0x56>
   b7e8e:	2c30      	cmp	r4, #48	; 0x30
   b7e90:	d107      	bne.n	b7ea2 <_strtol_l.constprop.0+0x56>
   b7e92:	782c      	ldrb	r4, [r5, #0]
   b7e94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7e98:	2c58      	cmp	r4, #88	; 0x58
   b7e9a:	d14d      	bne.n	b7f38 <_strtol_l.constprop.0+0xec>
   b7e9c:	786c      	ldrb	r4, [r5, #1]
   b7e9e:	2310      	movs	r3, #16
   b7ea0:	3502      	adds	r5, #2
   b7ea2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7ea6:	f108 38ff 	add.w	r8, r8, #4294967295
   b7eaa:	f04f 0c00 	mov.w	ip, #0
   b7eae:	fbb8 f9f3 	udiv	r9, r8, r3
   b7eb2:	4666      	mov	r6, ip
   b7eb4:	fb03 8a19 	mls	sl, r3, r9, r8
   b7eb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7ebc:	f1be 0f09 	cmp.w	lr, #9
   b7ec0:	d816      	bhi.n	b7ef0 <_strtol_l.constprop.0+0xa4>
   b7ec2:	4674      	mov	r4, lr
   b7ec4:	42a3      	cmp	r3, r4
   b7ec6:	dd24      	ble.n	b7f12 <_strtol_l.constprop.0+0xc6>
   b7ec8:	f1bc 0f00 	cmp.w	ip, #0
   b7ecc:	db1e      	blt.n	b7f0c <_strtol_l.constprop.0+0xc0>
   b7ece:	45b1      	cmp	r9, r6
   b7ed0:	d31c      	bcc.n	b7f0c <_strtol_l.constprop.0+0xc0>
   b7ed2:	d101      	bne.n	b7ed8 <_strtol_l.constprop.0+0x8c>
   b7ed4:	45a2      	cmp	sl, r4
   b7ed6:	db19      	blt.n	b7f0c <_strtol_l.constprop.0+0xc0>
   b7ed8:	fb06 4603 	mla	r6, r6, r3, r4
   b7edc:	f04f 0c01 	mov.w	ip, #1
   b7ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ee4:	e7e8      	b.n	b7eb8 <_strtol_l.constprop.0+0x6c>
   b7ee6:	2c2b      	cmp	r4, #43	; 0x2b
   b7ee8:	bf04      	itt	eq
   b7eea:	782c      	ldrbeq	r4, [r5, #0]
   b7eec:	1cb5      	addeq	r5, r6, #2
   b7eee:	e7ca      	b.n	b7e86 <_strtol_l.constprop.0+0x3a>
   b7ef0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7ef4:	f1be 0f19 	cmp.w	lr, #25
   b7ef8:	d801      	bhi.n	b7efe <_strtol_l.constprop.0+0xb2>
   b7efa:	3c37      	subs	r4, #55	; 0x37
   b7efc:	e7e2      	b.n	b7ec4 <_strtol_l.constprop.0+0x78>
   b7efe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7f02:	f1be 0f19 	cmp.w	lr, #25
   b7f06:	d804      	bhi.n	b7f12 <_strtol_l.constprop.0+0xc6>
   b7f08:	3c57      	subs	r4, #87	; 0x57
   b7f0a:	e7db      	b.n	b7ec4 <_strtol_l.constprop.0+0x78>
   b7f0c:	f04f 3cff 	mov.w	ip, #4294967295
   b7f10:	e7e6      	b.n	b7ee0 <_strtol_l.constprop.0+0x94>
   b7f12:	f1bc 0f00 	cmp.w	ip, #0
   b7f16:	da05      	bge.n	b7f24 <_strtol_l.constprop.0+0xd8>
   b7f18:	2322      	movs	r3, #34	; 0x22
   b7f1a:	6003      	str	r3, [r0, #0]
   b7f1c:	4646      	mov	r6, r8
   b7f1e:	b942      	cbnz	r2, b7f32 <_strtol_l.constprop.0+0xe6>
   b7f20:	4630      	mov	r0, r6
   b7f22:	e79e      	b.n	b7e62 <_strtol_l.constprop.0+0x16>
   b7f24:	b107      	cbz	r7, b7f28 <_strtol_l.constprop.0+0xdc>
   b7f26:	4276      	negs	r6, r6
   b7f28:	2a00      	cmp	r2, #0
   b7f2a:	d0f9      	beq.n	b7f20 <_strtol_l.constprop.0+0xd4>
   b7f2c:	f1bc 0f00 	cmp.w	ip, #0
   b7f30:	d000      	beq.n	b7f34 <_strtol_l.constprop.0+0xe8>
   b7f32:	1e69      	subs	r1, r5, #1
   b7f34:	6011      	str	r1, [r2, #0]
   b7f36:	e7f3      	b.n	b7f20 <_strtol_l.constprop.0+0xd4>
   b7f38:	2430      	movs	r4, #48	; 0x30
   b7f3a:	2b00      	cmp	r3, #0
   b7f3c:	d1b1      	bne.n	b7ea2 <_strtol_l.constprop.0+0x56>
   b7f3e:	2308      	movs	r3, #8
   b7f40:	e7af      	b.n	b7ea2 <_strtol_l.constprop.0+0x56>
   b7f42:	2c30      	cmp	r4, #48	; 0x30
   b7f44:	d0a5      	beq.n	b7e92 <_strtol_l.constprop.0+0x46>
   b7f46:	230a      	movs	r3, #10
   b7f48:	e7ab      	b.n	b7ea2 <_strtol_l.constprop.0+0x56>
   b7f4a:	bf00      	nop
   b7f4c:	000b93e2 	.word	0x000b93e2

000b7f50 <strtol>:
   b7f50:	4613      	mov	r3, r2
   b7f52:	460a      	mov	r2, r1
   b7f54:	4601      	mov	r1, r0
   b7f56:	4802      	ldr	r0, [pc, #8]	; (b7f60 <strtol+0x10>)
   b7f58:	6800      	ldr	r0, [r0, #0]
   b7f5a:	f7ff bf77 	b.w	b7e4c <_strtol_l.constprop.0>
   b7f5e:	bf00      	nop
   b7f60:	2003e578 	.word	0x2003e578

000b7f64 <__register_exitproc>:
   b7f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8024 <__register_exitproc+0xc0>
   b7f6c:	4606      	mov	r6, r0
   b7f6e:	f8d8 0000 	ldr.w	r0, [r8]
   b7f72:	461f      	mov	r7, r3
   b7f74:	460d      	mov	r5, r1
   b7f76:	4691      	mov	r9, r2
   b7f78:	f000 f856 	bl	b8028 <__retarget_lock_acquire_recursive>
   b7f7c:	4b25      	ldr	r3, [pc, #148]	; (b8014 <__register_exitproc+0xb0>)
   b7f7e:	681c      	ldr	r4, [r3, #0]
   b7f80:	b934      	cbnz	r4, b7f90 <__register_exitproc+0x2c>
   b7f82:	4c25      	ldr	r4, [pc, #148]	; (b8018 <__register_exitproc+0xb4>)
   b7f84:	601c      	str	r4, [r3, #0]
   b7f86:	4b25      	ldr	r3, [pc, #148]	; (b801c <__register_exitproc+0xb8>)
   b7f88:	b113      	cbz	r3, b7f90 <__register_exitproc+0x2c>
   b7f8a:	681b      	ldr	r3, [r3, #0]
   b7f8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f90:	6863      	ldr	r3, [r4, #4]
   b7f92:	2b1f      	cmp	r3, #31
   b7f94:	dd07      	ble.n	b7fa6 <__register_exitproc+0x42>
   b7f96:	f8d8 0000 	ldr.w	r0, [r8]
   b7f9a:	f000 f847 	bl	b802c <__retarget_lock_release_recursive>
   b7f9e:	f04f 30ff 	mov.w	r0, #4294967295
   b7fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7fa6:	b34e      	cbz	r6, b7ffc <__register_exitproc+0x98>
   b7fa8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7fac:	b988      	cbnz	r0, b7fd2 <__register_exitproc+0x6e>
   b7fae:	4b1c      	ldr	r3, [pc, #112]	; (b8020 <__register_exitproc+0xbc>)
   b7fb0:	b923      	cbnz	r3, b7fbc <__register_exitproc+0x58>
   b7fb2:	f8d8 0000 	ldr.w	r0, [r8]
   b7fb6:	f000 f838 	bl	b802a <__retarget_lock_release>
   b7fba:	e7f0      	b.n	b7f9e <__register_exitproc+0x3a>
   b7fbc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7fc0:	f7fe fc0c 	bl	b67dc <malloc>
   b7fc4:	2800      	cmp	r0, #0
   b7fc6:	d0f4      	beq.n	b7fb2 <__register_exitproc+0x4e>
   b7fc8:	2300      	movs	r3, #0
   b7fca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7fce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7fd2:	6863      	ldr	r3, [r4, #4]
   b7fd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7fd8:	2201      	movs	r2, #1
   b7fda:	409a      	lsls	r2, r3
   b7fdc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7fe0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7fe4:	4313      	orrs	r3, r2
   b7fe6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7fea:	2e02      	cmp	r6, #2
   b7fec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7ff0:	bf02      	ittt	eq
   b7ff2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7ff6:	4313      	orreq	r3, r2
   b7ff8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7ffc:	6863      	ldr	r3, [r4, #4]
   b7ffe:	f8d8 0000 	ldr.w	r0, [r8]
   b8002:	1c5a      	adds	r2, r3, #1
   b8004:	3302      	adds	r3, #2
   b8006:	6062      	str	r2, [r4, #4]
   b8008:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b800c:	f000 f80e 	bl	b802c <__retarget_lock_release_recursive>
   b8010:	2000      	movs	r0, #0
   b8012:	e7c6      	b.n	b7fa2 <__register_exitproc+0x3e>
   b8014:	2003e7e8 	.word	0x2003e7e8
   b8018:	2003e75c 	.word	0x2003e75c
   b801c:	00000000 	.word	0x00000000
   b8020:	000b67dd 	.word	0x000b67dd
   b8024:	2003e5dc 	.word	0x2003e5dc

000b8028 <__retarget_lock_acquire_recursive>:
   b8028:	4770      	bx	lr

000b802a <__retarget_lock_release>:
   b802a:	4770      	bx	lr

000b802c <__retarget_lock_release_recursive>:
   b802c:	4770      	bx	lr

000b802e <link_code_end>:
	...

000b8030 <dynalib_user>:
   b8030:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b8040:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8050:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b8060:	6e69 6f00 7475 7000 6d77 6400 0077 7761     in.out.pwm.dw.aw
   b8070:	7400 706d 006c 4d54 4c50 7232 6a45 6879     .tmpl.TMPL2rEjyh
   b8080:	4a5f 006e 7776 3700 335a 2d66 3365 3377     _Jn.vw.7Z3f-e3w3
   b8090:	7952 6b48 4970 4a72 3767 6655 4444 377a     RyHkpIrJg7UfDDz7
   b80a0:	544c 7039 784c 0035 6c62 6e79 2e6b 6c63     LT9pLx5.blynk.cl
   b80b0:	756f 0064                                   oud.

000b80b4 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b80b4:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b80c4:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b80d4:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b80e4:	6974 6c63 2065 7241 6f67 006e 7766 742d     ticle Argon.fw-t
   b80f4:	7079 0065 4d54 4c50 7232 6a45 6879 4a5f     ype.TMPL2rEjyh_J
   b8104:	006e 7562 6c69 0064 754a 206c 3120 3220     n.build.Jul  1 2
   b8114:	3230 2033 3931 353a 3a33 3534 0000 6400     023 19:53:45...d
   b8124:	6665 7561 746c 0020 534d 0042 534c 0042     efault .MSB.LSB.
   b8134:	533c 4950 6553 7474 6e69 7367 6420 6665     <SPISettings def
   b8144:	7561 746c 003e 533c 4950 6553 7474 6e69     ault>.<SPISettin
   b8154:	7367 2520 2573 2075 7325 4d20 444f 2545     gs %s%u %s MODE%
   b8164:	3e75                                         u>.

000b8167 <_ZL4font>:
   b8167:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8177:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8187:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8197:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b81a7:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b81b7:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b81c7:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b81d7:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b81e7:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b81f7:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8207:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8217:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8227:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8237:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8247:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8257:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8267:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8277:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8287:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8297:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b82a7:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b82b7:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b82c7:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b82d7:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b82e7:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b82f7:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8307:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8317:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8327:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8337:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8347:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8357:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8367:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8377:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8387:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8397:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b83a7:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b83b7:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b83c7:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b83d7:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b83e7:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b83f7:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8407:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8417:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8427:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8437:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8447:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8457:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8467:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8477:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8487:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8497:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b84a7:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b84b7:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b84c7:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b84d7:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b84e7:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b84f7:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8507:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8517:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8527:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8537:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8547:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8557:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8567:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8577:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8587:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8597:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b85a7:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b85b7:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b85c7:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b85d7:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b85e7:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b85f7:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8607:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8617:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8627:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8637:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8647:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8657:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b8668 <_ZTV12Adafruit_GFX>:
	...
   b8678:	53ad 000b 6a89 000b 40c5 000b 4db3 000b     .S...j...@...M..
   b8688:	4db5 000b 4de7 000b 4dc3 000b 4dd5 000b     .M...M...M...M..
   b8698:	4cf5 000b 4db3 000b 4fdf 000b 4fdd 000b     .L...M...O...O..
   b86a8:	4dff 000b 4e3d 000b 4e77 000b 4ebd 000b     .M..=N..wN...N..
   b86b8:	4ed9 000b 4f5d 000b                         .N..]O..

000b86c0 <_ZTV16OledWingAdafruit>:
	...
   b86c8:	54bd 000b 54dd 000b 53ad 000b 6a89 000b     .T...T...S...j..
   b86d8:	59a5 000b 4db3 000b 4db5 000b 4de7 000b     .Y...M...M...M..
   b86e8:	4dc3 000b 4dd5 000b 4cf5 000b 4db3 000b     .M...M...L...M..
   b86f8:	4fdf 000b 5b43 000b 60eb 000b 609d 000b     .O..C[...`...`..
   b8708:	4e77 000b 4ebd 000b 4ed9 000b 4f5d 000b     wN...N...N..]O..

000b8718 <_ZTVN8particle11SPISettingsE>:
	...
   b8720:	4ca1 000b 4c75 000b 4c77 000b               .L..uL..wL..

000b872c <_ZL12splash1_data>:
   b872c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b873c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b874c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b875c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b876c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b877c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8794:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b87a4:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b87b4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b87c4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b87d4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b87e4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b87f4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8804:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b8814:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b8824:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b8834:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b8844:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b8854:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b8864:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8874:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b8884:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b8894:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b88a4:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b88bc:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b88d4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b88e4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b88f4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b8904:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b8914:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b8924:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b8934:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b8944:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b8954:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b8964:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b8974:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b8984:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b8994:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b89a4:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b89b4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b89c4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b89d4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b89e4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b89ec <_ZL12splash2_data>:
   b89ec:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b89fc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b8a0c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b8a28:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b8a38:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b8a48:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b8a58:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b8a68:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b8a78:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b8a88:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b8a98:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b8aa8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b8ab8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b8ac8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b8ad8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b8ae8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b8af8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b8b08:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b8b18:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b8b28:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b8b38:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b8b48:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b8b58:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b8b68:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b8b80:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b8b90:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b8ba0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b8bb0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b8bc0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b8bcc <_ZTV16Adafruit_SSD1306>:
	...
   b8bd4:	5979 000b 5991 000b 53ad 000b 6a89 000b     yY...Y...S...j..
   b8be4:	59a5 000b 4db3 000b 4db5 000b 4de7 000b     .Y...M...M...M..
   b8bf4:	4dc3 000b 4dd5 000b 4cf5 000b 4db3 000b     .M...M...L...M..
   b8c04:	4fdf 000b 5b43 000b 60eb 000b 609d 000b     .O..C[...`...`..
   b8c14:	4e77 000b 4ebd 000b 4ed9 000b 4f5d 000b     wN...N...N..]O..

000b8c24 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8c24:	8000 e0c0 f8f0 fefc                         ........

000b8c2c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b8c2c:	0100 0703 1f0f 7f3f                         ......?.

000b8c34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8c34:	d5ae a880                                   ....

000b8c38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8c38:	00d3 8d40                                   ..@.

000b8c3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b8c3c:	0020 c8a1                                    ...

000b8c40 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b8c40:	40db a6a4 af2e                              .@....

000b8c46 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8c46:	02da 8f81                                   ....

000b8c4a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b8c4a:	12da                                         ...

000b8c4d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b8c4d:	02da                                         ...

000b8c50 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b8c50:	0022 21ff 0000 0000                         "..!....

000b8c58 <_ZL22BlynkReadHandlerVector>:
   b8c58:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8c68:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8c78:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8c88:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8c98:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8ca8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8cb8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8cc8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8cd8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8ce8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8cf8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d08:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d18:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d28:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d38:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d48:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d58:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d68:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d78:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d88:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8d98:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8da8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8db8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8dc8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8dd8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8de8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8df8:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8e08:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8e18:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8e28:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8e38:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..
   b8e48:	6275 000b 6275 000b 6275 000b 6275 000b     ub..ub..ub..ub..

000b8e58 <_ZL23BlynkWriteHandlerVector>:
   b8e58:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8e68:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8e78:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8e88:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8e98:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ea8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8eb8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ec8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ed8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ee8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ef8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f08:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f18:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f28:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f38:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f48:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f58:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f68:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f78:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f88:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8f98:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8fa8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8fb8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8fc8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8fd8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8fe8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b8ff8:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b9008:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b9018:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b9028:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b9038:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..
   b9048:	6277 000b 6277 000b 6277 000b 6277 000b     wb..wb..wb..wb..

000b9058 <_ZTVN5spark13EthernetClassE>:
	...
   b9060:	68ab 000b 68a1 000b 6897 000b 688d 000b     .h...h...h...h..
   b9070:	6881 000b 6875 000b 77c5 000b 77cd 000b     .h..uh...w...w..
   b9080:	6869 000b 6861 000b 6857 000b 684d 000b     ih..ah..Wh..Mh..
   b9090:	77fd 000b                                   .w..

000b9094 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9094:	0800 1810 2820 3830                         .... (08

000b909c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b90a4:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b90b4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b90c4 <_ZTV9IPAddress>:
	...
   b90cc:	6d9d 000b 6d8d 000b 6d8f 000b               .m...m...m..

000b90d8 <_ZTV9USBSerial>:
	...
   b90e0:	6eaf 000b 6f17 000b 6eed 000b 6a89 000b     .n...o...n...j..
   b90f0:	6edf 000b 6eb1 000b 6ec1 000b 6f11 000b     .n...n...n...o..
   b9100:	6ed1 000b 6ea9 000b                         .n...n..

000b9108 <_ZTV11USARTSerial>:
	...
   b9110:	6fb1 000b 701d 000b 6ff5 000b 6a89 000b     .o...p...o...j..
   b9120:	6fc5 000b 6fe1 000b 6fd3 000b 6fef 000b     .o...o...o...o..
   b9130:	6fb3 000b 6fb7 000b                         .o...o..

000b9138 <_ZTV7TwoWire>:
	...
   b9140:	7055 000b 709f 000b 7077 000b 7057 000b     Up...p..wp..Wp..
   b9150:	707f 000b 7087 000b 708f 000b 7097 000b     .p...p...p...p..
   b9160:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b9170:	2072 203d 6425 0000                         r = %d..

000b9178 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9180:	71f5 000b 7219 000b 7703 000b 7227 000b     .q...r...w..'r..
   b9190:	71f9 000b                                   .q..

000b9194 <_ZTV9TCPClient>:
	...
   b919c:	6c1d 000b 6c35 000b 7171 000b 718b 000b     .l..5l..qq...q..
   b91ac:	7599 000b 71b5 000b 740f 000b 71e9 000b     .u...q...t...q..
   b91bc:	74a1 000b 72e1 000b 743d 000b 764d 000b     .t...r..=t..Mv..
   b91cc:	73dd 000b 71eb 000b 719d 000b 722d 000b     .s...q...q..-r..
   b91dc:	72c1 000b                                   .r..

000b91e0 <_ZTVN5spark9WiFiClassE>:
	...
   b91e8:	7767 000b 775d 000b 7753 000b 7709 000b     gw..]w..Sw...w..
   b91f8:	7747 000b 773b 000b 77c5 000b 77cd 000b     Gw..;w...w...w..
   b9208:	772f 000b 7727 000b 771d 000b 7713 000b     /w..'w...w...w..
   b9218:	77fd 000b                                   .w..

000b921c <_ZTVN5spark12NetworkClassE>:
	...
   b9224:	7785 000b 778f 000b 7799 000b 77a3 000b     .w...w...w...w..
   b9234:	77ad 000b 77b9 000b 77c5 000b 77cd 000b     .w...w...w...w..
   b9244:	77d5 000b 77e1 000b 77e9 000b 77f3 000b     .w...w...w...w..
   b9254:	77fd 000b                                   .w..

000b9258 <_ZSt7nothrow>:
	...

000b9259 <_ZTSSt19_Sp_make_shared_tag>:
   b9259:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9269:	6572 5f64 6174 0067 0000                     red_tag....

000b9274 <_ZTISt19_Sp_make_shared_tag>:
   b9274:	92b4 000b 9259 000b                         ....Y...

000b927c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b927c:	9314 000b 9288 000b 9338 000b               ........8...

000b9288 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9288:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9298:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b92a8:	0045 0000                                   E...

000b92ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   b92ac:	0000 0000 927c 000b 7ba9 000b 7bbd 000b     ....|....{...{..
   b92bc:	7d51 000b 7d51 000b 7c27 000b 7b69 000b     Q}..Q}..'|..i{..
   b92cc:	7c0f 000b 7bd1 000b 7b9b 000b               .|...{...{..

000b92d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b92d8:	9314 000b 92e4 000b 927c 000b               ........|...

000b92e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b92e4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b92f4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9304:	666e 456f 0000 0000                         nfoE....

000b930c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b930c:	0000 0000 92d8 000b 7c51 000b 7c65 000b     ........Q|..e|..
   b931c:	7d51 000b 7d51 000b 7c27 000b 7b69 000b     Q}..Q}..'|..i{..
   b932c:	7d25 000b 7cb1 000b 7c79 000b               %}...|..y|..

000b9338 <_ZTISt9type_info>:
   b9338:	92b4 000b 9340 000b                         ....@...

000b9340 <_ZTSSt9type_info>:
   b9340:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9350:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9360:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b9370:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b9380:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b9390:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b93a0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b93b0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b93c0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b93d0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b93e1 <_ctype_>:
   b93e1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b93f1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9401:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9411:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9421:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9431:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9441:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9451:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9461:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b94e2 <link_const_data_end>:
	...

000b94e4 <link_constructors_location>:
   b94e4:	000b4c21 	.word	0x000b4c21
   b94e8:	000b68b5 	.word	0x000b68b5
   b94ec:	000b6a2d 	.word	0x000b6a2d
   b94f0:	000b6a79 	.word	0x000b6a79
   b94f4:	000b6bf1 	.word	0x000b6bf1
   b94f8:	000b6c01 	.word	0x000b6c01
   b94fc:	000b6c49 	.word	0x000b6c49
   b9500:	000b7771 	.word	0x000b7771
   b9504:	000b78d5 	.word	0x000b78d5
